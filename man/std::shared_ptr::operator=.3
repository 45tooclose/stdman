.TH std::shared_ptr::operator= 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::shared_ptr::operator= \- std::shared_ptr::operator=

.SH Synopsis
   shared_ptr& operator=( const shared_ptr& r );            \fB(1)\fP
   template< class Y >                                      \fB(1)\fP
   shared_ptr& operator=( const shared_ptr<Y>& r );
   shared_ptr& operator=( shared_ptr&& r );                 \fB(2)\fP
   template< class Y >                                      \fB(2)\fP
   shared_ptr& operator=( shared_ptr<Y>&& r );
   template< class Y >                                      \fB(3)\fP
   shared_ptr& operator=( std::auto_ptr<Y>&& r );
   template< class Y, class Deleter >                       \fB(4)\fP
   shared_ptr& operator=( std::unique_ptr<Y,Deleter>&& r );

   Replaces the managed object with the one managed by r.

   1) Shares ownership of the object managed by r. If r manages no object, *this
   manages no object too. The templated overload doesn't participate in the overload
   resolution if Y* is not implicitly convertible to T*. Equivalent to shared_ptr<T>
   p(r).swap(*this).

   2) Move-assigns a shared_ptr from r. After the assignment, *this contains a copy of
   the previous state of r, r is empty. The templated overload doesn't participate in
   the overload resolution if Y* is not implicitly convertible to T*. Equivalent to
   shared_ptr<T> p(std::move(r)).swap(*this).

   3)

    This section is incomplete

   4) Transfers the ownership of the object managed by r to *this. The deleter
   associated to r is stored for future deletion of the managed object. r manages no
   object after the call. Equivalent to shared_ptr<T> p(std::move(r)).swap(*this).

.SH Parameters

   r - another smart pointer to share the ownership to or acquire the ownership from

.SH Return value

   *this

.SH Notes

   The implementation may meet the requirements without creating a temporary shared_ptr
   object.

.SH Exceptions

   1-2)
   noexcept specification:  
   noexcept
     

   3) \fI(none)\fP

   4-5)
   noexcept specification:  
   noexcept
     

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   reset replaces the managed object
         \fI(public member function)\fP 

   Categories:

     * Todo without reason
     * Todo no example
