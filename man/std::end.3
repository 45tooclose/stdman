.TH std::end 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <iterator>
   template< class C >                               \fB(1)\fP \fI(since C++11)\fP
   auto end( C& c ) -> decltype(c.end());
   template< class C >                               \fB(1)\fP \fI(since C++11)\fP
   auto end( const C& c ) -> decltype(c.end());
   template< class T, size_t N >                     \fB(2)\fP \fI(since C++11)\fP
   T* end( T (&array)[N] );
   template< class C >                               \fB(3)\fP \fI(since C++14)\fP
   auto cend( const C& c ) -> decltype(std::end(c));

   Returns an iterator to the end (i.e. the element after the last element) of the
   given container c or array array.

   1) Returns a possibly const-qualified iterator to the end of the container c.
   2) Returns a pointer to the end of the array array.
   3) Returns a const-qualified iterator to the end of the container c.

   range-begin-end.svg

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Notes
     * 4 Specializations
     * 5 Example
     * 6 See also

.SH Parameters

   c     - a container with an end method
   array - an array of arbitrary type

.SH Return value

   An iterator to the end of c or array. Note that the end of a container or array is
   defined as the element following the last valid element.

.SH Notes

   In addition to being included in <iterator>, std::end is guaranteed to become
   available if any of the following headers are included: <array>, <deque>,
   <forward_list>, <list>, <map>, <regex>, <set>, <string>, <unordered_map>,
   <unordered_set>, and <vector>.

.SH Specializations

   Custom specializations of std::end may be provided for classes that do not expose a
   suitable end() member function, yet can be iterated. The following specializations
   are already provided by the standard library:

   std::end(std::initializer_list) specializes std::end
   \fI(C++11)\fP                         \fI(function template)\fP
   std::end(std::valarray)         specializes std::end
   \fI(C++11)\fP                         \fI(function template)\fP

.SH Example

   
// Run this code

 #include <iostream>
 #include <vector>
 #include <iterator>
 #include <algorithm>

 int main()
 {
     std::vector<int> v = { 3, 1, 4 };
     if (std::find(std::begin(v), std::end(v), 5) != std::end(v)) {
         std::cout << "found a 5 in vector v!\\n";
     }

     int a[] = { 5, 10, 15 };
     if (std::find(std::begin(a), std::end(a), 5) != std::end(a)) {
         std::cout << "found a 5 in array a!\\n";
     }
 }

.SH Output:

 found a 5 in array a!

.SH See also

   begin
   cbegin  returns an iterator to the beginning of a container or array
   \fI(C++11)\fP \fI(function)\fP
   \fI(C++14)\fP
