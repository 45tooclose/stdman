.TH std::recursive_timed_mutex 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <mutex>
   class recursive_timed_mutex;  \fI(since C++11)\fP

   The recursive_timed_mutex class is a synchronization primitive that can be used to
   protect shared data from being simultaneously accessed by multiple threads.

   In a manner similar to std::thread::recursive_mutex, recursive_timed_mutex provides
   exclusive, recursive ownership semantics. In addition, recursive_timed_mutex
   provides the ability to attempt to claim ownership of a recursive_timed_mutex with a
   timeout via the try_lock_for and try_lock_until methods.

   The recursive_timed_mutex class satisfies all requirements of TimedMutex and
   StandardLayoutType.

.SH Contents

     • 1 Member types
     • 2 Member functions

          • 2.1 Locking
          • 2.2 Native handle

.SH Member types

   Member type        Definition
   native_handle_type implementation-defined

.SH Member functions

   constructor    constructs the mutex
                  \fI(public member function)\fP
   destructor     destroys the mutex
                  \fI(public member function)\fP
   operator=      not copy-assignable
   [deleted]      \fI(public member function)\fP
.SH Locking
   lock           locks the mutex, blocks if the mutex is not available
                  \fI(public member function)\fP
   try_lock       tries to lock the mutex, returns if the mutex is not available
                  \fI(public member function)\fP
                  tries to lock the mutex, returns if the mutex has been
   try_lock_for   unavailable for the specified timeout duration
                  \fI(public member function)\fP
                  tries to lock the mutex, returns if the mutex has been
   try_lock_until unavailable until specified time point has been reached
                  \fI(public member function)\fP
   unlock         unlocks the mutex
                  \fI(public member function)\fP
.SH Native handle
   native_handle  returns the underlying implementation-defined thread handle
                  \fI(public member function)\fP
