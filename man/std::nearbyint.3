.TH std::nearbyint 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cmath>
   float       nearbyint( float arg );        \fI(since C++11)\fP
   double      nearbyint( double arg );       \fI(since C++11)\fP
   long double nearbyint( long double arg );  \fI(since C++11)\fP
   double      nearbyint( Integral arg );     \fI(since C++11)\fP

   Rounds the floating-point argument arg to an integer value in floating-point format,
   using the current rounding mode.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Notes
     • 4 Example
     • 5 See also

.SH Parameters

   arg - floating point value

.SH Return value

   The integer result of rounding arg

.SH Notes

   The only difference between std::nearbyint and std::rint is that std::rint may raise
   the FE_INEXACT floating-point exception, while std::nearbyint never raises it.

.SH Example

   
// Run this code

 #include <cmath>
 #include <cfenv>
 #include <iostream>
  
 int main()
 {
     #pragma STDC FENV_ACCESS ON
     std::fesetround(FE_DOWNWARD);
     std::cout << "rounding using FE_DOWNWARD: \\n" << std::fixed
               << " 12.0 ->  " << std::nearbyint(12.0) << '\\n'
               << " 12.1 ->  " << std::nearbyint(12.1) << '\\n'
               << "-12.1 -> " << std::nearbyint(-12.1) << '\\n'
               << " 12.5 ->  " << std::nearbyint(12.5) << '\\n'
               << " 12.9 ->  " << std::nearbyint(12.9) << '\\n'
               << "-12.9 -> " << std::nearbyint(-12.9) << '\\n'
               << " 13.0 ->  " << std::nearbyint(13.0) << '\\n';
     std::fesetround(FE_TONEAREST);
     std::cout << "rounding using FE_TONEAREST: \\n"
               << " 12.0 ->  " << std::nearbyint(12.0) << '\\n'
               << " 12.1 ->  " << std::nearbyint(12.1) << '\\n'
               << "-12.1 -> " << std::nearbyint(-12.1) << '\\n'
               << " 12.5 ->  " << std::nearbyint(12.5) << '\\n'
               << " 12.9 ->  " << std::nearbyint(12.9) << '\\n'
               << "-12.9 -> " << std::nearbyint(-12.9) << '\\n'
               << " 13.0 ->  " << std::nearbyint(13.0) << '\\n';
 }

.SH Output:

 rounding using FE_DOWNWARD:
  12.0 ->  12.000000
  12.1 ->  12.000000
 -12.1 -> -13.000000
  12.5 ->  12.000000
  12.9 ->  12.000000
 -12.9 -> -13.000000
  13.0 ->  13.000000
 rounding using FE_TONEAREST:
  12.0 ->  12.000000
  12.1 ->  12.000000
 -12.1 -> -12.000000
  12.5 ->  12.000000
  12.9 ->  13.000000
 -12.9 -> -13.000000
  13.0 ->  13.000000

.SH See also

   rint
   lrint      nearest integer using current rounding mode with
   llrint     exception if the result differs
   \fI(C++11)\fP    \fI(function)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   round
   lround
   llround    nearest integer, rounding away from zero in halfway cases
   \fI(C++11)\fP    \fI(function)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   fegetround
   fesetround gets or sets rounding direction
   \fI(C++11)\fP    \fI(function)\fP
   \fI(C++11)\fP
