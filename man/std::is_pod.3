.TH std::is_pod 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_pod \- std::is_pod

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_pod;

   If T is a PODType ("plain old data type"), that is, both trivial and
   standard-layout, provides the member constant value equal true. For any other type,
   value is false.

   

.SH Member constants

   value    true if T is a POD type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Objects of POD types are fully compatible with the C programming language.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct A {
     int m;
 };
  
 struct B {
     int m1;
 private:
     int m2;
 };
  
 struct C {
     virtual void foo();
 };
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_pod<A>::value << '\\n';
     std::cout << std::is_pod<B>::value << '\\n';
     std::cout << std::is_pod<C>::value << '\\n';
 }

.SH Output:

 true
 false
 false

.SH See also

   is_standard_layout          checks if a type is standard-layout type
   \fI(C++11)\fP                     \fI(class template)\fP 
   is_trivial                  checks if a type is trivial
   \fI(C++11)\fP                     \fI(class template)\fP 
   std::experimental::is_pod_v variable template alias of std::is_pod::value
   (library fundamentals TS)   (variable template) 
