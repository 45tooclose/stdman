.TH std::map::try_emplace 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   template <class... Args>
   pair<iterator, bool> try_emplace(const key_type& k, Args&&...      \fB(1)\fP (since C++17)
   args);
   template <class... Args>                                           \fB(2)\fP (since C++17)
   pair<iterator, bool> try_emplace(key_type&& k, Args&&... args);
   template <class... Args>
   iterator try_emplace(const_iterator hint, const key_type& k,       \fB(3)\fP (since C++17)
   Args&&... args);
   template <class... Args>
   iterator try_emplace(const_iterator hint, key_type&& k, Args&&...  \fB(4)\fP (since C++17)
   args);

   1) If a key equivalent to k already exists in the container, does nothing.
   Otherwise, behaves like emplace except that the element is constructed as
   value_type(std::piecewise_construct, std::forward_as_tuple(k),
   std::forward_as_tuple(forward<Args>(args)...))
   2) If a key equivalent to k already exists in the container, does nothing.
   Otherwise, behaves like emplace except that the element is constructed as
   value_type(std::piecewise_construct, std::forward_as_tuple(std::move(k)),
   std::forward_as_tuple(forward<Args>(args)...))
   3) If a key equivalent to k already exists in the container, does nothing.
   Otherwise, behaves like emplace_hint except that the element is constructed as
   value_type(std::piecewise_construct, std::forward_as_tuple(k),
   std::forward_as_tuple(forward<Args>(args)...))
   4) If a key equivalent to k already exists in the container, does nothing.
   Otherwise, behaves like emplace_hint except that the element is constructed as
   value_type(std::piecewise_construct, std::forward_as_tuple(std::move(k)),
   std::forward_as_tuple(forward<Args>(args)...))

   No iterators or references are invalidated.

.SH Parameters

   k    - the key used both to look up and to insert if not found
   hint - iterator to the position before which the new element will be inserted
   args - arguments to forward to the constructor of the element

.SH Return value

   1,2) Same as for emplace
   3,4) Same as for emplace_hint

.SH Complexity

   1,2) Same as for emplace
   3,4) Same as for emplace_hint

.SH Notes

   Unlike insert or emplace, these functions do not steal from move-only arguments if
   the insertion does not happen, which makes it easy to manipulate maps whose values
   are move-only types, such as std::map<std::string, std::unique_ptr<foo>>. In
   addition, try_emplace treats the key and the arguments to the mapped_type
   separately, unlike emplace, which requires the arguments to construct a value_type
   (that is, a std::pair)

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   emplace      constructs element in-place
   \fI(C++11)\fP      \fI(public member function)\fP
   emplace_hint constructs elements in-place using a hint
   \fI(C++11)\fP      \fI(public member function)\fP
   insert       inserts elements
                \fI(public member function)\fP

.SH Category:

     * Todo no example
