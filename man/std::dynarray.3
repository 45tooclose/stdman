.TH std::dynarray 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::dynarray \- std::dynarray

.SH Synopsis
   Defined in header <dynarray>
   template<

       class T                   \fI(since C++14)\fP

   > class dynarray;

   std::dynarray is a sequence container that encapsulates arrays with a size that is
   fixed at construction and does not change throughout the lifetime of the object.

   The elements are stored contiguously, which means that elements can be accessed not
   only through iterators, but also using offsets on regular pointers to elements. This
   means that a pointer to an element of a dynarray may be passed to any function that
   expects a pointer to an element of an array.

   There is a special case for a zero-length array (the number of elements was
   specified as zero during construction). In that case, array.begin() == array.end(),
   which is some unique value. The effect of calling front() or back() on a zero-sized
   dynarray is undefined.

.SH Template parameters

    This section is incomplete


.SH Member types

   Member type            Definition
   value_type             T 
   size_type              std::size_t 
   difference_type        std::ptrdiff_t 
   reference              value_type& 
   const_reference        const value_type& 
   pointer                value_type*
   const_pointer          const value_type*
   iterator               RandomAccessIterator 
   const_iterator         Constant random access iterator 
   reverse_iterator       std::reverse_iterator<iterator> 
   const_reverse_iterator std::reverse_iterator<const_iterator> 

.SH Member functions

   constructor   constructs the dynarray
                 \fI(public member function)\fP 
   destructor    destructs the dynarray
                 \fI(public member function)\fP 
   operator=     the container is neither copy-, nor move-assignable
   [deleted]     \fI(public member function)\fP 
.SH Element access
   at            access specified element with bounds checking
                 \fI(public member function)\fP 
   operator[]    access specified element
                 \fI(public member function)\fP 
   front         access the first element
                 \fI(public member function)\fP 
   back          access the last element
                 \fI(public member function)\fP 
   data          direct access to the underlying array
                 \fI(public member function)\fP 
.SH Iterators
   begin         returns an iterator to the beginning
   cbegin        \fI(public member function)\fP 
   end           returns an iterator to the end
   cend          \fI(public member function)\fP 
   rbegin        returns a reverse iterator to the beginning
   crbegin       \fI(public member function)\fP 
   rend          returns a reverse iterator to the end
   crend         \fI(public member function)\fP 
.SH Capacity
   empty         checks whether the container is empty
                 \fI(public member function)\fP 
   size          returns the number of elements
                 \fI(public member function)\fP 
   max_size      returns the maximum possible number of elements
                 \fI(public member function)\fP 
.SH Modifiers
   fill          fill the container with specified value
                 \fI(public member function)\fP 

.SH Non-member functions

   operator==
   operator!=
   operator<  lexicographically compares the values in the dynarray
   operator<= \fI(function template)\fP 
   operator>
   operator>=

.SH Helper classes

   std::uses_allocator<std::dynarray> specializes the std::uses_allocator type trait
   \fI(C++11)\fP                            \fI(function template)\fP 

.SH Category:

     * Todo without reason
