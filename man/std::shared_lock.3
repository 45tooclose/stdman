.TH std::shared_lock 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <mutex>
   template< class Mutex >    \fI(since C++14)\fP
   class shared_lock;

   The class shared_lock is a general-purpose shared mutex ownership wrapper allowing
   deferred locking, timed locking and transfer of lock ownership. Locking a
   shared_lock locks the associated shared mutex in shared mode (to lock it in
   exclusive mode, std::unique_lock can be used)

   The shared_lock class is movable, but not copyable -- it meets the requirements of
   MoveConstructible and MoveAssignable but not of CopyConstructible or CopyAssignable.

.SH Contents

     * 1 Template parameters
     * 2 Member types
     * 3 Member functions

          * 3.1 Shared locking
          * 3.2 Modifiers
          * 3.3 Observers

     * 4 Non-member functions

.SH Template parameters

   Mutex - the type of the shared mutex to lock. The type must meet the SharedMutex
           requirements

.SH Member types

   Type       Definition
   mutex_type Mutex

.SH Member functions

   constructor    constructs a shared_lock, optionally locking the supplied mutex
                  \fI(public member function)\fP
   destructor     unlocks the associated mutex
                  \fI(public member function)\fP
   operator=      unlocks the mutex, if owned, and acquires ownership of another
                  \fI(public member function)\fP
.SH Shared locking
   lock           locks the associated mutex
                  \fI(public member function)\fP
   try_lock       tries to lock the associated mutex
                  \fI(public member function)\fP
   try_lock_for   tries to lock the associated mutex, for the specified duration
                  \fI(public member function)\fP
   try_lock_until tries to lock the associated mutex, until a specified time point
                  \fI(public member function)\fP
   unlock         unlocks the associated mutex
                  \fI(public member function)\fP
.SH Modifiers
   swap           swaps the data members with another shared_lock
                  \fI(public member function)\fP
   release        disassociates the mutex without unlocking
                  \fI(public member function)\fP
.SH Observers
   mutex          returns a pointer to the associated mutex
                  \fI(public member function)\fP
   owns_lock      tests whether the lock owns its associated mutex
                  \fI(public member function)\fP
   operator bool  tests whether the lock owns its associated mutex
                  \fI(public member function)\fP

.SH Non-member functions

   std::swap(std::shared_lock) specialization of std::swap for shared_lock
                               \fI(function template)\fP
