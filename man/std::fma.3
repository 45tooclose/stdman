.TH std::fma 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cmath>
   float       fma( float x, float y, float z );                   \fB(1)\fP \fI(since C++11)\fP
   double      fma( double x, double y, double z );                \fB(2)\fP \fI(since C++11)\fP
   long double fma( long double x, long double y, long double z ); \fB(3)\fP \fI(since C++11)\fP
   Promoted    fma( Arithmetic1 x, Arithmetic2 y, Arithmetic3 z ); \fB(4)\fP \fI(since C++11)\fP
   #define FP_FAST_FMA  /* implementation-defined */               \fB(5)\fP \fI(since C++11)\fP
   #define FP_FAST_FMAF /* implementation-defined */               \fB(6)\fP \fI(since C++11)\fP
   #define FP_FAST_FMAL /* implementation-defined */               \fB(7)\fP \fI(since C++11)\fP

   The fma functions compute (x*y) + z, rounded as one ternary operation, according to
   the rounding mode characterized by the value of FLT_ROUNDS.

   4) If any argument has integral type, it is cast to double. If any other argument is
   long double, then the return type is long double, otherwise it is double.

   5-7) If the macro constants FP_FAST_FMAF, FP_FAST_FMA, or FP_FAST_FMAL are defined,
   the function std::fma evaluates faster than the expression x*y+z for float, double,
   and long double arguments, respectively. If defined, these macros evaluate to
   integer 1.

.SH Parameters

   x, y, z - values of floating-point or integral types

.SH Return value

   (x*y) + z, rounded as one ternary operation

.SH See also

   remainder signed remainder of the division operation
   \fI(C++11)\fP   \fI(function)\fP
   remquo    signed remainder as well as the three last bits of the division operation
   \fI(C++11)\fP   \fI(function)\fP
   C documentation for
   fma
