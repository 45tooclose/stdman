.TH std::merge 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::merge \- std::merge

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt1, class InputIt2, class OutputIt >

   OutputIt merge( InputIt1 first1, InputIt1 last1,                         \fB(1)\fP
                   InputIt2 first2, InputIt2 last2,

                   OutputIt d_first );
   template< class InputIt1, class InputIt2, class OutputIt, class Compare>

   OutputIt merge( InputIt1 first1, InputIt1 last1,                         \fB(2)\fP
                   InputIt2 first2, InputIt2 last2,

                   OutputIt d_first, Compare comp );

   Merges two sorted ranges [first1, last1) and [first2, last2) into one sorted range
   beginning at d_first. The first version uses operator< to compare the elements, the
   second version uses the given comparison function comp. The relative order of
   equivalent elements is preserved.

   The behavior is undefined if the destination range overlaps either of the input
   ranges (the input ranges may overlap each other).

.SH Parameters

   first1, last1 - the first range of elements to merge
   first2, last2 - the second range of elements to merge
   d_first       - the beginning of the destination range
                   comparison function object (i.e. an object that satisfies the
                   requirements of Compare) which returns true if the first argument
                   is less than (i.e. is ordered before) the second.

                   The signature of the comparison function should be equivalent to the
                   following:
   comp          -
                    bool cmp(const Type1 &a, const Type2 &b);

                   The signature does not need to have const &, but the function object
                   must not modify the objects passed to it.
                   The types Type1 and Type2 must be such that objects of types
                   InputIt1 and InputIt2 can be dereferenced and then implicitly
                   converted to both Type1 and Type2. 
.SH Type requirements
   -
   InputIt1 must meet the requirements of InputIterator.
   -
   InputIt2 must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.

.SH Return value

   An output iterator to element past the last element copied.

.SH Complexity

   At most std::distance(first1, last1) + std::distance(first2, last2) - 1 comparisons.

.SH Notes

   This algorithm performs a similar task as std::set_union does. Both consume two
   sorted input ranges and produce a sorted output with elements from both inputs. The
   difference bewteen these two algorithms is with handling values from both input
   ranges which compare equivalent (see notes on LessThanComparable). If any equivalent
   values appeared n times in the first range and m times in the second, std::merge
   would output all n+m occurrences whereas std::set_union would output std::max(n, m)
   ones only. So std::merge outputs exactly std::distance(first1, last1) +
   std::distance(first2, last2) values and std::set_union may produce less.

.SH Possible implementation

.SH First version
   template<class InputIt1, class InputIt2, class OutputIt>
   OutputIt merge(InputIt1 first1, InputIt1 last1,
                  InputIt2 first2, InputIt2 last2,
                  OutputIt d_first)
   {
       for (; first1 != last1; ++d_first) {
           if (first2 == last2) {
               return std::copy(first1, last1, d_first);
           }
           if (*first2 < *first1) {
               *d_first = *first2;
               ++first2;
           } else {
               *d_first = *first1;
               ++first1;
           }
       }
       return std::copy(first2, last2, d_first);
   }
.SH Second version
   template<class InputIt1, class InputIt2,
            class OutputIt, class Compare>
   OutputIt merge(InputIt1 first1, InputIt1 last1,
                  InputIt2 first2, InputIt2 last2,
                  OutputIt d_first, Compare comp)
   {
       for (; first1 != last1; ++d_first) {
           if (first2 == last2) {
               return std::copy(first1, last1, d_first);
           }
           if (comp(*first2, *first1)) {
               *d_first = *first2;
               ++first2;
           } else {
               *d_first = *first1;
               ++first1;
           }
       }
       return std::copy(first2, last2, d_first);
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <iterator>
 #include <algorithm>
 #include <vector>
 #include <random>
 #include <functional>
  
 int main()
 {
     // fill the vectors with random numbers
     std::random_device rd;
     std::mt19937 mt(rd());
     std::uniform_int_distribution<> dis(0, 9);
  
     std::vector<int> v1(10), v2(10);
     std::generate(v1.begin(), v1.end(), std::bind(dis, std::ref(mt)));
     std::generate(v2.begin(), v2.end(), std::bind(dis, std::ref(mt)));
  
     // sort
     std::sort(v1.begin(), v1.end());
     std::sort(v2.begin(), v2.end());
  
     // output v1
     std::cout << "v1 : ";
     std::copy(v1.begin(), v1.end(), std::ostream_iterator<int>(std::cout, " "));
     std::cout << '\\n';
  
     // output v2
     std::cout << "v2 : ";
     std::copy(v2.begin(), v2.end(), std::ostream_iterator<int>(std::cout, " "));
     std::cout << '\\n';
  
     // merge
     std::vector<int> dst;
     std::merge(v1.begin(), v1.end(), v2.begin(), v2.end(), std::back_inserter(dst));
  
     // output
     std::cout << "dst: ";
     std::copy(dst.begin(), dst.end(), std::ostream_iterator<int>(std::cout, " "));
     std::cout << '\\n';
 }

.SH Possible output:

 v1 : 0 1 3 4 4 5 5 8 8 9
 v2 : 0 2 2 3 6 6 8 8 8 9
 dst: 0 0 1 2 2 3 3 4 4 5 5 6 6 8 8 8 8 8 9 9

.SH See also

   inplace_merge                      merges two ordered ranges in-place
                                      \fI(function template)\fP 
   set_union                          computes the union of two sets
                                      \fI(function template)\fP 
   sort                               sorts a range into ascending order
                                      \fI(function template)\fP 
                                      sorts a range of elements while preserving order
   stable_sort                        between equal elements
                                      \fI(function template)\fP 
   std::experimental::parallel::merge parallelized version of std::merge
   (parallelism TS)                   \fI(function template)\fP 
