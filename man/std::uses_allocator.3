.TH std::uses_allocator 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <memory>
   template< class T, class Alloc >  \fI(since C++11)\fP
   struct uses_allocator

   If T has a member typedef allocator_type which is convertible from Alloc, provides
   the member constant value equal to true. Otherwise value is false.

.SH Contents

     * 1 Inherited from
       std::integral_constant

          * 1.1 Member constants
          * 1.2 Member functions
          * 1.3 Member types
          * 1.4 Specializations
          * 1.5 Notes
          * 1.6 See also

Inherited from std::integral_constant

.SH Member constants

   value    true if T uses allocator Alloc, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Specializations

   Custom specializations of the type trait std::uses_allocator are allowed for types
   that do not have the member typedef allocator_type but satisfy one of the following
   two requirements:

   1) T has a constructor which takes std::allocator_arg_t as the first argument, and
   Alloc as the second argument.

   2) T has a constructor which takes Alloc as the last argument.

   The following specializations are already provided by the standard library:

   std::uses_allocator<std::tuple>          specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(class template specialization)\fP
   std::uses_allocator<std::queue>          specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(function template)\fP
   std::uses_allocator<std::priority_queue> specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(function template)\fP
   std::uses_allocator<std::stack>          specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(function template)\fP
   std::uses_allocator<std::function>       specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(class template specialization)\fP
   std::uses_allocator<std::promise>        specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(class template specialization)\fP
   std::uses_allocator<std::packaged_task>  specializes the std::uses_allocator type
   \fI(C++11)\fP                                  trait
                                            \fI(class template specialization)\fP

.SH Notes

   This type trait is used by std::scoped_allocator_adaptor and may be used by custom
   allocators to determine whether the object being constructed is itself capable of
   using an allocator (e.g. is a container), in which case an allocator should be
   passed to its constructor.

.SH See also

   allocator_arg            an object of type std::allocator_arg_t used to select
   \fI(C++11)\fP                  allocator-aware constructors
                            (constant)
   allocator_arg_t          tag type used to select allocator-aware constructor
   \fI(C++11)\fP                  overloads
                            \fI(class)\fP
   scoped_allocator_adaptor implements multi-level allocator for multi-level containers
   \fI(C++11)\fP                  \fI(class template)\fP
