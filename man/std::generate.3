.TH std::generate 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt, class Generator >
   void generate( ForwardIt first, ForwardIt last, Generator g );

   Assigns each element in range [first, last) a value generated by the given function
   object g.

.SH Parameters

   first, last - the range of elements to generate
                 generator function object that will be called.

                 The signature of the function should be equivalent to the following:
   g           -
                 Ret fun();

                 The type Ret must be such that an object of type ForwardIt can be
                 dereferenced and assigned a value of type Ret. 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Exactly std::distance(first, last) invocations of g() and assignments.

.SH Possible implementation

   template<class ForwardIt, class Generator>
   void generate(ForwardIt first, ForwardIt last, Generator g)
   {
       while (first != last) {
           *first++ = g();
       }
   }

.SH Example

   The following code fills a vector with random numbers:

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <cstdlib>
  
 int main()
 {
     std::vector<int> v(5);
     std::generate(v.begin(), v.end(), std::rand); // Using the C function rand()
  
     std::cout << "v: ";
     for (auto iv: v) {
         std::cout << iv << " ";
     }
     std::cout << "\\n";
  
     // Initialize with default values 0,1,2,3,4 from a lambda function
     int n(0);
     std::generate(v.begin(), v.end(), [&]{ return n++; });
  
     std::cout << "v: ";
     for (auto iv: v) {
         std::cout << iv << " ";
     }
     std::cout << "\\n";
 }

.SH Possible output:

 v: 52894 15984720 41513563 41346135 51451456
 v: 0 1 2 3 4

.SH See also

   fill       assigns a range of elements a certain value
              \fI(function template)\fP 
   generate_n saves the result of N applications of a function
              \fI(function template)\fP 
