.TH std::cin,std::wcin 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::cin,std::wcin \- std::cin,std::wcin

.SH Synopsis
   Defined in header <iostream>
   extern std::istream cin;     \fB(1)\fP
   extern std::wistream wcin;   \fB(2)\fP

   The global objects std::cin and std::wcin control input from a stream buffer of
   implementation-defined type (derived from std::streambuf), associated with the
   standard C input stream stdin.

   These objects are guaranteed to be constructed before the first constructor of a
   static object is called and they are guaranteed to outlive the last destructor of a
   static object, so that it is always possible to read from std::cin in user code.

   Unless sync_with_stdio(false) has been issued, it is safe to concurrently access
   these objects from multiple threads for both formatted and unformatted input.

   Once std::cin is constructed, std::cin.tie() returns &std::cout, and likewise,
   std::wcin.tie() returns &std::wcout. This means that any formatted input operation
   on std::cin forces a call to std::cout.flush() if any characters are pending for
   output.

.SH Example

   
// Run this code

 #include <iostream>
 struct Foo {
     int n;
     Foo() {
        std::cout << "Enter n: "; // no flush needed
        std::cin >> n;
     }
 };
 Foo f; // static object
 int main()
 {
     std::cout << "f.n is " << f.n << '\\n';
 }

.SH Output:

 Enter n: 10
 f.n is 10

.SH See also

   Init  initializes standard stream objects
         \fI(public member class of std::ios_base)\fP 
   cout  writes to the standard C output stream stdout
   wcout (global object) 
