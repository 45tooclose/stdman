.TH std::is_bind_expression 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <functional>
   template< class T >             \fI(since C++11)\fP
   struct is_bind_expression;

   If T is the type produced by a call to std::bind, this template provides the member
   constant value equal true. For any other type, value is false.

   This template may be specialized for a user-defined type which should be treated by
   std::bind as if it was the type of a bind subexpression: when a bind-generated
   function object is invoked, a bound argument of this type will be invoked as a
   function object and will be given all the unbound arguments passed to the
   bind-generated object.

.SH Contents

     • 1 Inherited from
       std::integral_constant

          • 1.1 Member constants
          • 1.2 Member functions
          • 1.3 Member types
          • 1.4 Example
          • 1.5 See also

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a function object generated by std::bind, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
 #include <functional>

 struct MyBind {
     typedef int result_type;
     int operator()(int a, int b) const { return a + b; }
 };

 namespace std {
     template<>
     struct is_bind_expression<MyBind> : public true_type {};
 }

 int f(int n1, int n2)
 {
     return n1+n2;
 }

 int main()
 {
     // as if bind(f, bind(MyBind::operator(), _1, _2), 2)
     auto b = std::bind(f, MyBind(), 2);

     std::cout << "Adding 2 to the sum of 10 and 11 gives " << b(10, 11) << '\\n';
 }

.SH Output:

 Adding 2 to the sum of 10 and 11 gives 23

.SH See also

   bind    binds one or more arguments to a function object
   \fI(C++11)\fP \fI(function template)\fP
