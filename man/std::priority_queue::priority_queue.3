.TH std::priority_queue::priority_queue 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   explicit priority_queue( const Compare& compare = Compare(),           \fI(until C++11)\fP
   const Container& cont = Container() );
   priority_queue( const Compare& compare, const Container& cont          \fI(since C++11)\fP
   );
   explicit priority_queue( const Compare& compare = Compare(),      \fB(2)\fP  \fI(since C++11)\fP
   Container&& cont = Container() );
   priority_queue( const priority_queue& other );                    \fB(3)\fP
   priority_queue( priority_queue&& other );                         \fB(4)\fP  \fI(since C++11)\fP
   template< class Alloc >                                           \fB(5)\fP  \fI(since C++11)\fP
   explicit priority_queue( const Alloc& alloc );
   template< class Alloc >                                           \fB(6)\fP  \fI(since C++11)\fP
   priority_queue( const Compare& compare, const Alloc& alloc );
   template< class Alloc >

   priority_queue( const Compare& compare, const Container&          \fB(7)\fP  \fI(since C++11)\fP
   cont,

   const Alloc& alloc );
   template< class Alloc >
                                                                 \fB(1)\fP
   priority_queue( const Compare& compare, Container&& cont,         \fB(8)\fP  \fI(since C++11)\fP

   const Alloc& alloc );
   template< class Alloc >
   priority_queue( const priority_queue& other, const Alloc&         \fB(9)\fP  \fI(since C++11)\fP
   alloc );
   template< class Alloc >                                           \fB(10)\fP \fI(since C++11)\fP
   priority_queue( priority_queue&& other, const Alloc& alloc );
   template< class InputIt >

   priority_queue( InputIt first, InputIt last,                      \fB(11)\fP \fI(since C++11)\fP

   const Compare& compare, const Container& cont );
   template< class InputIt >

   priority_queue( InputIt first, InputIt last,                      \fB(12)\fP \fI(since C++11)\fP
   const Compare& compare = Compare(),

   Container&& cont = Container() );

   Constructs new underlying container of the container adaptor from a variety of data
   sources.

   1) Copy-constructs the underlying container c with the contents of cont.
   Copy-constructs the comparison functor comp with the contents of compare. Calls
   std::make_heap(c.begin(), c.end(), comp).}}
   This is also the default constructor.
   \fI(until C++11)\fP
   2) Move-constructs the underlying container c with std::move(cont). Move-constructs
   the comparison functor comp with std::move(compare). Calls std::make_heap(c.begin(),
   c.end(), comp).
   This is also the default constructor.
   \fI(since C++11)\fP
   3) Copy constructor. The adaptor is copy-constructed with the contents of other.c.
   The comparison functor is constructed with std::move(other.comp). (implicitly
   declared)
   4) Move constructor. The adaptor is constructed with std::move(other.c).The
   comparison functor is constructed with std::move(other.comp). (implicitly declared)
   5-10) The following constructors are only defined if
   std::uses_allocator<container_type, Alloc>::value == true, that is, if the
   underlying container is an allocator-aware container (true for all standard library
   containers).
   5) Constructs the underlying container using alloc as allocator. Effectively calls
   c(alloc). comp is value-initialized.
   6) Constructs the underlying container using alloc as allocator. Effectively calls
   c(alloc). Copy-constructs comp from compare.
   7) Constructs the underlying container with the contents of cont and using alloc as
   allocator. Effectively calls c(cont, alloc). Copy-constructs comp from compare.
   8) Constructs the underlying container with the contents of cont using move
   semantics while utilising alloc as allocator. Effectively calls c(std::move(cont),
   alloc). Copy-constructs comp from compare.
   9) Constructs the adaptor with the contents of other.c and using alloc as allocator.
   Effectively calls c(athor.c, alloc). Copy-constructs comp from other.comp.
   10) Constructs the adaptor with the contents of other using move semantics while
   utilising alloc as allocator. Effectively calls c(std::move(other.c), alloc).
   Move-constructs comp from other.comp.
   11) Copy-constructs c from cont and comp from compare. Then calls c.insert(c.end(),
   first, last);, and then calls std::make_heap(c.begin(), c.end(), comp);.
   12) Move-constructs c from std::move(cont) and comp from std::move(compare). Then
   calls c.insert(c.end(), first, last);, and then calls std::make_heap(c.begin(),
   c.end(), comp);.

.SH Contents

     * 1 Parameters
     * 2 Complexity
     * 3 Example
     * 4 See also

.SH Parameters

   alloc                -          allocator to use for all memory allocations of the
                                   underlying container
   other                -          another container adaptor to be used as source to
                                   initialize the underlying container
   cont                 -          container to be used as source to initialize the
                                   underlying container
   compare              -          the comparison function object to initialize the
                                   underlying comparison functor
   first, last          -          range of elements to initialize with
.SH Type requirements
   -
   Alloc must meet the requirements of Allocator.
   -
   Container must meet the requirements of Container. The constructors (5-10) are only
   defined if Container meets the requirements of AllocatorAwareContainer
   -
   InputIt must meet the requirements of InputIterator.

.SH Complexity

   1,3) O(N log(N)) comparisons, where N is cont.size().
   Additionally, O(N) calls to the constructor of value_type, where N is cont.size().
   2) O(N log(N)) comparisons, where N is cont.size().
   4-6) Constant.
   7) O(N log(N)) comparisons, where N is cont.size().
   Additionally, O(N) calls to the constructor of value_type, where N is cont.size().
   8) O(N log(N)) comparisons, where N is cont.size().
   9) Linear in size of other.
   10) Constant.
   11) O(N log(N)) comparisons, where N is cont.size() + std::distance(first, last).
   Additionally, O(N) calls to the constructor of value_type, where N is cont.size().
   12) O(N log(N)) comparisons, where N is cont.size() + std::distance(first, last).

.SH Example

   
// Run this code

 #include <queue>
 #include <vector>
 #include <iostream>
 #include <functional>

 int main()
 {
     std::priority_queue<int> c1;
     c1.push(5);
     std::cout << c1.size() << '\\n';

     std::priority_queue<int> c2(c1);
     std::cout << c2.size() << '\\n';

     std::vector<int> vec={3, 1, 4, 1, 5};
     std::priority_queue<int> c3(std::less<int>(), vec);
     std::cout << c3.size() << '\\n';
 }

.SH Output:

 1
 1
 5

.SH See also

   operator= assigns values to the container adaptor
             \fI(public member function)\fP
