.TH std::is_const 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_const \- std::is_const

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_const;

   If T is a const-qualified type (that is, const, or const volatile), provides the
   member constant value equal true. For any other type, value is false.

.SH Member constants

   value    true if T is a const-qualified type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T> struct is_const          : std::false_type {};
   template<class T> struct is_const<const T> : std::true_type {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_const<int>::value << '\\n';
     std::cout << std::is_const<const int>::value  << '\\n';
 }

.SH Output:

 false
 true

.SH See also

   is_volatile checks if a type is volatile-qualified
   \fI(C++11)\fP     \fI(class template)\fP 
