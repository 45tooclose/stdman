.TH std::is_move_assignable,std::is_trivially_move_assignable, 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_move_assignable,std::is_trivially_move_assignable, \- std::is_move_assignable,std::is_trivially_move_assignable,

.SH Synopsis

   Defined in header <type_traits>
   template< class T >                  \fB(1)\fP \fI(since C++11)\fP
   struct is_move_assignable;
   template< class T >                  \fB(2)\fP \fI(since C++11)\fP
   struct is_trivially_move_assignable;
   template< class T >                  \fB(3)\fP \fI(since C++11)\fP
   struct is_nothrow_move_assignable;

   1) Checks whether a type is MoveAssignable, i.e. has an accessible explicit or
   implicit move assignment operator. If the requirement is met, a member constant
   value equal true is provided, otherwise value is false.

   2) same as 1), but evaluation of the move-assignment expression will not call any
   operation that is not trivial.

   3) same as 1), but the evaluation of the move-assignment expression will not call
   any operation that is not noexcept.

.SH Member constants

   value    true if T is move-assignable, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template< class T>
   struct is_move_assignable
       : std::is_assignable< typename std::add_lvalue_reference<T>::type,
                             typename std::add_rvalue_reference<T>::type> {};
    
   template< class T>
   struct is_trivially_move_assignable
       : std::is_trivially_assignable< typename std::add_lvalue_reference<T>::type,
                                       typename std::add_rvalue_reference<T>::type> {};
    
   template< class T>
   struct is_nothrow_move_assignable
       : std::is_nothrow_assignable< typename std::add_lvalue_reference<T>::type,
                                     typename std::add_rvalue_reference<T>::type> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <type_traits>
 struct Foo { int n; };
 int main() {
     std::cout << std::boolalpha
               << "std::string is nothrow move-assignable? "
               << std::is_nothrow_move_assignable<std::string>::value << '\\n'
               << "int[2] is move-assignable? "
               << std::is_move_assignable<int[2]>::value << '\\n'
               << "Foo is trivally move-assignable? "
               << std::is_trivially_move_assignable<Foo>::value << '\\n';
 }

.SH Output:

 std::string is nothrow move-assignable? true
 int[2] is move-assignable? false
 Foo is trivially move-assignable? true

.SH See also

   is_assignable
   is_trivially_assignable      checks if a type has a assignment operator for a
   is_nothrow_assignable        specific argument
   \fI(C++11)\fP                      \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_copy_assignable
   is_trivially_copy_assignable
   is_nothrow_copy_assignable   checks if a type has a copy assignment operator
   \fI(C++11)\fP                      \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
