.TH std::is_move_assignable,std::is_trivially_move_assignable, 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis

   Defined in header <type_traits>
   template< class T >                  \fB(1)\fP \fI(since C++11)\fP
   struct is_move_assignable;
   template< class T >                  \fB(2)\fP \fI(since C++11)\fP
   struct is_trivially_move_assignable;
   template< class T >                  \fB(3)\fP \fI(since C++11)\fP
   struct is_nothrow_move_assignable;

   1) Checks whether a type is MoveAssignable.
   Formally, provides the member constant value equal to true if the expression
   std::declval<T&>() = std::declval<T&&>() is well-formed in unevaluated context, and
   value equal to false otherwise. T must be a complete type, possibly cv-qualified
   void or array of unknown bound.
   2) same as \fB(1)\fP, but evaluation of the move-assignment expression will not call any
   operation that is not trivial.
   3) same as \fB(1)\fP, but the evaluation of the move-assignment expression will not call
   any operation that is not noexcept.

.SH Member constants

   value    true if T is move-assignable, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template< class T>
   struct is_move_assignable
       : std::is_assignable< typename std::add_lvalue_reference<T>::type,
                             typename std::add_rvalue_reference<T>::type> {};

   template< class T>
   struct is_trivially_move_assignable
       : std::is_trivially_assignable< typename std::add_lvalue_reference<T>::type,
                                       typename std::add_rvalue_reference<T>::type> {};

   template< class T>
   struct is_nothrow_move_assignable
       : std::is_nothrow_assignable< typename std::add_lvalue_reference<T>::type,
                                     typename std::add_rvalue_reference<T>::type> {};

.SH Notes

   The trait std::is_move_assignable is less strict than MoveAssignable because it does
   not check the type of the result of the assignment (which, in for a MoveAssignable
   type, must be T&).

   The type does not have to implement a move assignment operator in order to satisfy
   this trait; see MoveAssignable for details.

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <type_traits>
 struct Foo { int n; };
 struct NoMove {
     // prevents implicit declaration of default move assignment operator
     // however, the class is still move-assignable because its
     // copy assignment operator can bind to an rvalue argument
     NoMove& operator=(const NoMove&) { return *this; }
 };
 int main() {
     std::cout << std::boolalpha
               << "std::string is nothrow move-assignable? "
               << std::is_nothrow_move_assignable<std::string>::value << '\\n'
               << "int[2] is move-assignable? "
               << std::is_move_assignable<int[2]>::value << '\\n'
               << "Foo is trivally move-assignable? "
               << std::is_trivially_move_assignable<Foo>::value << '\\n';

     std::cout << std::boolalpha
               << "NoMove is move-assignable? "
               << std::is_move_assignable<NoMove>::value << '\\n'
               << "NoMove is nothrow move-assignable? "
               << std::is_nothrow_move_assignable<NoMove>::value << '\\n';
 }

.SH Output:

 std::string is nothrow move-assignable? true
 int[2] is move-assignable? false
 Foo is trivially move-assignable? true
 NoMove is move-assignable? true
 NoMove is nothrow move-assignable? false

.SH See also

is_assignable
is_trivially_assignable                           checks if a type has a assignment
is_nothrow_assignable                             operator for a specific argument
\fI(C++11)\fP                                           \fI(class template)\fP
\fI(C++11)\fP
\fI(C++11)\fP
is_copy_assignable
is_trivially_copy_assignable                      checks if a type has a copy assignment
is_nothrow_copy_assignable                        operator
\fI(C++11)\fP                                           \fI(class template)\fP
\fI(C++11)\fP
\fI(C++11)\fP
std::experimental::is_move_assignable_v           variable template alias of
(library fundamentals TS)                         std::is_move_assignable::value
                                                  (variable template)
std::experimental::is_trivially_move_assignable_v variable template alias of
(library fundamentals TS)                         std::is_trivially_move_assignable::value
                                                  (variable template)
std::experimental::is_nothrow_move_assignable_v   variable template alias of
(library fundamentals TS)                         std::is_nothrow_move_assignable::value
                                                  (variable template)
