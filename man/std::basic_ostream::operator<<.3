.TH std::basic_ostream::operator<< 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   basic_ostream& operator<<( short value );                         \fB(1)\fP
   basic_ostream& operator<<( unsigned short value );
   basic_ostream& operator<<( int value );                           \fB(2)\fP
   basic_ostream& operator<<( unsigned int value );
   basic_ostream& operator<<( long value );                          \fB(3)\fP
   basic_ostream& operator<<( unsigned long value );
   basic_ostream& operator<<( long long value );                     \fB(4)\fP \fI(since C++11)\fP
   basic_ostream& operator<<( unsigned long long value );
   basic_ostream& operator<<( float value );

   basic_ostream& operator<<( double value );                        \fB(5)\fP

   basic_ostream& operator<<( long double value );
   basic_ostream& operator<<( bool value );                          \fB(6)\fP
   basic_ostream& operator<<( const void* value );                   \fB(7)\fP
   basic_ostream& operator<<( std::basic_streambuf<CharT, Traits>*   \fB(8)\fP
   sb);
   basic_ostream& operator<<( std::ios_base& (*func)(std::ios_base&)
   );
   basic_ostream& operator<<( std::basic_ios<CharT,Traits>&          \fB(9)\fP
   (*func)(std::basic_ios<CharT,Traits>&) );
   basic_ostream& operator<<( std::basic_ostream&
   (*func)(std::basic_ostream&) );

   Inserts data into the stream.

   1-2) Behaves as an FormattedOutputFunction. After constructing and checking the
   sentry object, if value is short or int, then casts it to unsigned short or unsigned
   int if ios_base::flags() & ios_base::basefield is ios_base::oct or ios_base::hex.
   After that, casts to long in any case and outputs as in \fB(3)\fP. If value is unsigned
   short or unsigned int, casts to unsigned long and outputs as in \fB(3)\fP.
   3-7) Behaves as an FormattedOutputFunction. After constructing and checking the
   sentry object, inserts an integer, floating point, boolean or generic pointer value
   by calling num_put::put(). If the end of file condition was encountered during
   output (put().failed() == true), sets ios::badbit.
   8) Behaves as an UnformattedOutputFunction. After constructing and checking the
   sentry object, checks if sb is a null pointer. If it is, executes setstate(badbit)
   and exits. Otherwise, extracts characters from the input sequence controlled by sb
   and inserts them into *this until one of the following conditions are met:

     * end-of-file occurs on the input sequence;
     * inserting in the output sequence fails (in which case the character to be
       inserted is not extracted);
     * an exception occurs (in which case the exception is caught).

   If no characters were inserted, executes setstate(badbit). If an exception was
   thrown while extracting, sets failbit
   9) Calls func(*this);. This overload is used to implement output I/O manipulators
   such as std::endl.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Notes
     * 4 Example
     * 5 See also

.SH Parameters

   value - integer, floating-point, boolean, or pointer value to insert
   func  - function to call
   sb    - pointer to the streambuffer to read the data from

.SH Return value

   *this

.SH Notes

   There are no overload for pointers to volatile or function pointers (other than the
   ones with signatures accepted by the \fB(9)\fP overload). Attempting to output such
   objects invokes implicit conversion to bool, and, for any non-null pointer value,
   the value 1 is printed (unless boolalpha was set).

.SH Example

   
// Run this code

 #include <iostream>
 #include <iomanip>
 #include <sstream>
 int main()
 {
     std::istringstream input(" \\"Some text.\\" ");
     volatile int n = 42;
     double f = 3.14;
     bool b = true;;
     std::cout << n   // int overload
               << ' ' // non-member overload
               << std::boolalpha << b // bool overload
               << " " // non-member overload
               << std::fixed << f // double overload
               << input.rdbuf() // streambuf overload
               << &n // bool overload
               << std::endl; // function overload
 }

.SH Output:

 42 true 3.140000 "Some text." true

.SH See also

   operator<<(std::basic_ostream) inserts character data
                                  \fI(function)\fP
   operator<<                     performs stream I/O of strings
   operator>>                     \fI(function template)\fP
   operator<<                     performs stream input and output of bitsets
   operator>>                     \fI(function)\fP
   operator<<                     serializes and deserializes a complex number
   operator>>                     \fI(function template)\fP
   operator<<                     performs stream input and output on pseudo-random
   operator>>                     number engine
                                  \fI(function)\fP
   operator<<                     performs stream input and output on pseudo-random
   operator>>                     number distribution
                                  \fI(function)\fP
   put                            inserts a character
                                  \fI(public member function)\fP
   write                          inserts blocks of characters
                                  \fI(public member function)\fP
