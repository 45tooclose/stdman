.TH std::atomic 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <atomic>
   template< class T >        \fB(1)\fP \fI(since C++11)\fP
   struct atomic;
   template<>                 \fB(2)\fP \fI(since C++11)\fP
   struct atomic<Integral>;
   template< class T >        \fB(3)\fP \fI(since C++11)\fP
   struct atomic<T*>;

   Each instantiation and full specialization of the std::atomic template defines an
   atomic type. Objects of atomic types are the only C++ objects that are free from
   data races; that is, if one thread writes to an atomic object while another thread
   reads from it, the behavior is well-defined.

   In addition, accesses to atomic objects may establish inter-thread synchronization
   and order non-atomic memory accesses as specified by std::memory_order.

   The standard library provides specializations of the std::atomic template for the
   following types:

   1) One full specialization for the type bool and its typedef name is defined that is
   treated as a non-specialized std::atomic<T> except that it has standard layout,
   trivial default constructor, trivial destructors, and supports aggregate
   initialization syntax:

   Typedef name     Full specialization
   std::atomic_bool std::atomic<bool>

   2) Full specializations and typedefs for integral types, as follows:

   Typedef name               Full specialization
   std::atomic_char           std::atomic<char>
   std::atomic_schar          std::atomic<signed char>
   std::atomic_uchar          std::atomic<unsigned char>
   std::atomic_short          std::atomic<short>
   std::atomic_ushort         std::atomic<unsigned short>
   std::atomic_int            std::atomic<int>
   std::atomic_uint           std::atomic<unsigned int>
   std::atomic_long           std::atomic<long>
   std::atomic_ulong          std::atomic<unsigned long>
   std::atomic_llong          std::atomic<long long>
   std::atomic_ullong         std::atomic<unsigned long long>
   std::atomic_char16_t       std::atomic<char16_t>
   std::atomic_char32_t       std::atomic<char32_t>
   std::atomic_wchar_t        std::atomic<wchar_t>
   std::atomic_int_least8_t   std::atomic<std::int_least8_t>
   std::atomic_uint_least8_t  std::atomic<std::uint_least8_t>
   std::atomic_int_least16_t  std::atomic<std::int_least16_t>
   std::atomic_uint_least16_t std::atomic<std::uint_least16_t>
   std::atomic_int_least32_t  std::atomic<std::int_least32_t>
   std::atomic_uint_least32_t std::atomic<std::uint_least32_t>
   std::atomic_int_least64_t  std::atomic<std::int_least64_t>
   std::atomic_uint_least64_t std::atomic<std::uint_least64_t>
   std::atomic_int_fast8_t    std::atomic<std::int_fast8_t>
   std::atomic_uint_fast8_t   std::atomic<std::uint_fast8_t>
   std::atomic_int_fast16_t   std::atomic<std::int_fast16_t>
   std::atomic_uint_fast16_t  std::atomic<std::uint_fast16_t>
   std::atomic_int_fast32_t   std::atomic<std::int_fast32_t>
   std::atomic_uint_fast32_t  std::atomic<std::uint_fast32_t>
   std::atomic_int_fast64_t   std::atomic<std::int_fast64_t>
   std::atomic_uint_fast64_t  std::atomic<std::uint_fast64_t>
   std::atomic_intptr_t       std::atomic<std::intptr_t>
   std::atomic_uintptr_t      std::atomic<std::uintptr_t>
   std::atomic_size_t         std::atomic<std::size_t>
   std::atomic_ptrdiff_t      std::atomic<std::ptrdiff_t>
   std::atomic_intmax_t       std::atomic<std::intmax_t>
   std::atomic_uintmax_t      std::atomic<std::uintmax_t>

   These specializations have standard layout, trivial default constructors, and
   trivial destructors. They support aggregate initialization syntax.

   3) Partial specializations std::atomic<T*> for all pointer types. These
   specializations have standard layout, trivial default constructors, and trivial
   destructors. They support aggregate initialization syntax.

   In addition, std::atomic may be instantiated with any TriviallyCopyable type T.

.SH Contents

     * 1 Member functions
     * 2 Specialized member functions
     * 3 Notes
     * 4 See also

.SH Member functions

   constructor             constructs an atomic object
                           \fI(public member function)\fP
   operator=               stores a value into an atomic object
                           \fI(public member function)\fP
   is_lock_free            checks if the atomic object is lock-free
                           \fI(public member function)\fP
   store                   atomically replaces the value of the atomic object with a
   \fI(C++11)\fP                 non-atomic argument
                           \fI(public member function)\fP
   load                    atomically obtains the value of the atomic object
   \fI(C++11)\fP                 \fI(public member function)\fP
   operator T              loads a value from an atomic object
                           \fI(public member function)\fP
   exchange                atomically replaces the value of the atomic object and
   \fI(C++11)\fP                 obtains the value held previously
                           \fI(public member function)\fP
                           atomically compares the value of the atomic object with
   compare_exchange_weak   non-atomic argument and performs atomic exchange if equal or
   compare_exchange_strong atomic load if not
                           \fI(public member function)\fP

.SH Specialized member functions

   fetch_add       atomically adds the argument to the value stored in the atomic
   \fI(C++11)\fP         object and obtains the value held previously
                   \fI(public member function)\fP
   fetch_sub       atomically subtracts the argument from the value stored in the
   \fI(C++11)\fP         atomic object and obtains the value held previously
                   \fI(public member function)\fP
   fetch_and       atomically performs bitwise AND between the argument and the value
   \fI(C++11)\fP         of the atomic object and obtains the value held previously
                   \fI(public member function)\fP
   fetch_or        atomically performs bitwise OR between the argument and the value of
   \fI(C++11)\fP         the atomic object and obtains the value held previously
                   \fI(public member function)\fP
   fetch_xor       atomically performs bitwise XOR between the argument and the value
   \fI(C++11)\fP         of the atomic object and obtains the value held previously
                   \fI(public member function)\fP
   operator++
   operator++(int) increments or decrements the atomic value by one
   operator--      \fI(public member function)\fP
   operator--(int)
   operator+=
   operator-=      adds, subtracts, or performs bitwise AND, OR, XOR with the atomic
   operator&=      value
   operator|=      \fI(public member function)\fP
   operator^=

.SH Notes

   There are non-member function template equivalents for all member functions of
   std::atomic. Those non-member functions may be additionally overloaded for types
   that are not specializations of std::atomic, but are able to guarantee atomicity.
   The only such type in the standard library is std::shared_ptr<T>.

.SH See also

   atomic_flag the lock-free boolean atomic type
   \fI(C++11)\fP     \fI(class)\fP
