.TH std::partition_copy 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class OutputIt1,

             class OutputIt2, class UnaryPredicate >
   std::pair<OutputIt1, OutputIt2>                                        \fI(since C++11)\fP
        partition_copy( InputIt first, InputIt last,
                        OutputIt1 d_first_true, OutputIt2 d_first_false,

                        UnaryPredicate p );

   Copies the elements from the range [first, last) to two different ranges depending
   on the value returned by the predicate p. The elements, that satisfy the predicate
   p, are copied to the range beginning at d_first_true. The rest of the elements are
   copied to the range beginning at d_first_false.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Complexity
     • 4 Possible implementation
     • 5 Example
     • 6 See also

.SH Parameters

   first, last   - the range of elements to sort
   d_first_true  - the beginning of the output range for the elements that satisfy p
   d_first_false - the beginning of the output range for the elements that do not
                   satisfy p
                   unary predicate which returns true if the element should be placed
                   in d_first_true.

                   The signature of the predicate function should be equivalent to the
                   following:
   p             -
                    bool pred(const Type &a);

                   The signature does not need to have const &, but the function must
                   not modify the objects passed to it.
                   The type Type must be such that an object of type InputIt can be
                   dereferenced and then implicitly converted to Type. 
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   OutputIt1 must meet the requirements of OutputIterator.
   -
   OutputIt2 must meet the requirements of OutputIterator.
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   A pair constructed from the iterator to the end of the d_first_true range and the
   iterator to the end of the d_first_false range.

.SH Complexity

   Exactly distance(first, last) applications of p.

.SH Possible implementation

   template<class InputIt, class OutputIt1,
            class OutputIt2, class UnaryPredicate>
   std::pair<OutputIt1, OutputIt2>
       partition_copy(InputIt first, InputIt last,
                      OutputIt1 d_first_true, OutputIt2 d_first_false,
                      UnaryPredicate p)
   {
       while (first != last) {
           if (p(*first)) {
               *d_first_true = *first;
               ++d_first_true;
           } else {
               *d_first_false = *first;
               ++d_first_false;
           }
           ++first;
       }
       return std::pair<OutputIt1, OutputIt2>(d_first_true, d_first_false);
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <utility>
  
 int main()
 {
     int arr [10] = {1,2,3,4,5,6,7,8,9,10};
     int true_arr [5] = {0};
     int false_arr [5] = {0};
  
     std::partition_copy(std::begin(arr), std::end(arr), std::begin(true_arr),std::begin(false_arr),
                         [] (int i) {return i > 5;});
  
     std::cout << "true_arr: ";
     for (auto it = std::begin(true_arr); it != std::end(true_arr); ++it) {
         std::cout << *it << ' ';
     }
     std::cout << '\\n';
  
     std::cout << "false_arr: ";
     for (auto it = std::begin(false_arr); it != std::end(false_arr); ++it) {
         std::cout << *it << ' ';
     }
     std::cout << '\\n';
  
     return 0;
  
 }

.SH Output:

 true_arr: 6 7 8 9 10
 false_arr: 1 2 3 4 5

.SH See also

   partition        divides a range of elements into two groups
                    \fI(function template)\fP
                    divides elements into two groups while preserving their relative
   stable_partition order
                    \fI(function template)\fP
