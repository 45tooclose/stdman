.TH std::owner_less 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <memory>
   template< class T >                    \fB(1)\fP \fI(since C++11)\fP
   struct owner_less; /* undefined */
   template< class T >                    \fB(2)\fP \fI(since C++11)\fP
   struct owner_less<std::shared_ptr<T>>;
   template< class T >                    \fB(3)\fP \fI(since C++11)\fP
   struct owner_less<std::weak_ptr<T>>;

   This function object provides owner-based (as opposed to value-based) mixed-type
   ordering of both std::weak_ptr and std::shared_ptr. The order is such that two smart
   pointers compare equivalent only if they are both empty or if they both manage the
   same object, even if the values of the raw pointers obtained by get() are different
   (e.g. because they point at different subobjects within the same object)

   This class template is the preferred comparison predicate when building associative
   containers with std::shared_ptr or std::weak_ptr as keys, that is,

   std::map<std::shared_ptr<T>, U, std::owner_less<std::shared_ptr<T>>>

   or

   std::map<std::weak_ptr<T>, U, std::owner_less<std::weak_ptr<T>>>.

   The default operator< is not defined for weak pointers, and may wrongly consider two
   shared pointers for the same object non-equivalent (see shared_ptr::owner_before)

.SH Member types

   Member type          Definition
   result_type          bool
                        1) T
   first_argument_type  2) std::shared_ptr<T>
                        3) std::weak_ptr<T>
                        1) T
   second_argument_type 2) std::shared_ptr<T>
                        3) std::weak_ptr<T>

.SH Member functions

   operator() compares its arguments using owner-based semantics
              \fI(function)\fP

std::owner_less::operator()

   bool operator()( const std::shared_ptr<T>&  \fI(since C++11)\fP
   lhs,                                        (member only of shared_ptr<T> template
   const std::shared_ptr<T>& rhs ) const;      specialization)
   bool operator()( const std::shared_ptr<T>&
   lhs,                                        \fI(since C++11)\fP
   const std::weak_ptr<T>& rhs ) const;
   bool operator()( const std::weak_ptr<T>&
   lhs,                                        \fI(since C++11)\fP
   const std::shared_ptr<T>& rhs ) const;
   bool operator()( const std::weak_ptr<T>&    \fI(since C++11)\fP
   lhs,                                        (member only of weak_ptr<T> template
   const std::weak_ptr<T>& rhs ) const;        specialization)

   Compares lhs and rhs using owner-based semantics. Effectively calls
   lhs.owner_before(rhs).

   The ordering is strict weak ordering relation.

   lhs and rhs are equivalent only if they are both empty or share ownership.

.SH Parameters

   lhs, rhs - shared-ownership pointers to compare

.SH Return value

   true if lhs is less than rhs as determined by the owner-based ordering.

.SH Exceptions

   \fI(none)\fP

.SH See also

   owner_before provides owner-based ordering of shared pointers
                \fI(public member function of std::shared_ptr)\fP
