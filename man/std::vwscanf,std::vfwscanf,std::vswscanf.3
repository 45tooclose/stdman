.TH std::vwscanf,std::vfwscanf,std::vswscanf 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cwchar>
   int vwscanf( const wchar_t* format, va_list vlist );               \fB(1)\fP \fI(since C++11)\fP
   int vfwscanf( std::FILE* stream, const wchar_t* format, va_list    \fB(2)\fP \fI(since C++11)\fP
   vlist );
   int vswscanf( const wchar_t* buffer, const wchar_t* format,        \fB(3)\fP \fI(since C++11)\fP
   va_list vlist );

   Reads data from the a variety of sources, interprets it according to format and
   stores the results into locations defined by vlist.

   1) Reads the data from stdin
   2) Reads the data from file stream stream
   3) Reads the data from null-terminated wide string buffer

.SH Parameters

stream - input file stream to read from
buffer - pointer to a null-terminated wide string to read from
         pointer to a null-terminated wide string specifying how to read the input.

         The format string consists of whitespace characters (any single whitespace character in the format string consumes
         all available consecutive whitespace characters from the input), non-whitespace wide characters except % (each such
         character in the format string consumes exactly one identical character from the input) and conversion
         specifications. Each conversion specification has the following format:

               * introductory % character

               * (optional) assignment-suppressing character *. If this option is present, the function does not assign the
                 result of the conversion to any receiving argument.

               * (optional) integer number (greater than zero) that specifies maximum field width, that is, the maximum
                 number of characters that the function is allowed to consume when doing the conversion specified by the
                 current conversion specification. Note that %s and %[ may lead to buffer overflow if the width is not
                 provided.

               * (optional) length modifier that specifies the size of the receiving argument, that is, the actual
                 destination type. This affects the conversion accuracy and overflow rules. The default destination type is
                 different for each conversion type (see table below).

               * conversion format specifier

         The following format specifiers are available:

         Conversion      Explanation                                         Argument type
         specifier
                  length modifier             hh       h      \fI(none)\fP     l        ll        j         z        t         L
             %      matches literal %      N/A      N/A      N/A      N/A      N/A      N/A        N/A     N/A        N/A
                       matches a character
                       or a sequence of
                       characters

                    If a width specifier
                    is used, matches
                    exactly width wide
             c      characters (the
                    argument must be a
                    pointer to an array
                    with sufficient room).
                    Unlike %s and %[, does
                    not append the null
                    character to the
                    array.
                       matches a sequence
                       of non-whitespace
                       characters (a
                       string)

                    If width specifier is
                    used, matches up to
                    width or until the
             s      first whitespace
                    character, whichever
                    appears first. Always
                    stores a null
                    character in addition
                    to the characters
                    matched (so the
                    argument array must
                    have room for at least N/A      N/A      char*    wchar_t* N/A      N/A        N/A     N/A        N/A
                    width+1 characters)
                       matches a non-empty
                       sequence of
                       character from set
                       of characters.

                    If the first character
                    of the set is ^, then
                    all characters not in
                    the set are matched.
                    If the set begins with
                    ] or ^] then the ]
                    character is also
                    included into the set.
                    It is
                    implementation-defined
           [set]    whether the character
                    - in the non-initial
                    position in the
                    scanset may be
                    indicating a range, as
                    in [0-9]. If width
                    specifier is used,
                    matches only up to
                    width. Always stores a
                    null character in
                    addition to the
                    characters matched (so
                    the argument array
format -            must have room for at
                    least width+1
                    characters)
                       matches a decimal
                       integer.

             d      The format of the
                    number is the same as
                    expected by wcstol()
                    with the value 10 for
                    the base argument
                       matches an integer.

                    The format of the
                    number is the same as
             i      expected by wcstol()
                    with the value 0 for
                    the base argument
                    (base is determined by
                    the first characters
                    parsed)
                       matches a unsigned
                       integer.

                    The format of the
                    number is the same as
             u      expected by wcstoul()
                    with the value 0 for
                    the base argument                                          signed
                    (base is determined by signed   signed   signed   signed   long
                    the first characters   char* or short*   int* or  long* or long* or intmax_t*
                    parsed)                unsigned or       unsigned unsigned unsigned or         size_t* ptrdiff_t* N/A
                       matches an octal    char*    unsigned int*     long*    long     uintmax_t*
                       integer.                     short*                     long*

             o      The format of the
                    number is the same as
                    expected by wcstoul()
                    with the value 8 for
                    the base argument
                       matches an
                       hexadecimal
                       integer.

             x      The format of the
                    number is the same as
                    expected by wcstoul()
                    with the value 16 for
                    the base argument
                       returns the number
                       of characters read
                       so far.

                    No input is consumed.
             n      Does not increment the
                    assignment count. If
                    the specifier has
                    assignment-suppressing
                    operator defined, the
                    behavior is undefined
                       matches a
            a, A       floating-point
            e, E       number.                                                                                        long
            f, F                           N/A      N/A      float*   double*  N/A      N/A        N/A     N/A        double*
            g, G    The format of the
                    number is the same as
                    expected by wcstof()
                       matches
                       implementation
                       defined character
                       sequence defining a
                       pointer.
             p                             N/A      N/A      void**   N/A      N/A      N/A        N/A     N/A        N/A
                    printf family of
                    functions should
                    produce the same
                    sequence using %p
                    format specifier

         All conversion specifiers other than [, c, and n consume and discard all leading whitespace characters (determined
         as if by calling iswspace) before attempting to parse the input. These consumed characters do not count towards the
         specified maximum field width.

         If the length specifier l is not used, the conversion specifiers c, s, and [ perform wide-to-multibyte character
         conversion as if by calling wcrtomb() with an mbstate_t object initialized to zero before the first character is
         converted.

         The conversion specifiers s and [ always store the null terminator in addition to the matched characters. The size
         of the destination array must be at least one greater than the specified field width.

         The correct conversion specifications for the fixed-width integer types (int8_t, etc) are defined in the header
         <cinttypes>(C++) or <inttypes.h> (C) (although SCNdMAX, SCNuMAX, etc is synonymous with %jd, %ju, etc).
vlist  - variable argument list containing the receiving arguments

.SH Return value

   Number of arguments successfully read, or EOF if failure occurs.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   wscanf  reads formatted wide character input from stdin, a file stream or a buffer
   fwscanf \fI(function)\fP
   swscanf
   C documentation for
   vwscanf,
   vfwscanf,
   vswscanf

.SH Category:

     * Todo no example
