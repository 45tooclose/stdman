.TH std::thread::joinable 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   bool joinable() const;  \fI(since C++11)\fP

   Checks if the thread object identifies an active thread of execution. Specifically,
   returns true if get_id() != std::thread::id(). So a default constructed thread is
   not joinable.

   A thread that has finished executing code, but has not yet been joined is still
   considered an active thread of execution and is therefore joinable.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 Example
     * 5 See also
     * 6 References

.SH Parameters

   \fI(none)\fP

.SH Return value

   true if the thread object identifies an active thread of execution, false otherwise

.SH Exceptions

   noexcept specification:
   noexcept

.SH Example

   
// Run this code

 #include <iostream>
 #include <thread>
 #include <chrono>

 void foo()
 {
     std::this_thread::sleep_for(std::chrono::seconds(1));
 }

 int main()
 {
     std::thread t;
     std::cout << "before starting, joinable: " << t.joinable() << '\\n';

     t = std::thread(foo);
     std::cout << "after starting, joinable: " << t.joinable() << '\\n';

     t.join();
 }

.SH Output:

 before starting, joinable: 0
 after starting, joinable: 1

.SH See also

   get_id returns the id of the thread
          \fI(public member function)\fP
   join   waits for a thread to finish its execution
          \fI(public member function)\fP
   detach permits the thread to execute independently from the thread handle
          \fI(public member function)\fP

.SH References

     * C++11 standard (ISO/IEC 14882:2011):

     * 30.3.1.5 thread members [thread.thread.member]
