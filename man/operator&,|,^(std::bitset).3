.TH operator&,|,^(std::bitset) 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   bitset<N> operator&( const bitset<N>& lhs, const bitset<N>& rhs ); \fB(1)\fP
   bitset<N> operator|( const bitset<N>& lhs, const bitset<N>& rhs ); \fB(2)\fP
   bitset<N> operator^( const bitset<N>& lhs, const bitset<N>& rhs ); \fB(3)\fP

   Performs binary AND, OR, and XOR between two bitsets, lhs and rhs.

   1) Returns a bitset<N> containing the result of binary AND on corresponding pairs of
   bits of lhs and rhs.
   2) Returns a bitset<N> containing the result of binary OR on corresponding pairs of
   bits of lhs and rhs.
   3) Returns a bitset<N> containing the result of binary XOR on corresponding pairs of
   bits of lhs and rhs.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 Example
     * 5 See also

.SH Parameters

   lhs - the bitset on the left-hand side of the operator
   rhs - the bitset on the right-hand side of the operator

.SH Return value

   1) {{{1}}}
   2) {{{1}}}
   3) {{{1}}}

.SH Exceptions

   \fI(none)\fP                  \fI(until C++11)\fP
   noexcept specification: \fI(since C++11)\fP
   noexcept

.SH Example

   
// Run this code

 #include <bitset>
 #include <iostream>

 int main()
 {
     std::bitset<4> b1("0110");
     std::bitset<4> b2("0011");
     std::cout << "b1 & b2: " << (b1 & b2) << '\\n';
     std::cout << "b1 | b2: " << (b1 | b2) << '\\n';
     std::cout << "b1 ^ b2: " << (b1 ^ b2) << '\\n';
 }

.SH Output:

 b1 & b2: 0010
 b1 | b2: 0111
 b1 ^ b2: 0101

.SH See also

   operator&=
   operator|= performs binary AND, OR, XOR and NOT
   operator^= \fI(public member function)\fP
   operator~
