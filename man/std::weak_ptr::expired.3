.TH std::weak_ptr::expired 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   bool expired() const;  \fI(since C++11)\fP

   Checks whether the managed object has already been deleted. Equivalent to
   use_count() == 0.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 Notes
     • 5 Example
     • 6 See also

.SH Parameters

   \fI(none)\fP

.SH Return value

   true if the managed object has already been deleted, false otherwise.

.SH Exceptions

   noexcept specification:  
   noexcept
     

.SH Notes

   expired() may be faster than use_count().

.SH Example

   Demonstrates how expired is used to check validity of the pointer.

   
// Run this code

 #include <iostream>
 #include <memory>
  
 std::weak_ptr<int> gw;
  
 void f()
 {
     if (!gw.expired()) {
         std::cout << "gw is valid\\n";
     }
     else {
         std::cout << "gw is expired\\n";
     }
 }
  
 int main()
 {
     {
         auto sp = std::make_shared<int>(42);
         gw = sp;
  
         f();
     }
  
     f();
 }

.SH Output:

 gw is valid
 gw is expired

.SH See also

   lock      creates a shared_ptr that manages the referenced object
             \fI(public member function)\fP
   use_count returns the number of shared_ptr objects that manage the object
             \fI(public member function)\fP
