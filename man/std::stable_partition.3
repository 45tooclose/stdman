.TH std::stable_partition 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class BidirIt, class UnaryPredicate >
   BidirIt stable_partition( BidirIt first, BidirIt last, UnaryPredicate p );

   Reorders the elements in the range [first, last) in such a way that all elements for
   which the predicate p returns true precede the elements for which predicate p
   returns false. Relative order of the elements is preserved.

.SH Parameters

   first, last - the range of elements to reorder
                 unary predicate which returns true if the element should be ordered
                 before other elements.

                 The signature of the predicate function should be equivalent to the
                 following:
   p           -
                  bool pred(const Type &a);

                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The type Type must be such that an object of type BidirIt can be
                 dereferenced and then implicitly converted to Type. 
.SH Type requirements
   -
   BidirIt must meet the requirements of ValueSwappable and BidirectionalIterator.
   -
   The type of dereferenced BidirIt must meet the requirements of MoveAssignable and
   MoveConstructible.
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   Iterator to the first element of the second group

.SH Complexity

   Exactly last-first applications of the predicate and at most
   (last-first)*log(last-first) swaps if there is insufficient memory or linear number
   of swaps if sufficient memory is available.

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
  
 int main()
 {
     std::vector<int> v{0, 0, 3, 0, 2, 4, 5, 0, 7};
     std::stable_partition(v.begin(), v.end(), [](int n){return n>0;});
     for (int n : v) {
         std::cout << n << ' ';
     }
     std::cout << '\\n';
 }

.SH Output:

 3 2 4 5 7 0 0 0 0

.SH See also

   partition divides a range of elements into two groups
             \fI(function template)\fP 
