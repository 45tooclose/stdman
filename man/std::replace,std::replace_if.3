.TH std::replace,std::replace_if 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::replace,std::replace_if \- std::replace,std::replace_if

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt, class T >

   void replace( ForwardIt first, ForwardIt last,             \fB(1)\fP

                 const T& old_value, const T& new_value );
   template< class ForwardIt, class UnaryPredicate, class T >

   void replace_if( ForwardIt first, ForwardIt last,          \fB(2)\fP

                    UnaryPredicate p, const T& new_value );

   Replaces all elements satisfying specific criteria with new_value in the range
   [first, last). The first version replaces the elements that are equal to old_value,
   the second version replaces elements for which predicate p returns true.

.SH Parameters

   first, last - the range of elements to process
   old_value   - the value of elements to replace
                 unary predicate which returns true if the element value should be
                 replaced.

                 The signature of the predicate function should be equivalent to the
                 following:
   p           -
                  bool pred(const Type &a);

                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The type Type must be such that an object of type ForwardIt can be
                 dereferenced and then implicitly converted to Type. 
   new_value   - the value to use as replacement
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Exactly last - first applications of the predicate.

.SH Possible implementation

.SH First version
   template<class ForwardIt, class T>
   void replace(ForwardIt first, ForwardIt last,
                const T& old_value, const T& new_value)
   {
       for (; first != last; ++first) {
           if (*first == old_value) {
               *first = new_value;
           }
       }
   }
.SH Second version
   template<class ForwardIt, class UnaryPredicate, class T>
   void replace_if(ForwardIt first, ForwardIt last,
                   UnaryPredicate p, const T& new_value)
   {
       for (; first != last; ++first) {
           if(p(*first)) {
               *first = new_value;
           }
       }
   }

.SH Example

   The following code at first replaces all occurrences of 8 with 88 in a vector of
   integers. Then it replaces all values less than 5 with 55.

   
// Run this code

 #include <algorithm>
 #include <array>
 #include <iostream>
 #include <functional>
  
 int main()
 {
     std::array<int, 10> s{5, 7, 4, 2, 8, 6, 1, 9, 0, 3};
  
     std::replace(s.begin(), s.end(), 8, 88);
  
     for (int a : s) {
         std::cout << a << " ";
     }
     std::cout << '\\n';
  
     std::replace_if(s.begin(), s.end(),
                     std::bind(std::less<int>(), std::placeholders::_1, 5), 55);
     for (int a : s) {
         std::cout << a << " ";
     }
     std::cout << '\\n';
 }

.SH Output:

 5 7 4 2 88 6 1 9 0 3
 5 7 55 55 88 6 55 9 55 55

.SH See also

                                           copies a range, replacing elements
   replace_copy                            satisfying specific criteria with another
   replace_copy_if                         value
                                           \fI(function template)\fP 
   std::experimental::parallel::replace    parallelized version of std::replace
   (parallelism TS)                        \fI(function template)\fP 
   std::experimental::parallel::replace_if parallelized version of std::replace_if
   (parallelism TS)                        \fI(function template)\fP 
