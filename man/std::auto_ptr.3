.TH std::auto_ptr 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <memory>
   template< class T > class auto_ptr; \fB(1)\fP \fB(deprecated)\fP
   template<> class auto_ptr<void>     \fB(2)\fP \fB(deprecated)\fP

   auto_ptr is a smart pointer that manages an object obtained via new and deletes that
   object when auto_ptr itself is destroyed. It may be used to provide exception safety
   for dynamically-allocated objects, for passing ownership of dynamically-allocated
   objects into functions and for returning dynamically-allocated objects from
   functions.

   Copying an auto_ptr copies the pointer and transfers ownership to the destination:
   both copy construction and copy assignment of auto_ptr modify their right hand
   arguments, and the "copy" is not equal to the original. Because of these unusual
   copy semantics, auto_ptr may not be placed in standard containers. std::unique_ptr
   is preferred for this and other uses.

   2) Specialization for type void is provided, it declares the typedef element_type,
   but no member functions.

   An additional class template auto_ptr_ref is referred to throughout the
   documentation. It is an implementation-defined type that holds a reference to
   auto_ptr. The implementation is allowed to provide the template with a different
   name or implement the functions returning it or accepting it as parameter in other
   ways.

.SH Contents

     • 1 Member types
     • 2 Member functions

          • 2.1 Observers
          • 2.2 Modifiers

.SH Member types

   Member type  Definition
   element_type T

.SH Member functions

   constructor          creates a new auto_ptr
                        \fI(public member function)\fP
   destructor           destroys an auto_ptr and the managed object
                        \fI(public member function)\fP
   operator=            transfers ownership from another auto_ptr
                        \fI(public member function)\fP
   operator auto_ptr<Y> converts the managed pointer to a pointer to different type
                        \fI(public member function)\fP
.SH Observers
   get                  obtains a pointer to the managed object
                        \fI(public member function)\fP
   operator*            accesses the managed object
   operator->           \fI(public member function)\fP
.SH Modifiers
   reset                destroys the managed object
                        \fI(public member function)\fP
   release              releases ownership of the managed object
                        \fI(public member function)\fP
