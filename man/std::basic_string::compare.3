.TH std::basic_string::compare 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   int compare( const basic_string& str ) const;  \fB(1)\fP
   int compare( size_type pos1, size_type count1, \fB(2)\fP
   const basic_string& str ) const;
   int compare( size_type pos1, size_type count1,

   const basic_string& str,                       \fB(3)\fP

   size_type pos2, size_type count2 ) const;
   int compare( const CharT* s ) const;           \fB(4)\fP
   int compare( size_type pos1, size_type count1, \fB(5)\fP
   const CharT* s ) const;
   int compare( size_type pos1, size_type count1, \fB(6)\fP
   const CharT* s, size_type count2 ) const;

   Compares two character sequences.

   1) Compares this string to str. First, calculates the number of characters to
   compare, as if by size_type rlen = std::min(size(), str.size()). Then compares by
   calling Traits::compare(data(), str.data(), rlen). For standard strings this
   function performs character-by-character lexicographical comparison. If the result
   is zero (the strings are equal so far), then their sizes are compared as follows:

                         Condition                             Result      Return value
   Traits::compare(data, arg, rlen) < 0                   data is less     <0
                                                          than arg
                                      size(data) <        data is less     <0
                                      size(arg)           than arg
   Traits::compare(data, arg, rlen)   size(data) ==       data is equal to 0
   == 0                               size(arg)           arg
                                      size(data) >        data is greater  >0
                                      size(arg)           than arg
   Traits::compare(data, arg, rlen) > 0                   data is greater  >0
                                                          than arg

   2) Compares a [pos1, pos1+count1) substring of this string to str as if by
   basic_string(*this, pos1, count1).compare(str)
   3) Compares a [pos1, pos1+count1) substring of this string to a substring [pos2,
   pas2+count2) of str as if by basic_string(*this, pos1,
   count1).compare(basic_string(str, pos2, count2))
   4) Compares this string to the null-terminated character sequence beginning at the
   character pointed to by s, as if by compare(basic_string(s))
   5) Compares a [pos1, pos1+count1) substring of this string to the null-terminated
   character sequence beginning at the character pointed to by s, as if by
   basic_string(*this, pos, count1).compare(basic_string(s))
   6) Compares a [pos1, pos1+count1) substring of this string to the first count2
   characters of the character array whose first character is pointed to by s, as if by
   basic_string(*this, pos, count1).compare(basic_string(s, count2)). (Note: the
   characters from s to s+count2 may include null characters))

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 Possible implementation
     * 5 Example
     * 6 See also

.SH Parameters

   str    - other string to compare to
   s      - pointer to the character string to compare to
   count1 - number of characters of this string to compare
   pos1   - position of the first character in this string to compare
   count2 - number of characters of the given string to compare
   pos2   - position of the first character of the given string to compare

.SH Return value

   negative value if this string is less than the other character sequence, zero if the
   both character sequences are equal, positive value if this string is greater than
   the other character sequence.

.SH Exceptions

   1)

   \fI(none)\fP                  \fI(until C++11)\fP
   noexcept specification: \fI(since C++11)\fP
   noexcept

   2-3) May throw the exceptions thrown by the corresponding basic_string constructors.
   4)

   \fI(none)\fP                  \fI(until C++11)\fP
   noexcept specification: \fI(since C++11)\fP
   noexcept

   5-6) May throw the exceptions thrown by the corresponding basic_string constructors.

.SH Possible implementation

template<class CharT, class Traits, class Alloc>
int basic_string<CharT, Traits, Alloc>::compare(const std::basic_string& str) const noexcept
{
    size_type lhs_sz = size();
    size_type rhs_sz = str.size();
    int result = traits_type::compare(data(), str.data(), std::min(lhs_sz, rhs_sz));
    if (result != 0)
        return result;
    if (lhs_sz < rhs_sz)
        return -1;
    if (lhs_sz > rhs_sz)
        return 1;
    return 0;
}

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   operator==
   operator!=
   operator<               lexicographically compares two strings
   operator>               \fI(function template)\fP
   operator<=
   operator>=
   substr                  returns a substring
                           \fI(public member function)\fP
   collate                 defines lexicographical comparison and hashing of strings
                           \fI(class template)\fP
   strcoll                 compares two strings in accordance to the current locale
                           \fI(function)\fP
                           returns true if one range is lexicographically less than
   lexicographical_compare another
                           \fI(function template)\fP

.SH Category:

     * Todo no example
