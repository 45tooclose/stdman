.TH std::basic_regex 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <regex>
   template <

   class CharT = char,                      \fI(since C++11)\fP
   class Traits = std::regex_traits<CharT>

   > class basic_regex;

   The class template basic_regex provides a general framework for holding regular
   expressions.

   Several specializations for common character types are provided:

   Defined in header <regex>
   Type   Definition
   regex  basic_regex<char>
   wregex basic_regex<wchar_t>

.SH Contents

     * 1 Member types
     * 2 Member functions

          * 2.1 Observers
          * 2.2 Locale
          * 2.3 Modifiers

     * 3 Constants
     * 4 Non-member functions

.SH Member types

   Member type Definition
   value_type  CharT
   traits_type Traits
   string_type Traits::string_type
   locale_type Traits::locale_type
   flag_type   std::regex_constants::syntax_option_type

.SH Member functions

   Value      Effect(s)
   icase      Character matching should be performed without regard to case.
   nosubs     When performing matches, no sub-expression matches should be stored in
              the supplied std::regex_match structure.
              Instructs the regular expression engine to make matching faster, with the
   optimize   potential cost of making construction slower. For example, this might
              mean converting a non-deterministic FSA to a deterministic FSA.
   collate    Character ranges of the form "[a-b]" will be locale sensitive.
   ECMAScript Use the Modified ECMAScript regular expression grammar
   basic      Use the basic POSIX regular expression grammar (grammar documentation).
   extended   Use the extended POSIX regular expression grammar (grammar
              documentation).
   awk        Use the regular expression grammar used by the awk utility in POSIX
              (grammar documentation)
              Use the regular expression grammar used by the grep utility in POSIX.
   grep       This is effectively the same as the basic option with the addition of
              newline '\\n' as an alternation separator.
              Use the regular expression grammar used by the grep utility, with the -E
   egrep      option, in POSIX. This is effectively the same as the extended option
              with the addition of newline '\\n' as an alternation separator in addtion
              to '|'.

   constructor   constructs the regex object
                 \fI(public member function)\fP
   destructor    destructs the regex object
                 \fI(public member function)\fP
   operator=     assigns the contents
                 \fI(public member function)\fP
   assign        assigns the contents
                 \fI(public member function)\fP
.SH Observers
                 returns the number of marked sub-expressions within the regular
   mark_count    expression
                 \fI(public member function)\fP
   flags         returns the syntax flags
                 \fI(public member function)\fP
.SH Locale
   getloc        get locale information
                 \fI(public member function)\fP
   imbue         set locale information
                 \fI(public member function)\fP
.SH Modifiers
   swap          swaps the contents
                 \fI(public member function)\fP
.SH Constants

   The member constants in basic_regex are duplicates of the syntax_option_type
   constants defined in the namespace std::regex_constants.

.SH Non-member functions

   std::swap(std::basic_regex) specializes the std::swap algorithm
   \fI(C++11)\fP                     \fI(function template)\fP
