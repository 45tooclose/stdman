.TH std::is_move_constructible,std::is_trivially_move_constructible, 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_move_constructible,std::is_trivially_move_constructible, \- std::is_move_constructible,std::is_trivially_move_constructible,

.SH Synopsis

   Defined in header <type_traits>
   template< class T >                     \fB(1)\fP \fI(since C++11)\fP
   struct is_move_constructible;
   template< class T >                     \fB(2)\fP \fI(since C++11)\fP
   struct is_trivially_move_constructible;
   template< class T >                     \fB(3)\fP \fI(since C++11)\fP
   struct is_nothrow_move_constructible;

   1) Checks whether a type is MoveConstructible, that is, can be constructed from
   rvalue argument. If the requirement is met, a member constant value equal to true is
   provided; otherwise the value is false.

   2) Same as 1), but the move constructor expression does not call any operation that
   is not trivial.

   3) Same as 1), but the move constructor expression is noexcept.

.SH Member constants

   value    true if T is move-constructible , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Types without a move constructor, but with a copy constructor that accepts const T&
   arguments, satisfy std::is_move_constructible.

   Move constructors are usually noexcept, since otherwise they are unusable in any
   code that provides strong exception guarantee.

.SH Possible implementation

  template<class T>
  struct is_move_constructible :
        std::is_constructible<T, typename std::add_rvalue_reference<T>::type> {};
   
  template<class T>
  struct is_trivially_move_constructible :
       std::is_trivially_constructible<T, typename std::add_rvalue_reference<T>::type> {};
   
  template<class T>
  struct is_nothrow_move_constructible :
       std::is_nothrow_constructible<T, typename std::add_rvalue_reference<T>::type> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct Ex1 {
     std::string str; // member has a non-trivial but non-throwing move ctor
 };
 struct Ex2 {
     int n;
     Ex2(Ex2&&) = default; // trivial and non-throwing
 };
  
 int main() {
     std::cout << std::boolalpha << "Ex1 is move-constructible? "
               << std::is_move_constructible<Ex1>::value << '\\n'
               << "Ex1 is trivially move-constructible? "
               << std::is_trivially_move_constructible<Ex1>::value << '\\n'
               << "Ex1 is nothrow move-constructible? "
               << std::is_nothrow_move_constructible<Ex1>::value << '\\n'
               << "Ex2 is trivially move-constructible? "
               << std::is_trivially_move_constructible<Ex2>::value << '\\n'
               << "Ex2 is nothrow move-constructible? "
               << std::is_nothrow_move_constructible<Ex2>::value << '\\n';
 }

.SH Output:

 Ex1 is move-constructible? true
 Ex1 is trivially move-constructible? false
 Ex1 is nothrow move-constructible? true
 Ex2 is trivially move-constructible? true
 Ex2 is nothrow move-constructible? true

.SH See also

   is_constructible
   is_trivially_constructible         checks if a type has a constructor for specific
   is_nothrow_constructible           arguments
   \fI(C++11)\fP                            \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_default_constructible
   is_trivially_default_constructible
   is_nothrow_default_constructible   checks if a type has a default constructor
   \fI(C++11)\fP                            \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_copy_constructible
   is_trivially_copy_constructible
   is_nothrow_copy_constructible      checks if a type has a copy constructor
   \fI(C++11)\fP                            \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   move_if_noexcept                   obtains an rvalue reference if the move
   \fI(C++11)\fP                            constructor does not throw
                                      \fI(function template)\fP 
