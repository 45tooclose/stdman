.TH std::scanf,std::fscanf,std::sscanf 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cstdio>
   int scanf( const char *format, ... );                    \fB(1)\fP
   int fscanf( FILE *stream, const char *format, ... );       \fB(2)\fP
   int sscanf( const char *buffer, const char *format, ... ); \fB(3)\fP

   Reads data from the a variety of sources, interprets it according to format and
   stores the results into given locations.

   1) Reads the data from stdin
   2) Reads the data from file stream stream
   3) Reads the data from null-terminated character string buffer

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Example
     * 4 See also

.SH Parameters

stream - input file stream to read from
buffer - pointer to a null-terminated character string to read from
         pointer to a null-terminated character string specifying how to read the input.

         The format string consists of whitespace characters (any single whitespace character in the format string consumes
         all available consecutive whitespace characters from the input), non-whitespace characters except % (each such
         character in the format string consumes exactly one identical character from the input) and conversion
         specifications. Each conversion specification has the following format:

           * introductory % character

           * (optional) assignment-suppressing character *. If this option is present, the function does not assign the
             result of the conversion to any receiving argument.

           * (optional) integer number (greater than zero) that specifies maximum field width, that is, the maximum number of
             characters that the function is allowed to consume when doing the conversion specified by the current conversion
             specification. Note that %s and %[ may lead to buffer overflow if the width is not provided.

           * (optional) length modifier that specifies the size of the receiving argument, that is, the actual destination
             type. This affects the conversion accuracy and overflow rules. The default destination type is different for
             each conversion type (see table below).

           * conversion format specifier

         The following format specifiers are available:

         Conversion      Explanation                                         Argument type
         specifier
                  length modifier             hh       h      \fI(none)\fP     l        ll        j         z        t         L
             %      matches literal %      N/A      N/A      N/A      N/A      N/A      N/A        N/A     N/A        N/A
             c      matches a single
                    character
                    matches a character
             s      string (a sequence of
                    non-whitespace
                    characters)
                    matches a non-empty
                    sequence of character
                    from set of
                    characters.            N/A      N/A      char*    wchar_t* N/A      N/A        N/A     N/A        N/A

                    If the first character
           [set]    of the set is ^, then
                    all characters not in
                    the set are matched.
                    If the set begins with
                    ] or ^] then the ]
                    character is also
                    included into the set.
                    matches a decimal
                    integer.

             d      The format of the
                    number is the same as
                    expected by strtol()
                    with the value 10 for
                    the base argument
                    matches a decimal
                    integer.

             i      The format of the
                    number is the same as
                    expected by strtol()
                    with the value 0 for
format -            the base argument
                    matches a unsigned
                    decimal integer.

             u      The format of the
                    number is the same as
                    expected by strtoul()
                    with the value 0 for                                     signed
                    the base argument      signed   signed   signed   signed   long
                    matches an octal       char* or short*   int* or  long* or long* or intmax_t*
                    integer.               unsigned or       unsigned unsigned unsigned or         size_t* ptrdiff_t* N/A
                                           char*    unsigned int*     long*    long     uintmax_t*
             o      The format of the               short*                     long*
                    number is the same as
                    expected by strtol()
                    with the value 8 for
                    the base argument
                    matches an hexadecimal
                    integer.

             x      The format of the
                    number is the same as
                    expected by strtol()
                    with the value 16 for
                    the base argument
                    returns the number of
                    characters read so
                    far.

                    No input is consumed.
             n      Does not increment the
                    assignment count. If
                    the specifier has
                    assignment-suppressing
                    operator defined, the
                    behavior is undefined
                    matches a
            a, A    floating-point number.
            e, E                           N/A      N/A      float*   double*  N/A      N/A        N/A     N/A        long
            f, F    The format of the                                                                                 double*
            g, G    number is the same as
                    expected by strtof()
                    matches implementation
                    defined character
                    sequence defining a
                    pointer.
             p                             N/A      N/A      void**   N/A      N/A      N/A        N/A     N/A        N/A
                    printf family of
                    functions should
                    produce the same
                    sequence using %p
                    format specifier

         All conversion specifiers other than [, c, and n consume and discard all leading whitespace characters before
         attempting to parse the input. These consumed characters do not count towards the specified maximum field width.

         The conversion specifiers lc, ls, and l[ perform multibyte-to-wide character conversion as if by calling
         std::mbrtowc with an std::mbstate_t object initialized to zero before the first character is converted.

         The conversion specifiers s and [ always store the null terminator in addition to the matched characters. The size
         of the destination array must be at least one greater than the specified field width.

         The correct conversion specifications for the fixed-width character types (std:int8_t, etc) are defined in the
         header <cinttypes>.
...    - receiving arguments

.SH Return value

   Number of receiving arguments successfully assigned, or EOF if read failure occurs
   before the first receiving argument was assigned.

.SH Example

   
// Run this code

 #include <iostream>
 #include <clocale>
 #include <cstdio>

 int main()
 {
     int i, j;
     float x, y;
     char str1[10], str2[4];
     wchar_t warr[2];

     char input[] = u8"25 54.32E-1 Thompson 56789 0123 56ß水";

     // parse as follows:
     // an integer, a floating-point value, a word,
     // two-digit integer (digits 5 and 6)
     // a floating-point value (digits 7, 8, 9)
     // an integer which isn't stored anywhere
     // a string of integers (digits 5 and 6)
     // two wide characters, using multibyte to wide conversion

     std::setlocale(LC_ALL, "en_US.utf8");
     int ret = std::sscanf(input, "%d%f%9s%2d%f%*d %3[0-9]%2lc",
                      &i, &x, str1, &j, &y, str2, warr);

     std::cout << "Converted " << ret << " fields:\\n"
               << "i = " << i << "\\nx = " << x << '\\n'
               << "str1 = " << str1 << "\\nj = " << j << '\\n'
               << "y = " << y << "\\nstr2 = " << str2 << '\\n'
               << std::hex << "warr[0] = U+" << warr[0]
               << " warr[1] = U+" << warr[1] << '\\n';
 }

.SH Output:

 Converted 7 fields:
 i = 25
 x = 5.432
 str1 = Thompson
 j = 56
 y = 789
 str2 = 56
 warr[0] = U+df warr[1] = U+6c34

.SH See also

   vscanf
   vfscanf  reads formatted input from stdin, a file stream or a buffer
   vsscanf  using variable argument list
   \fI(C++11)\fP  \fI(function)\fP
   \fI(C++11)\fP
   \fI(C++11)\fP
   fgets    gets a character string from a file stream
            \fI(function)\fP
   printf
   fprintf  prints formatted output to stdout, a file stream or a buffer
   sprintf  \fI(function)\fP
   snprintf
   \fI(C++11)\fP
   C documentation for
   scanf,
   fscanf,
   sscanf
