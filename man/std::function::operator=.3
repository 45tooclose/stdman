.TH std::function::operator= 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   function& operator=( const function& other );       \fB(1)\fP \fI(since C++11)\fP
   function& operator=( function&& other );            \fB(2)\fP \fI(since C++11)\fP
   function& operator=( std::nullptr_t );              \fB(3)\fP \fI(since C++11)\fP
   template< class F >                                 \fB(4)\fP \fI(since C++11)\fP
   function& operator=( F&& f );
   template< class F >                                 \fB(5)\fP \fI(since C++11)\fP
   function& operator=( std::reference_wrapper<F> f );

   Assigns a new target to std::function.

   1) Assigns a copy of target of other, as if by executing
   function(other).swap(*this);
   2) Moves the target of other to *this. other is in a valid state with an unspecified
   value.
   3) Drops the current target. *this is empty after the call.
   4) Moves the callable f to the target of *this, as if by executing
   function(std::forward<F>(f)).swap(*this);
   5) Assigns a copy of f, as if by executing function(f).swap(*this);

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 See also

.SH Parameters

   other - another std::function object to copy the target of
   f     - a callable to initialize the target with
.SH Type requirements
   -
   F must meet the requirements of Callable.

.SH Return value

   *this

.SH Exceptions

   1-4) \fI(none)\fP
   5)
   noexcept specification:  
   noexcept
     

.SH See also


   assign assigns a new target
          \fI(public member function)\fP
