.TH std::mem_fun 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <functional>
   template< class Res, class T >                              \fB(1)\fP \fB(deprecated)\fP
   std::mem_fun_t<Res,T> mem_fun( Res (T::*f)() );
   template< class Res, class T >                              \fB(1)\fP \fB(deprecated)\fP
   std::const_mem_fun_t<Res,T> mem_fun( Res (T::*f)() );
   template< class Res, class T, class Arg >                   \fB(2)\fP \fB(deprecated)\fP
   std::mem_fun1_t<Res,T,Arg> mem_fun( Res (T::*f)(Arg) );
   template< class Res, class T, class Arg >                   \fB(2)\fP \fB(deprecated)\fP
   std::const_mem_fun1_t<Res,T,Arg> mem_fun( S (T::*f)(Arg) );

   Creates a member function wrapper object, deducing the target type from the template
   arguments. The wrapper object expects a pointer to an object of type T as the first
   parameter to its operator().

   1) Effectively calls std::mem_fun_t<S,T>(f) or std::const_mem_fun_t<S,T>(f).
   2) Effectively calls std::mem_fun1_t<S,T>(f) or std::const_mem_fun1_t<S,T>(f).

   This function and the related types are deprecated as of C++11 in favor of the more
   general std::function and std::bind, both of which create callable
   adapter-compatible function objects from plain functions.

.SH Parameters

   f - pointer to a member function to create a wrapper for

.SH Return value

   A function object wrapping f.

.SH Exceptions

   \fI(none)\fP

.SH Notes

   The difference between std::mem_fun and std::mem_fun_ref is that the former produces
   an function wrapper that expects a pointer to an object, whereas the latter -- a
   reference.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   mem_fun_ref  creates a wrapper from a pointer to member function, callable with a
   \fB(deprecated)\fP reference to object
                \fI(function template)\fP 

.SH Category:

     * Todo no example
