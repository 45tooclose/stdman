.TH std::make_move_iterator 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <iterator>
   template< class Iterator >                                             \fI(since C++11)\fP
   std::move_iterator<Iterator> make_move_iterator( const Iterator& i );  \fI(until C++14)\fP
   template< class Iterator >                                             \fI(since C++14)\fP
   std::move_iterator<Iterator> make_move_iterator( Iterator i );

   make_move_iterator is a convenience function template that constructs a
   std::move_iterator for the given iterator i with the type deduced from the type of
   the argument.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Possible implementation
     * 4 Example
     * 5 See also

.SH Parameters

   i - input iterator to be converted to move iterator

.SH Return value

   A std::move_iterator which can be used to move from the elements accessed through i

.SH Possible implementation

   template< class Iterator >
   std::move_iterator<Iterator> make_move_iterator( Iterator i )
   {
       return std::move_iterator<Iterator>(i);
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <list>
 #include <vector>
 #include <string>
 #include <iterator>

 int main()
 {
     std::list<std::string> s{"one", "two", "three"};

     std::vector<std::string> v1(s.begin(), s.end()); // copy

     std::vector<std::string> v2(std::make_move_iterator(s.begin()),
                                 std::make_move_iterator(s.end())); // move

     std::cout << "v1 now holds: ";
     for (auto str : v1)
             std::cout << "\\"" << str << "\\" ";
     std::cout << "\\nv2 now holds: ";
     for (auto str : v2)
             std::cout << "\\"" << str << "\\" ";
     std::cout << "\\noriginal list now holds: ";
     for (auto str : s)
             std::cout << "\\"" << str << "\\" ";
     std::cout << '\\n';
 }

.SH Output:

 v1 now holds: "one" "two" "three"
 v2 now holds: "one" "two" "three"
 original list now holds: "" "" ""

.SH See also

   move_iterator iterator adaptor which dereferences to an rvalue reference
   \fI(C++11)\fP       \fI(class template)\fP
   move          obtains an rvalue reference
   \fI(C++11)\fP       \fI(function template)\fP
