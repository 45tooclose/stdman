.TH std::bitset::bitset 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   constexpr bitset() noexcept;                                         \fB(1)\fP
   constexpr bitset( unsigned long long val ) noexcept;                 \fB(2)\fP
   template< class CharT, class Traits, class Alloc >

   explicit bitset( const std::basic_string<CharT,Traits,Alloc>& str,
                    typename                                                    (until
   std::basic_string<CharT,Traits,Alloc>::size_type pos = 0,                    C++11)
                    typename
   std::basic_string<CharT,Traits,Alloc>::size_type n =

                        std::basic_string<CharT,Traits,Alloc>::npos);
   template< class CharT, class Traits, class Alloc >

   explicit bitset( const std::basic_string<CharT,Traits,Alloc>& str,
                    typename
   std::basic_string<CharT,Traits,Alloc>::size_type pos = 0,            \fB(3)\fP     (since
                    typename                                                    C++11)
   std::basic_string<CharT,Traits,Alloc>::size_type n =
                        std::basic_string<CharT,Traits,Alloc>::npos,
                    CharT zero = CharT(’0’),

                    CharT one = CharT(’1’));
   template< class CharT >

   explicit bitset( const CharT* str,
                    typename std::basic_string<CharT>::size_type n =        \fB(4)\fP (since
                        std::basic_string<CharT>::npos,                         C++11)
                    CharT zero = CharT(’0’),

                    CharT one = CharT(’1’));

   Constructs a new bitset from one of several optional data sources:

   1) Default constructor. Constructs a bitset with all bits set to zero.
   2) Constructs a bitset using the bits in val. If N is the size of the bitset and M
   is the number of set bits in val, then only min(N, M) bits will be included in the
   bitset.
   3) Constructs a bitset using the characters in the std::basic_string str. An
   optional starting position pos and length n can be provided, as well as characters
   denoting alternate values for set (one) and unset (zero) bits.
   The effective length of the initializing string is min(n, str.size() - pos).
   If pos > str.size(), this constructor throws std::out_of_range. If any characters
   examined in str are not zero or one, it throws std::invalid_argument.
   4) Similar to \fB(3)\fP, but uses a CharT* instead of a std::basic_string.

.SH Parameters

   val  - number used to initialize the bitset
   str  - string used to initialize the bitset
   pos  - a starting offset into str
   n    - number of characters to use from str
   one  - alternate character for set bits in str
   zero - alternate character for unset bits in str

.SH Exceptions

   1. none

   2. none

   3. std::out_of_range if pos > str.size()

   4. none

.SH Example

   
// Run this code

 #include <bitset>
 #include <string>
  
 int main()
 {
     // empty constructor
     std::bitset<8> b1; // [0,0,0,0,0,0,0,0]
  
     // unsigned long long constructor
     std::bitset<8> b2(42); // [0,0,1,0,1,0,1,0]
  
     // string constructor
     std::string bit_string = "110010";
     std::bitset<8> b3(bit_string);       // [0,0,1,1,0,0,1,0]
     std::bitset<8> b4(bit_string, 2);    // [0,0,0,0,0,0,1,0]
     std::bitset<8> b5(bit_string, 2, 3); // [0,0,0,0,0,0,0,1]
  
     // string constructor using custom zero/one digits
     std::string alpha_bit_string = "aBaaBBaB";
     std::bitset<8> b6(alpha_bit_string, 0, alpha_bit_string.size(),
                       'a', 'B');         // [0,1,0,0,1,1,0,1]
  
     // char* constructor using custom digits
     std::bitset<8> b7("XXXXYYYY", 8, 'X', 'Y'); // [0,0,0,0,1,1,1,1]
     return 0;
 }

.SH See also

   set   sets bits to true or given value
         \fI(public member function)\fP 
   reset sets bits to false
         \fI(public member function)\fP 
