.TH std::chrono::time_point 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <chrono>
   template<

       class Clock,                               \fI(since C++11)\fP
       class Duration = typename Clock::duration

   > class time_point;

   Class template std::chrono::time_point represents a point in time. It is implemented
   as if it stores a value of type Duration indicating the time interval from the start
   of the Clock's epoch.

.SH Contents

     • 1 Member types
     • 2 Member functions
     • 3 Non-member functions
     • 4 Example
     • 5 See also

.SH Member types

   Member type Definition
   clock       Clock, the clock on which this time point is measured
   duration    Duration, a std::chrono::duration type used to measure the time since
               epoch
   rep         Rep, an arithmetic type representing the number of ticks of the duration
   period      Period, a std::ratio type representing the tick period of the duration

.SH Member functions

   constructor      constructs a new time point
                    \fI(public member function)\fP
   time_since_epoch returns the time point as duration since the start of its clock
                    \fI(public member function)\fP
   operator+=       modifies the time point by the given duration
   operator-=       \fI(public member function)\fP
   min              returns the time point corresponding to the smallest duration
   \fB[static]\fP         \fI(public static member function)\fP
   max              returns the time point corresponding to the largest duration
   \fB[static]\fP         \fI(public static member function)\fP

.SH Non-member functions

   std::common_type<std::chrono::time_point> specializes the std::common_type trait
                                             \fI(class template specialization)\fP
   operator+                                 modifies the time point by the given
   operator-                                 duration
                                             \fI(function template)\fP
   operator==
   operator!=
   operator<                                 compares two time points
   operator<=                                \fI(function template)\fP
   operator>
   operator>=
                                             converts a time point to another time
   time_point_cast                           point on the same clock, with a different
                                             duration
                                             \fI(function template)\fP

.SH Example

   This example prints the current time minus 24 hours:

   
// Run this code

 #include <iostream>
 #include <iomanip>
 #include <ctime>
 #include <chrono>
  
 int main()
 {
  
     using namespace std::chrono;
  
     system_clock::time_point now = system_clock::now();
     std::time_t now_c = system_clock::to_time_t(
                             now - std::chrono::hours(24));
     std::cout << "One day ago, the time was "
               << std::put_time(std::localtime(&now_c), "%F %T") << '\\n';
 }

.SH Possible output:

 One day ago, the time was 2011-10-25 12:00:08

   This example prints the time it takes to print "Hello World":

   
// Run this code

 #include <iostream>
 #include <chrono>
  
 using std::chrono::duration_cast;
 using std::chrono::microseconds;
 using std::chrono::steady_clock;
  
 int main()
 {
     steady_clock::time_point start = steady_clock::now();
     std::cout << "Hello World\\n";
     steady_clock::time_point end = steady_clock::now();
     std::cout << "Printing took "
               // duration_cast is required to avoid accidentally losing precision.
               << duration_cast<microseconds>(end - start).count()
               << "us.\\n";
 }

.SH Possible output:

 Hello World
 Printing took 84us.

.SH See also

   duration a time interval
   \fI(C++11)\fP  \fI(class template)\fP
