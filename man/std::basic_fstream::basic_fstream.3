.TH std::basic_fstream::basic_fstream 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   basic_fstream();                                        \fB(1)\fP
   explicit basic_fstream( const char* filename,           \fB(2)\fP
   ios_base::openmode mode = ios_base::in|ios_base::out );
   explicit basic_fstream( const string& filename,         \fB(3)\fP \fI(since C++11)\fP
   ios_base::openmode mode = ios_base::in|ios_base::out );
   basic_fstream( basic_fstream&& other );                 \fB(4)\fP \fI(since C++11)\fP
   basic_fstream( const basic_fstream& rhs) = delete;      \fB(5)\fP \fI(since C++11)\fP

   Constructs new file stream.

   1) Default constructor: constructs a stream that is not associated with a file:
   default-constructs the std::basic_filebuf and constructs the base with the pointer
   to this default-constructed std::basic_filebuf member.
   2) First, performs the same steps as the default constructor, then associates the
   stream with a file by calling rdbuf()->open(filename, mode). If the open() call
   returns a null pointer, sets setstate(failbit).
   3) Same as basic_fstream(filename.c_str(), mode).
   4) Move constructor. First, move-constructs the base class from other (which does
   not affect the rdbuf() pointer), then move-constructs the std::basic_filebuf member,
   then calls this->set_rdbuf() to install the new basic_filebuf as the rdbuf() pointer
   in the base class.
   5) The copy-constructor is deleted: this class is not copyable.

.SH Parameters

   filename - the name of the file to be opened
              specifies stream open mode. It is bitmask type, the following constants
              are defined:

              Constant Explanation
   mode     - app      seek to the end of stream before each write
              binary   open in binary mode
              in       open for reading
              out      open for writing
              trunc    discard the contents of the stream when opening
              ate      seek to the end of stream immediately after open
   other    - another file stream to use as source

.SH Example

   
// Run this code

 #include <fstream>
 #include <utility>
 #include <string>
 int main()
 {
     std::fstream f0;
     std::fstream f1("test.bin", std::ios::binary);
     std::string name = "example.txt";
     std::fstream f2(name);
     std::fstream f3(std::move(f1));
 }

.SH See also

   open          opens a file and associates it with the stream
                 \fI(public member function)\fP
   open          opens a file and configures it as the associated character sequence
                 \fI(public member function of std::basic_filebuf)\fP
   set_rdbuf     replaces the rdbuf without clearing its error state
                 \fI(protected member function)\fP
   constructor   constructs the object
                 \fI(public member function of std::basic_iostream)\fP
