.TH std::dynarray::dynarray 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   explicit dynarray( size_type count );                            \fB(1)\fP \fI(since C++14)\fP
   template< class Alloc >                                          \fB(2)\fP \fI(since C++14)\fP
   dynarray( size_type count, const Alloc& alloc );
   dynarray( size_type count, const T& value );                     \fB(3)\fP \fI(since C++14)\fP
   template< class Alloc >                                          \fB(4)\fP \fI(since C++14)\fP
   dynarray( size_type count, const T& value, const Alloc& alloc );
   dynarray( const dynarray& other );                               \fB(5)\fP \fI(since C++14)\fP
   template< class Alloc >                                          \fB(6)\fP \fI(since C++14)\fP
   dynarray( const dynarray& other, const Alloc& alloc );
   dynarray( std::initializer_list<T> init );                       \fB(7)\fP \fI(since C++14)\fP
   template< class Alloc >                                          \fB(8)\fP \fI(since C++14)\fP
   dynarray( std::initializer_list<T> init, const Alloc& alloc );

   Constructs a new container from a variety of data sources, optionally using user
   supplied allocator alloc. If an allocator is provided, all memory allocations are
   done though it. Otherwise, the memory is allocated from an unspecified source, which
   may, or may not, invoke the global operator new. This way, additional optimization
   opportunities are possible, for example, using stack-based allocation.

   1-2) Constructs the container with count default-initialized (or constructed by
   specified allocator) instances of T. No copies are made.
   3-4) Constructs the container with count copies of elements with value value. T must
   meet the requirements of CopyConstructible.
   5-6) Copy-constructor. Constructs the container with the copy of the contents of
   other. T must meet the requirements of CopyConstructible.
   7-8) Constructs the container with the contents of the initializer list init.

.SH Parameters

   alloc - allocator to use for the memory allocations of this container
   count - the size of the container
   value - the value to initialize elements of the container with
   other - another container to be used as source to initialize the elements of the
           container with
   init  - initializer list to initialize the elements of the container with
.SH Type requirements
   -
   Alloc must meet the requirements of Allocator.

.SH Complexity

   1-4) Linear in count
   5-6) Linear in other.size()
   7-8) Linear in size of init

.SH Exceptions

   1-4) std::bad_alloc if there's insufficient memory. std::bad_array_length if count
   is above the implementation-defined limits.
   5-8) std::bad_alloc if there's insufficient memory.

.SH Example

    This section is incomplete
    Reason: no example

.SH Category:

     * Todo no example
