.TH std::timed_mutex::unlock 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   void unlock();  \fI(since C++11)\fP

   Unlocks the mutex.

   The mutex must be locked by the current thread of execution, otherwise, the behavior
   is undefined.

   This operation synchronizes-with (as defined in std::memory_order) any subsequent
   lock operation that obtains ownership of the same mutex.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 Notes
     * 5 Example
     * 6 See also

.SH Parameters

   \fI(none)\fP

.SH Return value

   \fI(none)\fP

.SH Exceptions

   \fI(none)\fP

.SH Notes

   unlock() is usually not called directly: std::unique_lock and std::lock_guard are
   used to manage exclusive locking.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   lock           locks the mutex, blocks if the mutex is not available
                  \fI(public member function)\fP
   try_lock       tries to lock the mutex, returns if the mutex is not available
                  \fI(public member function)\fP
                  tries to lock the mutex, returns if the mutex has been
   try_lock_for   unavailable for the specified timeout duration
                  \fI(public member function)\fP
                  tries to lock the mutex, returns if the mutex has been
   try_lock_until unavailable until specified time point has been reached
                  \fI(public member function)\fP

.SH Category:

     * Todo no example
