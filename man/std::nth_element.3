.TH std::nth_element 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::nth_element \- std::nth_element

.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >                                                     \fB(1)\fP
   void nth_element( RandomIt first, RandomIt nth, RandomIt last );
   template< class RandomIt, class Compare >                                      \fB(2)\fP
   void nth_element( RandomIt first, RandomIt nth, RandomIt last, Compare comp );

   nth_element is a partial sorting algorithm that rearranges elements in [first, last)
   such that:

     * The element pointed at by nth is changed to whatever element would occur in that
       position if [first, last) was sorted.
     * All of the elements before this new nth element are less than or equal to the
       elements after the new nth element.

   More formally, nth_element partially sorts the range [first, last) in ascending
   order so that the condition !(*j < *i) (for the first version, or comp(*j, *i) ==
   false for the second version) is met for any i in the range [first, nth) and for any
   j in the range [nth, last). The element placed in the nth position is exactly the
   element that would occur in this position if the range was fully sorted.

   nth may be the end iterator, in this case the function has no effect.

.SH Parameters

   first, last - random access iterators defining the range sort
   nth         - random access iterator defining the sort partition point
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less than (i.e. is ordered before) the second.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type RandomIt
                 can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
   -
   RandomIt must meet the requirements of ValueSwappable and RandomAccessIterator.
   -
   The type of dereferenced RandomIt must meet the requirements of MoveAssignable and
   MoveConstructible.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in std::distance(first, last) on average.

.SH Notes

   The algorithm used is typically introselect although other selection algorithms with
   suitable average-case complexity are allowed.

.SH Example

   
// Run this code

 #include <iostream>
 #include <vector>
 #include <algorithm>
 #include <functional>
  
 int main()
 {
     std::vector<int> v{5, 6, 4, 3, 2, 6, 7, 9, 3};
  
     std::nth_element(v.begin(), v.begin() + v.size()/2, v.end());
     std::cout << "The median is " << v[v.size()/2] << '\\n';
  
     std::nth_element(v.begin(), v.begin()+1, v.end(), std::greater<int>());
     std::cout << "The second largest element is " << v[1] << '\\n';
 }

.SH Output:

 The median is 5
 The second largest element is 7

.SH See also

                                            copies and partially sorts a range of
   partial_sort_copy                        elements
                                            \fI(function template)\fP 
                                            sorts a range of elements while preserving
   stable_sort                              order between equal elements
                                            \fI(function template)\fP 
   sort                                     sorts a range into ascending order
                                            \fI(function template)\fP 
   std::experimental::parallel::nth_element parallelized version of std::nth_element
   (parallelism TS)                         \fI(function template)\fP 
