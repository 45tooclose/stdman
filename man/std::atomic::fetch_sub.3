.TH std::atomic::fetch_sub 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   T fetch_sub( T arg,
                memory_order =
   std::memory_order_seq_cst );
   T fetch_sub( T arg,                            \fI(since C++11)\fP
                memory_order =                    (member only of
   std::memory_order_seq_cst ) volatile;          atomic<Integral>
   T* fetch_sub( std::ptrdiff_t arg,              template
                 memory_order =                   specialization)  \fI(since C++11)\fP
   std::memory_order_seq_cst );                                    (member only of
   T* fetch_sub( std::ptrdiff_t arg,                               atomic<T*> template
                 memory_order =                                    specialization)
   std::memory_order_seq_cst ) volatile;

   Atomically replaces the current value with the result of arithmetic subtraction of
   the value and arg. The operation is read-modify-write operation. Memory is affected
   according to the value of memory_order.

   For signed Integral types, arithmetic is defined to use two’s complement
   representation. There are no undefined results. For T* types, the result may be an
   undefined address, but the operations otherwise have no undefined behavior.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 See also

.SH Parameters

   arg          - the other argument of arithmetic subtraction
   memory_order - memory order constraints to enforce

.SH Return value

   The value of the atomic variable before the call.

.SH Exceptions

   noexcept specification:  
   noexcept
     

.SH See also

   atomic_fetch_sub          subtracts a non-atomic value from an atomic object and
   atomic_fetch_sub_explicit obtains the previous value of the atomic
   \fI(C++11)\fP                   \fI(function template)\fP
   \fI(C++11)\fP
