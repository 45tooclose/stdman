.TH std::tuple_element<std::tuple> 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <tuple>
   template< std::size_t I, class T >                                 \fB(1)\fP \fI(since C++11)\fP
   class tuple_element; /* undefined */
   template< std::size_t I, class... Types >                          \fB(2)\fP \fI(since C++11)\fP
   class tuple_element< I, tuple<Types...> >;
   template< std::size_t I, class T >

   class tuple_element< I, const T > {
   typedef typename                                                   \fB(3)\fP \fI(since C++11)\fP
   std::add_const<typename std::tuple_element<I, T>::type>::type
   type;

   };
   template< std::size_t I, class T >

   class tuple_element< I, volatile T > {
   typedef typename                                                   \fB(4)\fP \fI(since C++11)\fP
   std::add_volatile<typename std::tuple_element<I, T>::type>::type
   type;

   };
   template< size_t I, class T >

   class tuple_element< I, const volatile T > {
   typedef typename                                                   \fB(5)\fP \fI(since C++11)\fP
   std::add_cv<typename std::tuple_element<I, T>::type>::type type;

   };

   Provides compile-type indexed access to the types of the elements of the tuple.

.SH Contents

     • 1 Member types
     • 2 Possible implementation
     • 3 Example
     • 4 See also

.SH Member types

   Member type Definition
   type        the type of Ith element of the tuple, where I is in [0,
               sizeof...(Types))

.SH Possible implementation

   template< std::size_t I, class T >
   struct tuple_element;

   // recursive case
   template< std::size_t I, class Head, class... Tail >
   struct tuple_element<I, std::tuple<Head, Tail...>>
       : std::tuple_element<I-1, std::tuple<Tail...>> { };

   // base case
   template< class Head, class... Tail >
   struct tuple_element<0, std::tuple<Head, Tail...>> {
      typedef Head type;
   };

.SH Example

   
// Run this code

 #include <tuple>

 template <class... Args>
 struct type_list
 {
    template <std::size_t N>
    using type = typename std::tuple_element<N, std::tuple<Args...>>::type;
 };

 int main()
 {
    type_list<int, char, bool>::type<2> x = true;
 }

.SH See also

   std::tuple_element<std::array> obtains the type of the elements of array
                                  \fI(class template specialization)\fP
   std::tuple_element<std::pair>  obtains the type of the elements of pair
   \fI(C++11)\fP                        \fI(class template specialization)\fP
