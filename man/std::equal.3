.TH std::equal 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt1, class InputIt2 >

   bool equal( InputIt1 first1, InputIt1 last1,                      \fB(1)\fP

   InputIt2 first2 );
   template< class InputIt1, class InputIt2, class BinaryPredicate >

   bool equal( InputIt1 first1, InputIt1 last1,                      \fB(2)\fP

   InputIt2 first2, BinaryPredicate p );
   template< class InputIt1, class InputIt2 >

   bool equal( InputIt1 first1, InputIt1 last1,                      \fB(3)\fP \fI(since C++14)\fP

   InputIt2 first2, InputIt2 last2 );
   template< class InputIt1, class InputIt2, class BinaryPredicate >

   bool equal( InputIt1 first1, InputIt1 last1,                      \fB(4)\fP \fI(since C++14)\fP
   InputIt2 first2, InputIt2 last2,

   BinaryPredicate p );

   Returns true if the ranges [first1, last1) and [first2, last2) are considered equal,
   where last2 denotes first2 + (last1 - first1) if it was not given. The overloads \fB(1)\fP
   and \fB(3)\fP use operator== to compare the elements, whereas overloads \fB(2)\fP and \fB(4)\fP use
   the given binary predicate p.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Notes
     * 4 Complexity
     * 5 Possible implementation
     * 6 Example

.SH Parameters

   first1, last1 - the first range of the elements to compare
   first2, last2 - the second range of the elements to compare
                   binary predicate which returns true if the elements should be
                   treated as equal.

                   The signature of the predicate function should be equivalent to the
                   following:

                   bool pred(const Type1 &a, const Type2 &b);
   p             -
                   The signature does not need to have const &, but the function must
                   not modify the objects passed to it.
                   The types Type1 and Type2 must be such that objects of types
                   InputIt1 and InputIt2 can be dereferenced and then implicitly
                   converted to Type1 and Type2 respectively.

                   
.SH Type requirements
   -
   InputIt1, InputIt2 must meet the requirements of InputIterator.

.SH Return value

   If last1 - first1 != last2 - first2, returns false

   Otherwise, if the elements in the two ranges are equal, returns true.

   Otherwise returns false.

.SH Notes

   std::equal may not be used to compare the ranges formed by the iterators from
   std::unordered_set, std::unordered_multiset, std::unordered_map, or
   std::unordered_multimap because the order in which the elements are stored in those
   containers may be different even if the two containers store the same elements.

   When comparing entire containers for equality, operator== is usually preferred.

.SH Complexity

   At most min(last1 - first1, last2 - first2) applications of the predicate p.

   However, if InputIt1 and InputIt2 meet the requirements of RandomAccessIterator and
   last1 - first1 != last2 - first2 then no applications of the predicate p are made.

.SH Possible implementation

.SH First version
   template<class InputIt1, class InputIt2>
   bool equal(InputIt1 first1, InputIt1 last1,
              InputIt2 first2)
   {
       for (; first1 != last1; ++first1, ++first2) {
           if (!(*first1 == *first2)) {
               return false;
           }
       }
       return true;
   }
.SH Second version
   template<class InputIt1, class InputIt2, class BinaryPredicate>
   bool equal(InputIt1 first1, InputIt1 last1,
              InputIt2 first2, BinaryPredicate p)
   {
       for (; first1 != last1; ++first1, ++first2) {
           if (!p(*first1, *first2)) {
               return false;
           }
       }
       return true;
   }

.SH Example

   The following code uses equal() to test if a string is a palindrome

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <string>

 void test(const std::string& s)
 {
     if(std::equal(s.begin(), s.begin() + s.size()/2, s.rbegin())) {
         std::cout << "\\"" << s << "\\" is a palindrome\\n";
     } else {
         std::cout << "\\"" << s << "\\" is not palindrome\\n";
     }
 }
 int main()
 {
     test("radar");
     test("hello");
 }

.SH Output:

 "radar" is a palindrome
 "hello" is not palindrome

   find
   find_if                 finds the first element satisfying specific criteria
   find_if_not             \fI(function template)\fP
   \fI(C++11)\fP
                           returns true if one range is lexicographically less than
   lexicographical_compare another
                           \fI(function template)\fP
   mismatch                finds the first position where two ranges differ
                           \fI(function template)\fP
   search                  searches for a range of elements
                           \fI(function template)\fP
