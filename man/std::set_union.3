.TH std::set_union 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt1, class InputIt2, class OutputIt >

   OutputIt set_union( InputIt1 first1, InputIt1 last1,       \fB(1)\fP
                       InputIt2 first2, InputIt2 last2,

                       OutputIt d_first );
   template< class InputIt1, class InputIt2,

             class OutputIt, class Compare >
   OutputIt set_union( InputIt1 first1, InputIt1 last1,       \fB(2)\fP
                       InputIt2 first2, InputIt2 last2,

                       OutputIt d_first, Compare comp );

   Constructs a sorted range beginning at d_first consisting of all elements present in
   one or both sorted ranges [first1, last1) and [first2, last2).

   1) Expects both input ranges to be sorted with operator<
   2) Expects them to be sorted with the given comparison function comp

   If some element is found m times in [first1, last1) and n times in [first2, last2),
   then all m elements will be copied from [first1, last1) to d_first, preserving
   order, and then exactly std::max(n-m, 0) elements will be copied from [first2,
   last2) to d_first, also preserving order.

   The resulting range cannot overlap with either of the input ranges.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Complexity
     • 4 Possible implementation
     • 5 Example
     • 6 See also

.SH Parameters

   first1, last1 - the first input sorted range
   first2, last2 - the second input sorted range
                   comparison function object (i.e. an object that satisfies the
                   requirements of Compare) which returns true if the first argument
                   is less (i.e. is ordered before) the second element.

                   The signature of the comparison function should be equivalent to the
                   following:
   comp          -
                    bool cmp(const Type1 &a, const Type2 &b);

                   The signature does not need to have const &, but the function object
                   must not modify the objects passed to it.
                   The types Type1 and Type2 must be such that objects of types
                   InputIt1 and InputIt2 can be dereferenced and then implicitly
                   converted to Type1 and Type2 respectively. 
.SH Type requirements
   -
   InputIt1 must meet the requirements of InputIterator.
   -
   InputIt2 must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.

.SH Return value

   Iterator past the end of the constructed range.

.SH Complexity

   At most 2·(N[1]+N[2]-1) comparisons, where N[1] = std::distance(first1, last1) and
   N[2] = std::distance(first2, last2).

.SH Possible implementation

.SH First version
   template<class InputIt1, class InputIt2, class OutputIt>
   OutputIt set_union(InputIt1 first1, InputIt1 last1,
                      InputIt2 first2, InputIt2 last2,
                      OutputIt d_first)
   {
       for (; first1 != last1; ++d_first) {
           if (first2 == last2)
               return std::copy(first1, last1, d_first);
           if (*first2 < *first1) {
               *d_first = *first2++;
           } else {
               *d_first = *first1;
               if (!(*first1 < *first2))
                   ++first2;
               ++first1;
           }
       }
       return std::copy(first2, last2, d_first);
   }
.SH Second version
   template<class InputIt1, class InputIt2,
            class OutputIt, class Compare>
   OutputIt set_union(InputIt1 first1, InputIt1 last1,
                      InputIt2 first2, InputIt2 last2,
                      OutputIt d_first, Compare comp)
   {
       for (; first1 != last1; ++d_first) {
           if (first2 == last2)
               return std::copy(first1, last1, d_first);
           if (comp(*first2, *first1)) {
               *d_first = *first2++;
           } else {
               *d_first = *first1;
               if (!comp(*first1, *first2))
                   ++first2;
               ++first1;
           }
       }
       return std::copy(first2, last2, d_first);
   }

.SH Example

   Example with vectors :

   
// Run this code

 #include <vector>
 #include <set>
 #include <iostream>
 #include <algorithm>
 #include <iterator>
  
 int main()
 {
     std::vector<int> v1 = {1, 2, 3, 4, 5};
     std::vector<int> v2 = {      3, 4, 5, 6, 7};
     std::vector<int> dest1;
  
     std::set_union(v1.begin(), v1.end(),
                    v2.begin(), v2.end(),
                    std::back_inserter(dest1));
  
     for (const auto &i : dest1) {
         std::cout << i << ' ';
     }
     std::cout << '\\n';
 }

.SH Output:

 1 2 3 4 5 6 7

.SH See also

   includes                 returns true if one set is a subset of another
                            \fI(function template)\fP
   set_difference           computes the difference between two sets
                            \fI(function template)\fP
   set_intersection         computes the intersection of two sets
                            \fI(function template)\fP
   set_symmetric_difference computes the symmetric difference between two sets
                            \fI(function template)\fP
