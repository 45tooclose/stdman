.TH std::memcpy 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cstring>
   void* memcpy( void* dest, const void* src, std::size_t count );

   Copies count bytes from the object pointed to by src to the object pointed to by
   dest.

   If the objects overlap, the behavior is undefined. If the objects are not trivially
   copyable (e.g. scalars, arrays, C-compatible structs), the behavior is undefined.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Example
     * 4 See also

.SH Parameters

   dest  - pointer to the memory location to copy to
   src   - pointer to the memory location to copy from
   count - number of bytes to copy

.SH Return value

   dest

.SH Example

   
// Run this code

 #include <iostream>
 #include <cstring>

 int main()
 {
     char source[] = "once upon a midnight dreary...";
     char dest[4];

     std::memcpy(dest, source, sizeof dest);

     for (char c : dest) {
         std::cout << c << '\\n';
     }
 }

.SH Output:

 o
 n
 c
 e

.SH See also

   memmove               moves one buffer to another
                         \fI(function)\fP
   copy                  copies a range of elements to a new location
   copy_if               \fI(function template)\fP
   \fI(C++11)\fP
   copy_backward         copies a range of elements in backwards order
                         \fI(function template)\fP
   is_trivially_copyable checks if a type is trivially copyable
   \fI(C++11)\fP               \fI(class template)\fP
   C documentation for
   memcpy
