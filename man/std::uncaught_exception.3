.TH std::uncaught_exception 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <exception>
   bool uncaught_exception();

   Detects if the current thread has a live exception object, that is, an exception has
   been thrown and not yet entered a matching catch clause, std::terminate or
   std::unexpected. In other words, std::uncaught_exception detects if stack unwinding
   is currently in progress.

   Sometimes it's safe to throw an exception even while std::uncaught_exception() ==
   true. For example, if stack unwinding causes a stack-allocated object to be
   destructed, the destructor for that object could run code that throws an exception
   as long as the exception is caught by some catch block before escaping the
   destructor.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 Example
     * 5 See also
     * 6 External links

.SH Parameters

   \fI(none)\fP

.SH Return value

   true if stack unwinding is currently in progress in this thread.

.SH Exceptions

   \fI(none)\fP                  \fI(until C++11)\fP
   noexcept specification: \fI(since C++11)\fP
   noexcept

.SH Example

   
// Run this code

 #include <iostream>
 #include <exception>
 #include <stdexcept>

 struct Foo {
     ~Foo() {
         if (std::uncaught_exception()) {
             std::cout << "~Foo() called during stack unwinding\\n";
         } else {
             std::cout << "~Foo() called normally\\n";
         }
     }
 };
 int main()
 {
     Foo f;
     try {
         Foo f;
         std::cout << "Exception thrown\\n";
         throw std::runtime_error("test exception");
     } catch (const std::exception& e) {
         std::cout << "Exception caught: " << e.what() << '\\n';
     }
 }

.SH Output:

 Exception thrown
 ~Foo() called during stack unwinding
 Exception caught: test exception
 ~Foo() called normally

.SH See also

   terminate     function called when exception handling fails
                 \fI(function)\fP
   exception_ptr shared pointer type for handling exception objects
   \fI(C++11)\fP       \fI(typedef)\fP

.SH External links

   GOTW issue 47: Uncaught Exceptions
