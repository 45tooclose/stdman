.TH std::size_t 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::size_t \- std::size_t

.SH Synopsis
   Defined in header <cstddef>
   Defined in header <cstdio>
   Defined in header <cstring>
   Defined in header <ctime>
   Defined in header <cstdlib>                 \fI(since C++11)\fP
   typedef /*implementation-defined*/ size_t;

   std::size_t is the unsigned integer type of the result of the sizeof operator
   as well as the sizeof... operator and the alignof operator
   \fI(since C++11)\fP.

.SH Notes

   std::size_t can store the maximum size of a theoretically possible object of any
   type (including array).
   A type whose size cannot be represented by std::size_t is ill-formed
   \fI(since C++14)\fP On many platforms (an exception are systems with segmented addressing)
   std::size_t can safely store the value of any non-member pointer, in which case it
   is synonymous with std::uintptr_t.

   std::size_t is commonly used for array indexing and loop counting. Programs that use
   other types, such as unsigned int, for array indexing may fail on, e.g. 64-bit
   systems when the index exceeds UINT_MAX or if it relies on 32-bit modular
   arithmetic.

   When indexing C++ containers, such as std::string, std::vector, etc, the appropriate
   type is the member typedef size_type provided by such containers. It is usually
   defined as a synonym for std::size_t.

.SH Example

   
// Run this code

 #include <cstddef>
  
 int main()
 {
     const std::size_t N = 100;
     int* a = new int[N];
  
     for (std::size_t n = 0; n < N; ++n)
         a[n] = n;
  
     delete[] a;
 }

.SH See also

   ptrdiff_t signed integer type returned when subtracting two pointers
             \fI(typedef)\fP 
             byte offset from the beginning of a standard-layout type to specified
   offsetof  member
             \fI(function macro)\fP 
   C documentation for
   size_t
