.TH std::independent_bits_engine 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <random>
   template<

   class Engine,
   std::size_t W,                    \fI(since C++11)\fP
   class UIntType

   > class independent_bits_engine;

   independent_bits_engine is a random number engine adaptor that produces random
   numbers with different number of bits than that of the wrapped engine.

.SH Contents

     * 1 Template parameters
     * 2 Member types
     * 3 Member functions

          * 3.1 Generation
          * 3.2 Characteristics

     * 4 Non-member functions

.SH Template parameters

   Engine   - the type of the wrapped engine
   W        - the number of bits the generated numbers should have
   UIntType - the type of the generated random numbers. The type must be unsigned
              integral type.
.SH Type requirements
   -
   Engine must meet the requirements of RandomNumberEngine.

.SH Member types

   Member type Definition
   result_type UIntType

.SH Member functions

   constructor   constructs the engine adaptor
                 \fI(public member function)\fP
   seed          sets the state of the underlying engine
                 \fI(public member function)\fP
   base          returns the underlying engine
                 \fI(public member function)\fP
.SH Generation
                 advances the state of the underlying engine and returns the generated
   operator()    value
                 \fI(public member function)\fP
   discard       advances the adaptor's state by a specified amount
                 \fI(public member function)\fP
.SH Characteristics
   min           gets the smallest possible value in the output range (always zero).
   \fB[static]\fP      \fI(public static member function)\fP
   max           gets the largest possible value in the output range (always 2w
   \fB[static]\fP      -1).
                 \fI(public static member function)\fP

.SH Non-member functions

   operator== compares the internal states of the adaptors and underlying engines
   operator!= \fI(function)\fP
   operator<< performs stream input and output on pseudo-random number engine adaptor
   operator>> \fI(function)\fP
