.TH std::minmax 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::minmax \- std::minmax

.SH Synopsis
   Defined in header <algorithm>
   template< class T >                                                \fB(1)\fP \fI(since C++11)\fP
   std::pair<const T&,const T&> minmax( const T& a, const T& b );
   template< class T, class Compare >
   std::pair<const T&,const T&> minmax( const T& a, const T& b,       \fB(2)\fP \fI(since C++11)\fP
   Compare comp );
   template< class T >                                                \fB(3)\fP \fI(since C++11)\fP
   std::pair<T,T> minmax( std::initializer_list<T> ilist);
   template< class T, class Compare >
   std::pair<T,T> minmax( std::initializer_list<T> ilist, Compare     \fB(4)\fP \fI(since C++11)\fP
   comp );

   Returns the lowest and the greatest of the given values.

   1-2) Returns the smaller and the greater of a and b.
   3-4) Returns the smallest and the greatest of the values in initializer list ilist.

   The (1,3) versions use operator< to compare the values, whereas the (2,4) versions
   use the given comparison function comp.

.SH Parameters

   a, b  - the values to compare
   ilist - initializer list with the values to compare
           comparison function object (i.e. an object that satisfies the requirements
           of Compare) which returns true if if a is less than b.

           The signature of the comparison function should be equivalent to the
           following:
   comp  -
            bool cmp(const Type1 &a, const Type2 &b);

           The signature does not need to have const &, but the function object must
           not modify the objects passed to it.
           The types Type1 and Type2 must be such that an object of type T can be
           implicitly converted to both of them. 
.SH Type requirements
   -
   T must meet the requirements of LessThanComparable. for the overloads \fB(1)\fP and \fB(3)\fP
   -
   T must meet the requirements of CopyConstructible. for the overloads \fB(3)\fP and \fB(4)\fP

.SH Return value

   1-2) Returns the result of std::make_pair(a, b) if a<b or if a is equivalent to b.
   Returns the result of std::make_pair(b, a) if b<a.
   3-4) A pair with the smallest value in ilist as the first element and the greatest
   as the second. If several elements are equivalent to the smallest, the leftmost such
   element is returned. If several elements are equivalent to the largest, the
   rightmost such element is returned.

.SH Complexity

   1-2) Constant
   3-4) Linear in ilist.size()

.SH Possible implementation

.SH First version
   template<class T>
   std::pair<const T&, const T&> minmax(const T& a, const T& b)
   {
       return (b < a) ? std::make_pair(b, a)
                      : std::make_pair(a, b);
   }
.SH Second version
   template<class T, class Compare>
   std::pair<const T&, const T&> minmax(const T& a, const T& b, Compare comp)
   {
       return comp(b, a) ? std::make_pair(b, a)
                         : std::make_pair(a, b);
   }
                                 Third version
   template< class T >
   std::pair<T, T> minmax( std::initializer_list<T> ilist)
   {
       auto p = std::minmax_element(ilist.begin(), ilist.end());
       return std::make_pair(*p.first, *p.second);
   }
                                 Fourth version
   template< class T, class Compare >
   std::pair<T, T> minmax( std::initializer_list<T> ilist, Compare comp )
   {
       auto p = std::minmax_element(ilist.begin(), ilist.end(), comp);
       return std::make_pair(*p.first, *p.second);
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>
 #include <cstdlib>
 #include <ctime>
  
 int main()
 {
     std::vector<int> v {3, 1, 4, 1, 5, 9, 2, 6};
     std::srand(std::time(0));
     std::pair<int, int> bounds = std::minmax(std::rand() % v.size(),
                                              std::rand() % v.size());
  
     std::cout << "v[" << bounds.first << "," << bounds.second << "]: ";
     for (int i = bounds.first; i < bounds.second; ++i) {
         std::cout << v[i] << ' ';
     }
     std::cout << '\\n';
 }

.SH Possible output:

 v[2,7]: 4 1 5 9 2

.SH See also

   min returns the smaller of two elements
       \fI(function template)\fP 
   max returns the larger of two elements
       \fI(function template)\fP 
