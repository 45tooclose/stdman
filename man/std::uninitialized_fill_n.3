.TH std::uninitialized_fill_n 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <memory>
   template< class ForwardIt, class Size, class T >
   void uninitialized_fill_n( ForwardIt first, Size count, const T& value )

   Copies the given value value to the first count elements in an uninitialized memory
   area beginning at first. The elements in the uninitialized area are constructed
   using copy constructor.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Complexity
     • 4 Possible implementation
     • 5 Example
     • 6 See also

.SH Parameters

   first - the beginning of the range of the elements to initialize
   count - number of elements to construct
   value - the value to construct the elements with
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   Iterator to the element past the last element copied.

.SH Complexity

   Linear in count

.SH Possible implementation

   template< class ForwardIt, class Size, class T >
   void uninitialized_fill_n(ForwardIt first, Size count
                             const T& value)
   {
       typedef typename std::iterator_traits<ForwardIt>::value_type Value;
       for (; count > 0; ++first, --count) {
           ::new (static_cast<void*>(&*first)) Value(value);
       }
       return first;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <memory>
 #include <string>
 #include <tuple>

 int main()
 {
     std::string* p;
     std::size_t sz;
     std::tie(p, sz)  = std::get_temporary_buffer<std::string>(4);
     std::uninitialized_fill_n(p, sz, "Example");

     for (std::string* i = p; i != p+sz; ++i) {
         std::cout << *i << '\\n';
         i->~basic_string<char>();
     }
     std::return_temporary_buffer(p);
 }

.SH Output:

.SH Example
.SH Example
.SH Example
.SH Example

.SH See also

   uninitialized_fill copies an object to an uninitialized area of memory
                      \fI(function template)\fP
