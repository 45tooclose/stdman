.TH std::uninitialized_fill_n 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <memory>
   template< class ForwardIt, class Size, class T >
   void uninitialized_fill_n( ForwardIt first, Size count, const T&       \fI(until C++11)\fP
   value );
   template< class ForwardIt, class Size, class T >
   ForwardIt uninitialized_fill_n( ForwardIt first, Size count, const T&  \fI(since C++11)\fP
   value );

   Copies the given value value to the first count elements in an uninitialized memory
   area beginning at first as if by

 for (; n--; ++first)
   ::new (static_cast<void*>(std::addressof(*first)))
      typename iterator_traits<ForwardIterator>::value_type(x);

   If an exception is thrown during the initialization, the function has no effects.

.SH Parameters

   first - the beginning of the range of the elements to initialize
   count - number of elements to construct
   value - the value to construct the elements with
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   \fI(none)\fP                                                \fI(until C++11)\fP
   Iterator to the element past the last element copied. \fI(since C++11)\fP

.SH Complexity

   Linear in count.

.SH Possible implementation

   template< class ForwardIt, class Size, class T >
   ForwardIt uninitialized_fill_n(ForwardIt first, Size count, const T& value)
   {
       typedef typename std::iterator_traits<ForwardIt>::value_type Value;
       ForwardIt current = first;
       try {
           for (; count > 0; ++current, (void) --count) {
               ::new (static_cast<void*>(std::addressof(*current))) Value(value);
           }
           return current;
       } catch (...) {
           for (; first != current; ++first) {
               first->~Value();
           }
           throw;
       }
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <memory>
 #include <string>
 #include <tuple>

 int main()
 {
     std::string* p;
     std::size_t sz;
     std::tie(p, sz) = std::get_temporary_buffer<std::string>(4);
     std::uninitialized_fill_n(p, sz, "Example");

     for (std::string* i = p; i != p+sz; ++i) {
         std::cout << *i << '\\n';
         i->~basic_string<char>();
     }
     std::return_temporary_buffer(p);
 }

.SH Output:

.SH Example
.SH Example
.SH Example
.SH Example

.SH See also

                                                     copies an object to an
   uninitialized_fill                                uninitialized area of memory
                                                     \fI(function template)\fP
   std::experimental::parallel::uninitialised_fill_n parallelized version of
   (parallelism TS)                                  std::uninitialised_fill_n
                                                     \fI(function template)\fP
