.TH std::less_equal 3 "Nov 16 2016" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::less_equal \- std::less_equal

.SH Synopsis
   Defined in header <functional>
   template< class T >             \fI(until C++14)\fP
   struct less_equal;
   template< class T = void >      \fI(since C++14)\fP
   struct less_equal;

   Function object for performing comparisons. Unless specialized, invokes operator<=
   on type T.

.SH Specializations

   A specialization of std::less_equal for any pointer type yields a total order, even
   if the built-in operator<= does not.

   If the function call operator of the specialization std::less_equal<void> calls a
   built-in operator comparing pointers, it yields a total order, even if the built-in
   operator<= does not.
   \fI(since C++14)\fP

   The standard library provides a specialization of std::less_equal when
   T is not specified, which leaves the parameter types and return type
   to be deduced.
                                                                          \fI(since C++14)\fP
                    function object implementing x <= y deducing argument
   less_equal<void> and return types
                    \fI(class template specialization)\fP

.SH Member types

   type                                      definition
   result_type(deprecated in C++17)          bool
   first_argument_type(deprecated in C++17)  T
   second_argument_type(deprecated in C++17) T

.SH Member functions

   operator() checks if the first argument is less than or equal to the second
              \fI(public member function)\fP

std::less_equal::operator()

   bool operator()( const T& lhs, const T& rhs ) const;            \fI(until C++14)\fP
   constexpr bool operator()( const T& lhs, const T& rhs ) const;  \fI(since C++14)\fP

   Checks if lhs is less than or equal to rhs.

.SH Parameters

   lhs, rhs - values to compare

.SH Return value

   true if lhs <= rhs, false otherwise.

.SH Exceptions

   \fI(none)\fP

.SH Possible implementation

   constexpr bool operator()(const T &lhs, const T &rhs) const
   {
       return lhs <= rhs;
   }
