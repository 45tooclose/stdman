.TH std::is_convertible 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_convertible \- std::is_convertible

.SH Synopsis
   Defined in header <type_traits>
   template< class From, class To >  \fI(since C++11)\fP
   struct is_convertible;

   If an imaginary rvalue of type From can be used in the return statement of a
   function returning To, that is, if it can be converted to To using implicit
   conversion, provides the member constant value equal to true. Otherwise value is
   false.

   

.SH Member constants

   value    true if From is convertible to To , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Gives well-defined results for reference types, void types, array types, and
   function types.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 int main()
 {
     class A {};
     class B : public A {};
     class C {};
  
     bool b2a = std::is_convertible<B*, A*>::value;
     bool a2b = std::is_convertible<A*, B*>::value;
     bool b2c = std::is_convertible<B*, C*>::value;
  
     std::cout << std::boolalpha;
     std::cout << b2a << '\\n';
     std::cout << a2b << '\\n';
     std::cout << b2c << '\\n';
 }

.SH Output:

 true
 false
 false

.SH See also

   std::experimental::is_convertible_v variable template alias of
   (library fundamentals TS)           std::is_convertible::value
                                       (variable template) 
