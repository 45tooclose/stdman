.TH std::is_convertible 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class From, class To >  \fI(since C++11)\fP
   struct is_convertible;

   If an imaginary rvalue of type From can be used in the return statement of a
   function returning To, that is, if it can be converted to To using implicit
   conversion, provides the member constant value equal to true. Otherwise value is
   false.

.SH Contents

     * 1 Inherited from
       std::integral_constant

          * 1.1 Member constants
          * 1.2 Member functions
          * 1.3 Member types
          * 1.4 Notes
          * 1.5 Example

Inherited from std::integral_constant

.SH Member constants

   value    true if From is convertible to To , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Gives well-defined results for reference types, void types, array types, and
   function types.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 int main()
 {
     class A {};
     class B : public A {};
     class C {};

     bool b2a = std::is_convertible<B*, A*>::value;
     bool a2b = std::is_convertible<A*, B*>::value;
     bool b2c = std::is_convertible<B*, C*>::value;

     std::cout << std::boolalpha;
     std::cout << b2a << '\\n';
     std::cout << a2b << '\\n';
     std::cout << b2c << '\\n';
 }

.SH Output:

 true
 false
 false
