.TH std::type_info::name 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::type_info::name \- std::type_info::name

.SH Synopsis
   const char* name() const;

   Returns an implementation defined null-terminated character string containing the
   name of the type. No guarantees are given, in particular, the returned string can be
   identical for several types and change between invocations of the same program.

.SH Parameters

   \fI(none)\fP

.SH Return value

   null-terminated character string containing the name of the type.

.SH Notes

   With compilers such as gcc and clang, the returned string can be piped through
   c++filt -t to be converted to human-readable form.

.SH Example

   
// Run this code

 #include <iostream>
 #include <typeinfo>
  
 struct Base { virtual ~Base() = default; };
 struct Derived : Base {};
  
 int main() {
         Base b1;
         Derived d1;
  
         const Base *pb = &b1;
         std::cout << typeid(*pb).name() << '\\n';
         pb = &d1;
         std::cout << typeid(*pb).name() << '\\n';
 }

.SH Possible output:

 4Base
 7Derived

.SH See also

   hash_code returns a value which is identical for the same types
   \fI(C++11)\fP   \fI(public member function)\fP 
