.TH std::sin(std::valarray) 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <valarray>
   template< class T >
   valarray<T> sin( const valarray<T>& va );

   For each element in va computes sine of the value of the element.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Notes
     • 4 Possible implementation
     • 5 Example

.SH Parameters

   va - value array to apply the operation to

.SH Return value

   Value array containing sine of the values in va.

.SH Notes

   Unqualified function (sin) is used to perform the computation. If such function is
   not available, std::sin is used due to argument dependent lookup.

   The function can be implemented with the return type different from std::valarray.
   In this case, the replacement type has the following properties:

     • All const member functions of std::valarray are provided.
     • std::valarray, std::slice_array, std::gslice_array, std::mask_array and
       std::indirect_array can be constructed from the replacement type.
     • All functions accepting a arguments of type const std::valarray& should also
       accept the replacement type.
     • All functions accepting two arguments of type const std::valarray& should accept
       every combination of const std::valarray& and the replacement type.
     • The return type does not add more than two levels of template nesting over the
       most deeply-nested argument type.

.SH Possible implementation

   template<class T>
   valarray<T> sin(const valarray<T>& va)
   {
       valarray<T> other = va;
       for (T &i : other) {
           i = sin(i);
       }
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <valarray>
 #include <cmath>
  
 const double pi = std::acos(-1);
 int main()
 {
     std::valarray<double> v1 = {0, 0.25, 0.5, 0.75, 1};
     std::valarray<double> v2 = std::sin(v1 * pi);
  
     for(double n : v2)
         std::cout << std::fixed << n << ' ';
     std::cout << '\\n';
 }

.SH Output:

 0.000000 0.707107 1.000000 0.707107 0.000000
