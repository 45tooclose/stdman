.TH std::atomic::store 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   void store( T desired, memory_order = std::memory_order_seq_cst );
   void store( T desired, memory_order = std::memory_order_seq_cst )     \fI(since C++11)\fP
   volatile;

   Atomically replaces the current value with desired. Memory is affected according to
   the value of memory_order.

   memory_order must be one of std::memory_order_relaxed, std::memory_order_release or
   std::memory_order_seq_cst. Otherwise the behavior is undefined.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 See also

.SH Parameters

   desired      - the value to store into the atomic variable
   memory_order - memory order constraints to enforce

.SH Return value

   \fI(none)\fP

.SH Exceptions

   noexcept specification:
   noexcept

.SH See also

   operator=             stores a value into an atomic object
                         \fI(public member function)\fP
   atomic_store          atomically replaces the value of the atomic object with a
   atomic_store_explicit non-atomic argument
   \fI(C++11)\fP               \fI(function template)\fP
   \fI(C++11)\fP
