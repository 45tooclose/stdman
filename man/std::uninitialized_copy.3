.TH std::uninitialized_copy 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <memory>
   template< class InputIt, class ForwardIt >
   ForwardIt uninitialized_copy( InputIt first, InputIt last, ForwardIt d_first );

   Copies elements from the range [first, last) to an uninitialized memory area
   beginning at d_first. The elements in the uninitialized area are constructed using
   copy constructor.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Complexity
     * 4 Possible implementation
     * 5 Example
     * 6 See also

.SH Parameters

   first, last   -  the range of the elements to copy
   d_first       -  the beginning of the destination range
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   Iterator to the element past the last element copied.

.SH Complexity

   Linear in the distance between first and last

.SH Possible implementation

   template<class InputIt, class ForwardIt>
   ForwardIt uninitialized_copy(InputIt first, InputIt last, ForwardIt d_first)
   {
       typedef typename std::iterator_traits<ForwardIt>::value_type Value;
       for (; first != last; ++first, ++d_first) {
           ::new (static_cast<void*>(&*d_first)) Value(*first);
       }
       return d_first;
   }

    This section is incomplete
    Reason: The above implementation is only valid if constructing the Value does not
    throw. If it throws, then all previously constructed objects must be destructed.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <memory>
 #include <string>
 #include <tuple>

 int main()
 {
     std::vector<std::string> v = {"This", "is", "an", "example"};

     std::string* p;
     std::size_t sz;
     std::tie(p, sz)  = std::get_temporary_buffer<std::string>(v.size());
     sz = std::min(sz, v.size());

     std::uninitialized_copy(v.begin(), v.begin() + sz, p);

     for (std::string* i = p; i != p+sz; ++i) {
         std::cout << *i << ' ';
         i->~basic_string<char>();
     }
     std::return_temporary_buffer(p);
 }

.SH Output:

 This is an example

.SH See also

   uninitialized_copy_n copies a number of objects to an uninitialized area of memory
   \fI(C++11)\fP              \fI(function template)\fP

.SH Category:

     * Todo with reason
