.TH std::uses_allocator<std::tuple> 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <tuple>
   template< class... Types, class Alloc >
   struct uses_allocator< std::tuple<Types...>, Alloc > : std::true_type  \fI(since C++11)\fP
   { };

   This specialization of std::uses_allocator informs other library components that
   tuples support uses-allocator construction, even though they do not have a nested
   allocator_type.

.SH Contents

     • 1 Inherited from
       std::integral_constant

          • 1.1 Member constants
          • 1.2 Member functions
          • 1.3 Member types
          • 1.4 Example
          • 1.5 See also

Inherited from std::integral_constant

.SH Member constants

   value    true
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 // myalloc is a stateful Allocator with a single-argument constructor
 // that takes an int. It has no default constructor.

     typedef std::vector<int, myalloc<int>> innervector_t;
     typedef std::tuple<int, innervector_t> elem_t;
     typedef std::scoped_allocator_adaptor< myalloc<elem_t>, myalloc<int>> Alloc;
     Alloc a(1,2);
     std::vector<elem_t, Alloc> v(a);
     v.resize(1);                  // uses allocator #1 for elements of v
     std::get<1>(v[0]).resize(10); // uses allocator #2 for innervector_t

.SH See also

   uses_allocator checks if the specified type supports uses-allocator construction
   \fI(C++11)\fP        \fI(class template)\fP
