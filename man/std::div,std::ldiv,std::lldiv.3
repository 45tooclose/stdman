.TH std::div,std::ldiv,std::lldiv 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cstdlib>
   std::div_t     div( int x, int y );
   std::ldiv_t    div( long x, long y );
   std::lldiv_t   div( long long x, long long y );              \fI(since C++11)\fP
   std::ldiv_t   ldiv( long x, long y );
   std::lldiv_t lldiv( long long x, long long y );              \fI(since C++11)\fP
   Defined in header <cinttypes>
   std::imaxdiv_t div( std::intmax_t x, std::intmax_t y );      \fI(since C++11)\fP
   std::imaxdiv_t imaxdiv( std::intmax_t x, std::intmax_t y );  \fI(since C++11)\fP

   Computes quotient and remainder simultaneously.

   The quotient is the algebraic quotient with any fractional part
   discarded (truncated towards zero). The remainder is such that quot *  \fI(until C++11)\fP
   y + rem == x.
   The quotient is the result of the expression x/y. The remainder is the \fI(since C++11)\fP
   result of the expression x%y.

.SH Parameters

   x, y - integer values

.SH Return value

   Structure of type div_t, ldiv_t, ldiv_t, imaxdiv_t defined as:

 struct div_t {
     int quot;   // The quotient
     int rem;    // The remainder
 };
  
 struct ldiv_t {
     long quot;   // The quotient
     long rem;    // The remainder
 };
  
 struct lldiv_t {
     long long quot;   // The quotient
     long long rem;    // The remainder
 };
  
 struct imaxdiv_t {
     std::intmax_t quot;   // The quotient
     std::intmax_t rem;    // The remainder
 };

.SH Notes

   Until C++11, the rounding direction of the quotient and the sign of the remainder in
   the built-in division and remainder operators was implementation-defined if either
   of the operands was negative, but it was well-defined in std::div.

.SH See also

   fmod remainder of the floating point division operation
        \fI(function)\fP 
   C documentation for
   div
