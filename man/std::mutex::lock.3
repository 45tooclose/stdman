.TH std::mutex::lock 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   void lock();  \fI(since C++11)\fP

   Locks the mutex. If another thread has already locked the mutex, a call to lock will
   block execution until the lock is acquired.

   If lock is called by a thread that already owns the mutex, the behavior is
   undefined: the program may deadlock, or, if the implementation can detect the
   deadlock, a resource_deadlock_would_occur error condition may be thrown.

   Prior unlock() operation on the same mutex synchronizes-with (as defined in
   std::memory_order) this operation.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 Notes
     • 5 Example
     • 6 See also

.SH Parameters

   \fI(none)\fP

.SH Return value

   \fI(none)\fP

.SH Exceptions

   Throws std::system_error when errors occur, including errors from the underlying
   operating system that would prevent lock from meeting its specifications. The mutex
   is not locked in the case of any exception being thrown.

.SH Notes

   lock() is usually not called directly: std::unique_lock and std::lock_guard are used
   to manage exclusive locking.

.SH Example

   This example shows how lock and unlock can be used to protect shared data.

   
// Run this code

 #include <iostream>
 #include <chrono>
 #include <thread>
 #include <mutex>

 int g_num = 0;  // protected by g_num_mutex
 std::mutex g_num_mutex;

 void slow_increment(int id)
 {
     for (int i = 0; i < 3; ++i) {
         g_num_mutex.lock();
         ++g_num;
         std::cout << id << " => " << g_num << '\\n';
         g_num_mutex.unlock();

         std::this_thread::sleep_for(std::chrono::seconds(1));
     }
 }

 int main()
 {
     std::thread t1(slow_increment, 0);
     std::thread t2(slow_increment, 1);
     t1.join();
     t2.join();
 }

.SH Possible output:

 0 => 1
 1 => 2
 0 => 3
 1 => 4
 0 => 5
 1 => 6

.SH See also

   try_lock tries to lock the mutex, returns if the mutex is not available
            \fI(public member function)\fP
   unlock   unlocks the mutex
            \fI(public member function)\fP
