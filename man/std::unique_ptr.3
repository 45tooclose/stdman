.TH std::unique_ptr 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unique_ptr \- std::unique_ptr

.SH Synopsis
   Defined in header <memory>
   template<

       class T,                               \fB(1)\fP \fI(since C++11)\fP
       class Deleter = std::default_delete<T>

   > class unique_ptr;
   template <

       class T,                               \fB(2)\fP \fI(since C++11)\fP
       class Deleter

   > class unique_ptr<T[], Deleter>;

   std::unique_ptr is a smart pointer that retains sole ownership of an object through
   a pointer and destroys that object when the unique_ptr goes out of scope. No two
   unique_ptr instances can manage the same object.

   The object is destroyed and its memory deallocated when either of the following
   happens:

     * unique_ptr managing the object is destroyed
     * unique_ptr managing the object is assigned another pointer via operator= or
       reset().

   The object is destroyed using a potentially user-supplied deleter by calling
   Deleter(ptr). The deleter calls the destructor of the object and dispenses the
   memory.

   A unique_ptr may alternatively own no object, in which case it is called empty.

   There are two versions of std::unique_ptr:

   1) Manages the lifetime of a single object (e.g. allocated with new)
   2) Manages the lifetime of a dynamically-allocated array of objects (e.g. allocated
   with new[])

   The class satisfies the requirements of MoveConstructible and MoveAssignable, but
   not the requirements of either CopyConstructible or CopyAssignable.

.SH Type requirements
   -
   Deleter must be FunctionObject or lvalue reference to a FunctionObject or lvalue
   reference to function, callable with an argument of type unique_ptr<T,
   Deleter>::pointer

.SH Notes

   Only non-const unique_ptr can transfer the ownership of the managed object to
   another unique_ptr. The lifetime of an object managed by const std::unique_ptr is
   limited to the scope in which the pointer was created.

   Typical uses of std::unique_ptr include:

     * providing exception safety to classes and functions that handle objects with
       dynamic lifetime, by guaranteeing deletion on both normal exit and exit through
       exception

     * passing ownership of uniquely-owned objects with dynamic lifetime into functions

     * acquiring ownership of uniquely-owned objects with dynamic lifetime from
       functions

     * as the element type in move-aware containers, such as std::vector, which hold
       pointers to dynamically-allocated objects (e.g. if polymorphic behavior is
       desired)

   std::unique_ptr may be constructed for an incomplete type T, such as to facilitate
   the use as a handle in the Pimpl idiom. If the default deleter is used, T must be
   complete at the point in code where the deleter is invoked, which happens in the
   destructor, move assignment operator, and reset member function of std::unique_ptr.
   (Conversely, std::shared_ptr can't be constructed from a raw pointer to incomplete
   type, but can be destroyed where T is incomplete).

   If T is a derived class of some base B, then std::unique_ptr<T> is implicitly
   convertible to std::unique_ptr<B>. The default deleter of the resulting
   std::unique_ptr<B> will use operator delete for B, leading to undefined behavior
   unless the destructor of B is virtual. Note that std::shared_ptr behaves
   differently: std::shared_ptr<B> will use the operator delete for the type T and the
   owned object will be deleted correctly even if the destructor of B is not virtual.

.SH Member types

   Member type  Definition
   pointer      std::remove_reference<Deleter>::type::pointer if that type exists,
                otherwise T*
   element_type T, the type of the object managed by this unique_ptr
   deleter_type Deleter, the function object or lvalue reference to function or to
                function object, to be called from the destructor

.SH Member functions

   constructor   constructs a new unique_ptr
                 \fI(public member function)\fP 
   destructor    destructs the managed object if such is present
                 \fI(public member function)\fP 
   operator=     assigns the unique_ptr
                 \fI(public member function)\fP 
.SH Modifiers
   release       returns a pointer to the managed object and releases the ownership
                 \fI(public member function)\fP 
   reset         replaces the managed object
                 \fI(public member function)\fP 
   swap          swaps the managed objects
                 \fI(public member function)\fP 
.SH Observers
   get           returns a pointer to the managed object
                 \fI(public member function)\fP 
   get_deleter   returns the deleter that is used for destruction of the managed object
                 \fI(public member function)\fP 
   operator bool checks if there is associated managed object
                 \fI(public member function)\fP 
.SH Single-object version, unique_ptr<T>
   operator*     dereferences pointer to the managed object
   operator->    \fI(public member function)\fP 
.SH Array version, unique_ptr<T[]>
   operator[]    provides indexed access to the managed array
                 \fI(public member function)\fP 

.SH Non-member functions

   make_unique                creates a unique pointer that manages a new object
   \fI(C++14)\fP                    \fI(function template)\fP 
   operator==
   operator!=
   operator<                  compares to another unique_ptr or with nullptr
   operator<=                 \fI(function template)\fP 
   operator>
   operator>=
   std::swap(std::unique_ptr) specializes the std::swap algorithm
   \fI(C++11)\fP                    \fI(function template)\fP 

.SH Helper classes

   std::hash<std::unique_ptr> hash support for std::unique_ptr
   \fI(C++11)\fP                    \fI(class template specialization)\fP 

.SH Example

   
// Run this code

 #include <iostream>
 #include <memory>
  
 struct Foo
 {
     Foo()      { std::cout << "Foo::Foo\\n";  }
     ~Foo()     { std::cout << "Foo::~Foo\\n"; }
     void bar() { std::cout << "Foo::bar\\n";  }
 };
  
 void f(const Foo &)
 {
     std::cout << "f(const Foo&)\\n";
 }
  
 int main()
 {
     std::unique_ptr<Foo> p1(new Foo);  // p1 owns Foo
     if (p1) p1->bar();
  
     {
         std::unique_ptr<Foo> p2(std::move(p1));  // now p2 owns Foo
         f(*p2);
  
         p1 = std::move(p2);  // ownership returns to p1
         std::cout << "destroying p2...\\n";
     }
  
     if (p1) p1->bar();
  
     // Foo instance is destroyed when p1 goes out of scope
 }

.SH Output:

 Foo::Foo
 Foo::bar
 f(const Foo&)
 destroying p2...
 Foo::bar
 Foo::~Foo
