.TH std::is_heap_until 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_heap_until \- std::is_heap_until

.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >                                         \fB(1)\fP \fI(since C++11)\fP
   RandomIt is_heap_until( RandomIt first, RandomIt last );
   template< class RandomIt, class Compare >
   RandomIt is_heap_until( RandomIt first, RandomIt last, Compare     \fB(2)\fP \fI(since C++11)\fP
   comp );

   Examines the range [first, last) and finds the largest range beginning at first
   which is a max heap. The first version of the function uses operator< to compare the
   elements, the second uses the given comparison function comp.

.SH Parameters

   first, last - the range of elements to examine
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less than the second.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type RandomIt
                 can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
   -
   RandomIt must meet the requirements of RandomAccessIterator.

.SH Return value

   The upper bound of the largest range beginning at first which is a max heap. That
   is, the last iterator it for which range [first, it) is a max heap.

.SH Complexity

   Linear in the distance between first and last

.SH Notes

   A max heap is a range of elements [f,l) that has the following properties:

     * *f is the largest element in the range
     * a new element can be added using std::push_heap()
     * the first element can be removed using std::pop_heap()

   The actual arrangement of the elements is implementation defined.

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <vector>
  
 int main()
 {
     std::vector<int> v { 3, 1, 4, 1, 5, 9 };
  
     std::make_heap(v.begin(), v.end());
  
     // probably mess up the heap
     v.push_back(2);
     v.push_back(6);
  
     auto heap_end = std::is_heap_until(v.begin(), v.end());
  
     std::cout << "all of v: ";
     for (auto i : v) std::cout << i << ' ';
     std::cout << '\\n';
  
     std::cout << "only heap: ";
     for (auto i = v.begin(); i != heap_end; ++i) std::cout << *i << ' ';
     std::cout << '\\n';
 }

.SH Output:

 all of v:  9 5 4 1 1 3 2 6
 only heap: 9 5 4 1 1 3 2

.SH See also

   is_heap                                    checks if the given range is a max heap
   \fI(C++11)\fP                                    \fI(function template)\fP 
   std::experimental::parallel::is_heap_until parallelized version of
   (parallelism TS)                           std::is_heap_until
                                              \fI(function template)\fP 
