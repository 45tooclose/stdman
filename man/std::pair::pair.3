.TH std::pair::pair 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   pair();                                             \fI(until C++11)\fP
   constexpr pair();                                   \fI(since C++11)\fP
   pair( const T1& x, const T2& y );               \fB(2)\fP \fI(until C++14)\fP
   constexpr pair( const T1& x, const T2& y );     \fB(2)\fP \fI(since C++14)\fP
   template< class U1, class U2 >                  \fB(3)\fP \fI(since C++11)\fP
   pair( U1&& x, U2&& y );                             \fI(until C++14)\fP
   template< class U1, class U2 >                  \fB(3)\fP \fI(since C++14)\fP
   constexpr pair( U1&& x, U2&& y );
   template< class U1, class U2 >                  \fB(4)\fP \fI(until C++14)\fP
   pair( const pair<U1, U2>& p );
   template< class U1, class U2 >                  \fB(4)\fP \fI(since C++14)\fP
   constexpr pair( const pair<U1, U2>& p );    \fB(1)\fP
   template< class U1, class U2 >                  \fB(5)\fP \fI(since C++11)\fP
   pair( pair<U1, U2>&& p );                           \fI(until C++14)\fP
   template< class U1, class U2 >                  \fB(5)\fP \fI(since C++14)\fP
   constexpr pair( pair<U1, U2>&& p );
   template< class... Args1, class... Args2 >

   pair( std::piecewise_construct_t,               \fB(6)\fP \fI(since C++11)\fP
   std::tuple<Args1...> first_args,

   std::tuple<Args2...> second_args );
   pair( const pair& p ) = default;                \fB(7)\fP
   pair( pair&& p ) = default;                     \fB(8)\fP \fI(since C++11)\fP

   Constructs a new pair.

   1) Default constructor. Value-initializes both elements of the pair, first and
   second.

   2) Initializes first with x and second with y.

   3) Initializes first with std::forward<U1>(x) and second with std::forward<U2>(y).

   4) Initializes first with p.first and second with p.second.

   5) Initializes first with std::move<U1>(p.first) and second with
   std::move<U2>(p.second).

   6) Forwards the elements of first_args to the constructor of first and forwards the
   elements of second_args to the constructor of second. This is the only non-default
   constructor that can be used to create a pair of non-copyable non-movable types.

   7) Copy constructor is defaulted, and is constexpr if copying of both elements
   satisfies the requirements on constexpr functions.

   8) Move constructor is defaulted, and is constexpr if moving of both elements
   satisfies the requirements on constexpr functions.

.SH Contents

     * 1 Parameters
     * 2 Exceptions
     * 3 Example
     * 4 See also

.SH Parameters

   x           - value to initialize the first element of this pair
   y           - value to initialize the second element of this pair
   p           - pair of values used to initialize both elements of this pair
   first_args  - tuple of constructor arguments to initialize the first element of this
                 pair
   second_args - tuple of constructor arguments to initialize the second element of
                 this pair

.SH Exceptions

   Does not throw exceptions unless one of the specified operations (e.g. constructor
   of an element) throws.

.SH Example

   
// Run this code

 #include <utility>
 #include <string>
 #include <complex>
 #include <tuple>
 #include <iostream>

 int main()
 {
     std::pair<int, float> p1;
     std::cout << "Value-initialized: "
               << p1.first << ", " << p1.second << '\\n';

     std::pair<int, double> p2(42, 0.123);
     std::cout << "Initialized with two values: "
               << p2.first << ", " << p2.second << '\\n';

     std::pair<char, int> p4(p2);
     std::cout << "Implicitly converted: "
               << p4.first << ", " << p4.second << '\\n';

     std::pair<std::complex<double>, std::string> p6(
                     std::piecewise_construct,
                     std::forward_as_tuple(0.123, 7.7),
                     std::forward_as_tuple(10, 'a'));
     std::cout << "Piecewise constructed: "
               << p6.first << ", " << p6.second << '\\n';
 }

.SH Output:

 Value-initialized: 0, 0
 Initialized with two values: 42, 0.123
 Implicitly converted: *, 0
 Piecewise constructed: (0.123,7.7), aaaaaaaaaa

.SH See also

   make_pair creates a pair object of type, defined by the argument types
             \fI(function template)\fP
