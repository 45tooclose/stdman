.TH std::atomic_load,std::atomic_load_explicit 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <atomic>
   template< class T >
   T atomic_load( std::atomic<T>* obj );
   template< class T >
   T atomic_load( volatile std::atomic<T>* obj );
   template< class T >

   T atomic_load_explicit( std::atomic<T>* obj,
                                                  \fB(1)\fP \fI(since C++11)\fP
   std::memory_order order );
   template< class T >                                              \fB(2)\fP \fI(since C++11)\fP

   T atomic_load_explicit( volatile
   std::atomic<T>* obj,

   std::memory_order order );

   1) Atomically obtains the value pointed to by obj as if by obj->load()
   2) Atomically obtains the value pointed to by obj as if by obj->load(order)

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 See also

.SH Parameters

   obj   - pointer to the atomic object to modify
           the memory sycnhronization ordering for this operation: only
   order - std::memory_order_relaxed, std::memory_order_consume,
           std::memory_order_acquire and std::memory_order_seq_cst are permitted.

.SH Return value

   The value that is held by the atomic object pointed to by obj

.SH Exceptions

   noexcept specification:
   noexcept

.SH See also

   load                                       atomically obtains the value of the
   \fI(C++11)\fP                                    atomic object
                                              \fI(public member function of std::atomic)\fP
   atomic_store                               atomically replaces the value of the
   atomic_store_explicit                      atomic object with a non-atomic argument
   \fI(C++11)\fP                                    \fI(function template)\fP
   \fI(C++11)\fP
   memory_order                               defines memory ordering constraints for
   \fI(C++11)\fP                                    the given atomic operation
                                              \fI(typedef)\fP
   std::atomic_load(std::shared_ptr)          specializes atomic operations for
   std::atomic_load_explicit(std::shared_ptr) std::shared_ptr
                                              \fI(function template)\fP
   C documentation for
   atomic_load,
   atomic_load_explicit
