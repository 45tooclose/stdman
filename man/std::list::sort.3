.TH std::list::sort 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   void sort();               \fB(1)\fP
   template< class Compare >  \fB(2)\fP
   void sort( Compare comp );

   Sorts the elements in ascending order. The order of equal elements is preserved. The
   first version uses operator< to compare the elements, the second version uses the
   given comparison function comp.

.SH Parameters

          comparison function object (i.e. an object that satisfies the requirements of
          Compare) which returns true if the first argument is less (i.e. is ordered
          before) the second element.

          The signature of the comparison function should be equivalent to the
          following:
   comp -
           bool cmp(const Type1 &a, const Type2 &b);

          The signature does not need to have const &, but the function object must not
          modify the objects passed to it.
          The types Type1 and Type2 must be such that an object of type
          list<T,Allocator>::const_iterator can be dereferenced and then implicitly
          converted to both of them. 

.SH Return value

   \fI(none)\fP

.SH Example

   
// Run this code

 #include <iostream>
 #include <functional>
 #include <list>
  
 std::ostream& operator<<(std::ostream& ostr, const std::list<int>& list)
 {
     for (auto &i : list) {
         ostr << " " << i;
     }
     return ostr;
 }
  
 int main()
 {
     std::list<int> list = { 8,7,5,9,0,1,3,2,6,4 };
  
     std::cout << "before:     " << list << "\\n";
     list.sort();
     std::cout << "ascending:  " << list << "\\n";
     list.sort(std::greater<int>());
     std::cout << "descending: " << list << "\\n";
 }

.SH Output:

 before:      8 7 5 9 0 1 3 2 6 4
 ascending:   0 1 2 3 4 5 6 7 8 9
 descending:  9 8 7 6 5 4 3 2 1 0

.SH Complexity

   N Â· log(N) comparisons, where N is the size of the container.
