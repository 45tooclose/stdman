.TH std::strtof,std::strtod,std::strtold 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cstdlib>
   float strtof( const char* str, char** str_end );         \fI(since C++11)\fP
   double strtod( const char* str, char** str_end );
   long double strtold( const char* str, char** str_end );  \fI(since C++11)\fP

   Interprets a floating point value in a byte string pointed to by str.

   Function discards any whitespace characters (as determined by std::isspace()) until
   first non-whitespace character is found. Then it takes as many characters as
   possible to form a valid floating point representation and converts them to floating
   point value. The valid floating point value can be one of the following:

     * decimal floating point expression. It consists of the following parts:

     * (optional) plus or minus sign
     * nonempty sequence of decimal digits optionally containing a decimal point
       character (defines significand)
     * (optional) e or E followed with optional minus or plus sign and nonempty
       sequence of decimal digits (defines exponent)

     * binary floating point expression. It consists of the following parts:

     * (optional) plus or minus sign
     * 0x or 0X
     * nonempty sequence of hexadecimal digits optionally containing a decimal point
       character (defines significand)
     * (optional) p or P followed with optional minus or plus sign and nonempty
       sequence of decimal digits (defines exponent)

     * infinity expression. It consists of the following parts:

     * (optional) plus or minus sign
     * INF or INFINITY ignoring case

     * not-a-number expression. It consists of the following parts:

     * (optional) plus or minus sign
     * NAN or NAN(char_sequence) ignoring case of the NAN part. char_sequence can only
       contain alphanumeric characters. The result is a quiet NaN floating point value.

   The functions sets the pointer pointed to by str_end to point to the character past
   the last character interpreted. If str_end is NULL, it is ignored.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Example
     * 4 See also

.SH Parameters

   str     - pointer to the null-terminated byte string to be interpreted
   str_end - pointer to a pointer to character.

.SH Return value

   Floating point value corresponding to the contents of str on success. If the
   converted value falls out of range of corresponding return type, range error occurs
   and HUGE_VAL, HUGE_VALF or HUGE_VALL is returned. If no conversion can be performed,
   0 is returned.

.SH Example

   
// Run this code

 #include <cstdlib>
 #include <iostream>

 int main()
 {
     std::cout << std::strtod("0.0000000123", nullptr) << "\\n";

     // the second arg of strto* is non-const. We must copy the string
     char src[] = "0.012  15e16 -0x1afp-2 inF Nan";
     char* c = src;

     std::cout << std::strtod(c, &c) << "\\n";
     std::cout << std::strtod(c, &c) << "\\n";
     std::cout << std::strtod(c, &c) << "\\n";
     std::cout << std::strtod(c, &c) << "\\n";
     std::cout << std::strtod(c, &c) << "\\n";
 }

.SH Output:

 1.23e-08
 0.012
 1.5e+17
 -107.75
 inf
 nan

.SH See also

   atof converts a byte string to a floating point value
        \fI(function)\fP
   C documentation for
   strtof,
   strtod,
   strtold
