.TH std::vector::erase 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   iterator erase( iterator pos );                          \fI(until C++11)\fP
   iterator erase( const_iterator pos );                    \fI(since C++11)\fP
   iterator erase( iterator first, iterator last ); \fB(1)\fP                   \fI(until C++11)\fP
   iterator erase( const_iterator first,                \fB(2)\fP               \fI(since C++11)\fP
   const_iterator last );

   Removes specified elements from the container.

   1) Removes the element at pos.
   2) Removes the elements in the range [first; last).

   Invalidates iterators and references at or after the point of the erase, including
   the end() iterator.

   The iterator pos must be valid and dereferenceable. Thus the end() iterator (which
   is valid, but is not dereferencable) cannot be used as a value for pos.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Example
     • 4 Complexity
     • 5 See also

.SH Parameters

   pos         - iterator to the element to remove
   first, last - range of elements to remove

.SH Return value

   Iterator following the last removed element.

.SH Example

   
// Run this code

 #include <vector>
 #include <iostream>


 int main( )
 {
     std::vector<int> c{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
     for (auto &i : c) {
         std::cout << i << " ";
     }
     std::cout << '\\n';

     c.erase(c.begin());

     for (auto &i : c) {
         std::cout << i << " ";
     }
     std::cout << '\\n';

     c.erase(c.begin()+2, c.begin()+5);

     for (auto &i : c) {
         std::cout << i << " ";
     }
     std::cout << '\\n';
 }

.SH Output:

 0 1 2 3 4 5 6 7 8 9
 1 2 3 4 5 6 7 8 9
 1 2 6 7 8 9

.SH Complexity

   1) Linear in the distance between position and last.
   2) Linear in distance between position and the end of the container.

.SH See also

   clear clears the contents
         \fI(public member function)\fP
