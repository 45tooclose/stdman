.TH std::random_shuffle,std::shuffle 3 "Nov 16 2016" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::random_shuffle,std::shuffle \- std::random_shuffle,std::shuffle

.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >               \fI(until C++17)\fP
   void random_shuffle( RandomIt first, \fB(1)\fP (deprecated in C++14)
   RandomIt last );
   template< class RandomIt, class
   RandomFunc >                                                   \fI(until C++11)\fP
   void random_shuffle( RandomIt first,
   RandomIt last, RandomFunc& r );
   template< class RandomIt, class                                \fI(since C++11)\fP
   RandomFunc >                         \fB(2)\fP                       \fI(until C++17)\fP
   void random_shuffle( RandomIt first,                           (deprecated in C++14)
   RandomIt last, RandomFunc&& r );
   template< class RandomIt, class URBG
   >                                        \fB(3)\fP                   \fI(since C++11)\fP
   void shuffle( RandomIt first,
   RandomIt last, URBG&& g );

   Reorders the elements in the given range [first, last) such that each possible
   permutation of those elements has equal probability of appearance.

   1) The random number generator is implementation-defined, but the function std::rand
   is often used.
   2) The random number generator is the function object r.
   3) The random number generator is the function object g.

.SH Parameters

   first, last - the range of elements to shuffle randomly
                 function object returning a randomly chosen value of type convertible
   r           - to std::iterator_traits<RandomIt>::difference_type in the interval
                 [0,n) if invoked as r(n)
   g           - a UniformRandomBitGenerator whose result type is convertible to
                 std::iterator_traits<RandomIt>::difference_type
.SH Type requirements
   -
   RandomIt must meet the requirements of ValueSwappable and RandomAccessIterator.
   -
   std::remove_reference_t<URBG> must meet the requirements of
   UniformRandomBitGenerator.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in the distance between first and last

.SH Possible implementation

.SH First version
   template< class RandomIt >
   void random_shuffle( RandomIt first, RandomIt last )
   {
       typename std::iterator_traits<RandomIt>::difference_type i, n;
       n = last - first;
       for (i = n-1; i > 0; --i) {
           using std::swap;
           swap(first[i], first[std::rand() % (i+1)]);
       }
   }
.SH Second version
   template<class RandomIt, class RandomFunc>
   void random_shuffle(RandomIt first, RandomIt last, RandomFunc&& r)
   {
       typename std::iterator_traits<RandomIt>::difference_type i, n;
       n = last - first;
       for (i = n-1; i > 0; --i) {
           using std::swap;
           swap(first[i], first[r(i+1)]);
       }
   }
                                  Third version
   template<class RandomIt, class UniformRandomBitGenerator>
   void shuffle(RandomIt first, RandomIt last,
                UniformRandomBitGenerator&& g)
   {
       typedef typename std::iterator_traits<RandomIt>::difference_type diff_t;
       typedef typename std::make_unsigned<diff_t>::type udiff_t;
       typedef typename std::uniform_int_distribution<udiff_t> distr_t;
       typedef typename distr_t::param_type param_t;

       distr_t D;
       diff_t n = last - first;
       for (diff_t i = n-1; i > 0; --i) {
           using std::swap;
           swap(first[i], first[D(g, param_t(0, i))]);
       }
   }

.SH Example

   The following code randomly shuffles the integers 1..10:

   
// Run this code

 #include <random>
 #include <algorithm>
 #include <iterator>
 #include <iostream>

 int main()
 {
     std::vector<int> v = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

     std::random_device rd;
     std::mt19937 g(rd());

     std::shuffle(v.begin(), v.end(), g);

     std::copy(v.begin(), v.end(), std::ostream_iterator<int>(std::cout, " "));
     std::cout << "\\n";
 }

.SH Possible output:

 8 6 10 4 2 3 7 1 9 5

.SH See also

                    generates the next greater lexicographic permutation of a range of
   next_permutation elements
                    \fI(function template)\fP
                    generates the next smaller lexicographic permutation of a range of
   prev_permutation elements
                    \fI(function template)\fP
