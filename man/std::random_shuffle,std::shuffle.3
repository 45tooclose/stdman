.TH std::random_shuffle,std::shuffle 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >                                     \fB(1)\fP
   void random_shuffle( RandomIt first, RandomIt last );
   template< class RandomIt, class RandomFunc >
   void random_shuffle( RandomIt first, RandomIt last,                    \fI(until C++11)\fP
   RandomFunc& r );
   template< class RandomIt, class RandomFunc >                   \fB(2)\fP
   void random_shuffle( RandomIt first, RandomIt last,                    \fI(since C++11)\fP
   RandomFunc&& r );
   template< class RandomIt, class URNG >                             \fB(3)\fP \fI(since C++11)\fP
   void shuffle( RandomIt first, RandomIt last, URNG&& g );

   Reorders the elements in the given range [first, last) such that each possible
   permutation of those elements has equal probability of appearance.

   1) The random number generator is implementation-defined, but the function std::rand
   is often used.
   2) The random number generator is the function object r.
   3) The random number generator is the function object g.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Complexity
     * 4 Possible implementation
     * 5 Example
     * 6 See also

.SH Parameters

   first, last - the range of elements to shuffle randomly
                 function object returning a randomly chosen value of type convertible
   r           - to iterator_traits<RandomIt>::difference_type in the interval [0,n) if
                 invoked as r(n)
                 function object returning a randomly chosen value of type
   g           - URNG::result_type in the interval [g.min(), g.max()] if invoked as g()
                 (e.g. any of the uniform random number generators from <random>)
.SH Type requirements
   -
   RandomIt must meet the requirements of ValueSwappable and RandomAccessIterator.
   -
   URNG must meet the requirements of UniformRandomNumberGenerator.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in the distance between first and last

.SH Possible implementation

.SH First version
   template<class RandomIt, class RandomFunc>
   void random_shuffle(RandomIt first, RandomIt last, RandomFunc&& r)
   {
       typename std::iterator_traits<RandomIt>::difference_type i, n;
       n = last - first;
       for (i = n-1; i > 0; --i) {
           using std::swap;
           swap(first[i], first[r(i+1)]);
       }
   }
.SH Second version
   template<class RandomIt, class UniformRandomNumberGenerator>
   void shuffle(RandomIt first, RandomIt last,
                UniformRandomNumberGenerator&& g)
   {
       typedef typename std::iterator_traits<RandomIt>::difference_type diff_t;
       typedef typename std::make_unsigned<diff_t>::type udiff_t;
       typedef typename std::uniform_int_distribution<udiff_t> distr_t;
       typedef typename distr_t::param_type param_t;

       distr_t D;
       diff_t n = last - first;
       for (diff_t i = n-1; i > 0; --i) {
           using std::swap;
           swap(first[i], first[D(g, param_t(0, i))]);
       }
   }

.SH Example

   The following code randomly shuffles the integers 1..10:

   
// Run this code

 #include <random>
 #include <algorithm>
 #include <iterator>
 #include <iostream>

 int main()
 {
     std::vector<int> v = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

     std::random_device rd;
     std::mt19937 g(rd());

     std::shuffle(v.begin(), v.end(), g);

     copy(v.begin(), v.end(), std::ostream_iterator<int>(std::cout, " "));
     std::cout << "\\n";
 }

.SH Possible output:

 8 6 10 4 2 3 7 1 9 5

.SH See also

                    generates the next greater lexicographic permutation of a range of
   next_permutation elements
                    \fI(function template)\fP
                    generates the next smaller lexicographic permutation of a range of
   prev_permutation elements
                    \fI(function template)\fP
