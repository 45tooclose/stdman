.TH std::inserter 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <iterator>
   template< class Container >
   std::insert_iterator<Container> inserter( Container& c, typename
   Container::iterator i );

   inserter is a convenience function template that constructs a std::insert_iterator
   for the container c and its iterator i with the type deduced from the type of the
   argument.

.SH Parameters

   c - container that supports a insert operation
   i - iterator in c indicating the insertion position

.SH Return value

   A std::insert_iterator which can be used to insert elements into the container c at
   the position indicated by i.

.SH Possible implementation

  template< class Container >
  std::insert_iterator<Container> inserter( Container& c, typename Container::iterator i )
  {
      return std::insert_iterator<Container>(c, i);
  }

.SH Example

   
// Run this code

 #include <iostream>
 #include <list>
 #include <algorithm>
 #include <iterator>
 #include <set>
  
 int main()
 {
     std::list<int> l{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
     std::multiset<int> s;
  
     std::fill_n(std::inserter(l, std::next(l.begin())), 3, -1);
     std::fill_n(std::inserter(s, s.begin()), 3, -1);
  
     for (int n : l) {
         std::cout << n << ' ';
     }
     std::cout << '\\n';
  
     for (int n : s) {
         std::cout << n << ' ';
     }
     std::cout << '\\n';
 }

.SH Output:

 1 -1 -1 -1 2 3 4 5 6 7 8 9 10
 -1 -1 -1

.SH See also

   insert_iterator iterator adaptor for insertion into a container
                   \fI(class template)\fP 
                   creates a std::back_insert_iterator of type inferred from the
   back_inserter   argument
                   \fI(function template)\fP 
                   creates a std::front_insert_iterator of type inferred from the
   front_inserter  argument
                   \fI(function template)\fP 
