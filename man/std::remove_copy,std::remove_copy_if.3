.TH std::remove_copy,std::remove_copy_if 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::remove_copy,std::remove_copy_if \- std::remove_copy,std::remove_copy_if

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class OutputIt, class T >

   OutputIt remove_copy( InputIt first, InputIt last, OutputIt d_first,    \fB(1)\fP

                         const T& value );
   template< class InputIt, class OutputIt, class UnaryPredicate >

   OutputIt remove_copy_if( InputIt first, InputIt last, OutputIt d_first, \fB(2)\fP

                            UnaryPredicate p );

   Copies elements from the range [first, last), to another range beginning at d_first,
   omitting the elements which satisfy specific criteria. The first version ignores the
   elements that are equal to value, the second version ignores the elements for which
   predicate p returns true. Source and destination ranges cannot overlap.

.SH Parameters

   first, last   - the range of elements to copy
   d_first       - the beginning of the destination range.
   value         - the value of the elements not to copy
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   Iterator to the element past the last element copied.

.SH Complexity

   Exactly last - first applications of the predicate.

.SH Possible implementation

.SH First version
   template<class InputIt, class OutputIt, class T>
   OutputIt remove_copy(InputIt first, InputIt last,
                        OutputIt d_first, const T& value)
   {
       for (; first != last; ++first) {
           if (!(*first == value)) {
               *d_first++ = *first;
           }
       }
       return d_first;
   }
.SH Second version
   template<class InputIt, class OutputIt, class UnaryPredicate>
   OutputIt remove_copy_if(InputIt first, InputIt last,
                           OutputIt d_first, UnaryPredicate p)
   {
       for (; first != last; ++first) {
           if (!p(*first)) {
               *d_first++ = *first;
           }
       }
       return d_first;
   }

.SH Example

   The following code outputs a string while erasing the spaces on the fly.

   
// Run this code

 #include <algorithm>
 #include <iterator>
 #include <string>
 #include <iostream>
 int main()
 {
     std::string str = "Text with some   spaces";
     std::cout << "before: " << str << "\\n";
  
     std::cout << "after:  ";
     std::remove_copy(str.begin(), str.end(),
                      std::ostream_iterator<char>(std::cout), ' ');
     std::cout << '\\n';
 }

.SH Output:

 before: Text with some   spaces
 after:  Textwithsomespaces

.SH See also

   remove                                      removes elements satisfying specific
   remove_if                                   criteria
                                               \fI(function template)\fP 
   copy                                        copies a range of elements to a new
   copy_if                                     location
   \fI(C++11)\fP                                     \fI(function template)\fP 
   std::experimental::parallel::remove_copy    parallelized version of std::remove_copy
   (parallelism TS)                            \fI(function template)\fP 
   std::experimental::parallel::remove_copy_if parallelized version of
   (parallelism TS)                            std::remove_copy_if
                                               \fI(function template)\fP 
