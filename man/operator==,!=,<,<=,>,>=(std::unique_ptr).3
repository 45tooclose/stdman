.TH operator==,!=,<,<=,>,>=(std::unique_ptr) 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   template<class T1, class D1, class T2, class D2>
   bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, \fB(1)\fP  \fI(since C++11)\fP
   D2>& y);
   template<class T1, class D1, class T2, class D2>
   bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, \fB(2)\fP  \fI(since C++11)\fP
   D2>& y);
   template<class T1, class D1, class T2, class D2>
   bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2,  \fB(3)\fP  \fI(since C++11)\fP
   D2>& y);
   template<class T1, class D1, class T2, class D2>
   bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, \fB(4)\fP  \fI(since C++11)\fP
   D2>& y);
   template<class T1, class D1, class T2, class D2>
   bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2,  \fB(5)\fP  \fI(since C++11)\fP
   D2>& y);
   template<class T1, class D1, class T2, class D2>
   bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, \fB(6)\fP  \fI(since C++11)\fP
   D2>& y);
   template <class T, class D>                                       \fB(7)\fP  \fI(since C++11)\fP
   bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;
   template <class T, class D>                                       \fB(8)\fP  \fI(since C++11)\fP
   bool operator==(nullptr_t, const unique_ptr<T, D>& x) noexcept;
   template <class T, class D>                                       \fB(9)\fP  \fI(since C++11)\fP
   bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;
   template <class T, class D>                                       \fB(10)\fP \fI(since C++11)\fP
   bool operator!=(nullptr_t, const unique_ptr<T, D>& x) noexcept;
   template <class T, class D>                                       \fB(11)\fP \fI(since C++11)\fP
   bool operator<(const unique_ptr<T, D>& x, nullptr_t);
   template <class T, class D>                                       \fB(12)\fP \fI(since C++11)\fP
   bool operator<(nullptr_t, const unique_ptr<T, D>& y);
   template <class T, class D>                                       \fB(13)\fP \fI(since C++11)\fP
   bool operator<=(const unique_ptr<T, D>& x, nullptr_t);
   template <class T, class D>                                       \fB(14)\fP \fI(since C++11)\fP
   bool operator<=(nullptr_t, const unique_ptr<T, D>& y);
   template <class T, class D>                                       \fB(15)\fP \fI(since C++11)\fP
   bool operator>(const unique_ptr<T, D>& x, nullptr_t);
   template <class T, class D>                                       \fB(16)\fP \fI(since C++11)\fP
   bool operator>(nullptr_t, const unique_ptr<T, D>& y);
   template <class T, class D>                                       \fB(17)\fP \fI(since C++11)\fP
   bool operator>=(const unique_ptr<T, D>& x, nullptr_t);
   template <class T, class D>                                       \fB(18)\fP \fI(since C++11)\fP
   bool operator>=(nullptr_t, const unique_ptr<T, D>& y);

   Compares the pointer values of two unique_ptrs, or a unique_ptr and nullptr.

   1-6) Compares two unique_ptrs
   7-18) Compares a unique_ptr and nullptr.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Example
     • 4 See also

.SH Parameters

   x, y - unique_ptrs to compare

.SH Return value

   1) x.get() == y.get()

   2) x.get() != y.get()

   3) std::less<CT>()(x.get(), y.get()), where CT is std::common_type<unique_ptr<T1,
   D1>::pointer, unique_ptr<T2, D2>::pointer>::type

   4) !(y < x)

   5) y < x

   6) !(x < y)

   7-8) !x

   9-10) (bool)x

   11) std::less<unique_ptr<T,D>::pointer>()(x.get(), nullptr)

   12) std::less<unique_ptr<T,D>::pointer>()(nullptr, y.get())

   13) nullptr < x

   14) y < nullptr

   15) !(nullptr < x)

   16) !(y < nullptr)

   17) !(x < nullptr)

   18) !(nullptr < y)

.SH Example

   
// Run this code

 #include <iostream>
 #include <memory>
  
 int main()
 {
     std::unique_ptr<int> p1(new int(42));
     std::unique_ptr<int> p2(new int(42));
  
     std::cout << "p1 == p1: " << (p1 == p1) << '\\n';
  
     // p1 and p2 point to different memory locations, so p1 != p2
     std::cout << "p1 == p2: " << (p1 == p2) << '\\n';
 }

.SH Output:

 p1 == p1: 1
 p1 == p2: 0

.SH See also

   get returns a pointer to the managed object
       \fI(public member function)\fP
