.TH std::experimental::not_fn 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::not_fn \- std::experimental::not_fn

.SH Synopsis
   Defined in header <experimental/functional>
   template< class F>                           (library fundamentals TS v2)
   /*unspecified*/ not_fn( F&& f );

   Creates a forwarding call wrapper that returns the complement of the callable object
   it holds.

.SH Parameters

   f - the object from which the Callable object held by the wrapper is constructed

.SH Return value

   Let FD be std::decay_t<F> and fd be an lvalue of type FD constructed from
   std::forward<F>(f).

   not_fn returns a forwarding call wrapper fn of unspecified type such that fn(a1, a2,
   ..., aN) is equivalent to !INVOKE(fd, a1, ..., aN), where INVOKE is the operation
   described in Callable.

   The returned call wrapper is always MoveConstructible, and is CopyConstructible if
   FD is CopyConstructible.

   Remarks

   If fd is not Callable, or std::is_constructible<FD, F>::value is not true, the
   behavior is undefined.

.SH Exceptions

   Throws no exceptions, unless the construction of fd throws.

.SH Notes

   not_fn is intended to replace the C++03-era negators std::not1 and std::not2.

.SH See also

                 wrapper function object returning the complement of the unary
   unary_negate  predicate it holds
                 \fI(class template)\fP 
                 wrapper function object returning the complement of the binary
   binary_negate predicate it holds
                 \fI(class template)\fP 
   not1          constructs custom std::unary_negate object
                 \fI(function template)\fP 
   not2          constructs custom std::binary_negate object
                 \fI(function template)\fP 
