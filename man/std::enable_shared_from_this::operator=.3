.TH std::enable_shared_from_this::operator= 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   enable_shared_from_this<T>& operator=( const                           \fI(since C++11)\fP
   enable_shared_from_this<T> &obj );

   Does nothing; returns *this.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 Example
     * 5 See also

.SH Parameters

   obj - an enable_shared_from_this to assign to *this

.SH Return value

   *this

.SH Exceptions

   noexcept specification:
   noexcept

.SH Example

   Note: enable_shared_from_this::operator= is defined as protected in order to prevent
   accidental slicing but allow derived classes to have default assignment operators.

   
// Run this code

 #include <memory>
 #include <iostream>

 class SharedInt : public std::enable_shared_from_this<SharedInt>
 {
 public:
     explicit SharedInt(int n) : mNumber(n) {}
     SharedInt(const SharedInt&) = default;
     SharedInt(SharedInt&&) = default;
     ~SharedInt() = default;

     // Both assignment operators use enable_shared_from_this::operator=
     SharedInt& operator=(const SharedInt&) = default;
     SharedInt& operator=(SharedInt&&) = default;

     int number() const { return mNumber; }

 private:
     int mNumber;
 };

 int main() {
     std::shared_ptr<SharedInt> a = std::make_shared<SharedInt>(2);
     std::shared_ptr<SharedInt> b = std::make_shared<SharedInt>(4);
     *a = *b;

     std::cout << a->number() << std::endl;
 }

.SH Output:

 4

.SH See also

   shared_ptr smart pointer with shared object ownership semantics
   \fI(C++11)\fP    \fI(class template)\fP
