.TH std::shared_future 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <future>
   template< class T > class shared_future;     \fB(1)\fP \fI(since C++11)\fP
   template< class T > class shared_future<T&>; \fB(2)\fP \fI(since C++11)\fP
   template<> class shared_future<void>;        \fB(3)\fP \fI(since C++11)\fP

    This section is incomplete

.SH Contents

     * 1 Member functions

          * 1.1 Getting the result
          * 1.2 State

     * 2 Example

.SH Member functions

   constructor   constructs the future object
                 \fI(public member function)\fP
   destructor    destructs the future object
                 \fI(public member function)\fP
   operator=     assigns the contents
                 \fI(public member function)\fP
.SH Getting the result
   get           returns the result
                 \fI(public member function)\fP
.SH State
   valid         checks if the future has a shared state
                 \fI(public member function)\fP
   wait          waits for the result to become available
                 \fI(public member function)\fP
                 waits for the result, returns if it is not available for the specified
   wait_for      timeout duration
                 \fI(public member function)\fP
                 waits for the result, returns if it is not available until specified
   wait_until    time point has been reached
                 \fI(public member function)\fP

.SH Example

   A shared_future may be used to signal multiple threads simultaneously, similar to
   std::condition_variable::notify_all()

   
// Run this code

 #include <iostream>
 #include <future>
 #include <chrono>

 int main()
 {
     std::promise<void> ready_promise, t1_ready_promise, t2_ready_promise;
     std::shared_future<void> ready_future(ready_promise.get_future());

     std::chrono::time_point<std::chrono::high_resolution_clock> start;

     auto fun1 = [&]() -> std::chrono::duration<double, std::milli>
     {
         t1_ready_promise.set_value();
         ready_future.wait(); // waits for the signal from main()
         return std::chrono::high_resolution_clock::now() - start;
     };


     auto fun2 = [&]() -> std::chrono::duration<double, std::milli>
     {
         t2_ready_promise.set_value();
         ready_future.wait(); // waits for the signal from main()
         return std::chrono::high_resolution_clock::now() - start;
     };

     auto result1 = std::async(std::launch::async, fun1);
     auto result2 = std::async(std::launch::async, fun2);

     // wait for the threads to become ready
     t1_ready_promise.get_future().wait();
     t2_ready_promise.get_future().wait();

     // the threads are ready, start the clock
     start = std::chrono::high_resolution_clock::now();

     // signal the threads to go
     ready_promise.set_value();

     std::cout << "Thread 1 received the signal "
               << result1.get().count() << " ms after start\\n"
               << "Thread 2 received the signal "
               << result2.get().count() << " ms after start\\n";
 }

.SH Possible output:

 Thread 1 received the signal 0.072 ms after start
 Thread 2 received the signal 0.041 ms after start

.SH Category:

     * Todo without reason
