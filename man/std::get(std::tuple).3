.TH std::get(std::tuple) 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   template< std::size_t I, class... Types >
                                                                          \fI(since C++11)\fP
   typename std::tuple_element<I, tuple<Types...> >::type&            \fB(1)\fP \fI(until C++14)\fP

       get( tuple<Types...>& t );
   template< std::size_t I, class... Types >

   constexpr typename std::tuple_element<I, tuple<Types...> >::type&  \fB(1)\fP \fI(since C++14)\fP

       get( tuple<Types...>& t );
   template< std::size_t I, class... Types >
                                                                          \fI(since C++11)\fP
   typename std::tuple_element<I, tuple<Types...> >::type&&           \fB(2)\fP \fI(until C++14)\fP

       get( tuple<Types...>&& t );
   template< std::size_t I, class... Types >

   constexpr typename std::tuple_element<I, tuple<Types...> >::type&& \fB(2)\fP \fI(since C++14)\fP

       get( tuple<Types...>&& t );
   template< std::size_t I, class... Types >
                                                                          \fI(since C++11)\fP
   typename std::tuple_element<I, tuple<Types...> >::type const&      \fB(3)\fP \fI(until C++14)\fP

       get( const tuple<Types...>& t );
   template< std::size_t I, class... Types >

   constexpr typename std::tuple_element<I, tuple<Types...> >::type   \fB(3)\fP \fI(since C++14)\fP
   const&

       get( const tuple<Types...>& t );
   template< class T, class... Types >                                \fB(4)\fP \fI(since C++14)\fP
   constexpr T& get(tuple<Types...>& t);
   template< class T, class... Types >                                \fB(5)\fP \fI(since C++14)\fP
   constexpr T&& get(tuple<Types...>&& t);
   template< class T, class... Types >                                \fB(6)\fP \fI(since C++14)\fP
   constexpr const T& get(const tuple<Types...>& t);

   1-3) Extracts the Ith element element from the tuple. I is an integer value in [0,
   sizeof...(Types)).
   4-6) Extracts the element of the tuple t whose type is T. Fails to compile if the
   tuple has more than one element of that type.

.SH Parameters

   t - tuple whose contents to extract

.SH Return value

   1,4) Reference to the selected element of t.
   2,5) Rvalue reference to the selected element of t, unless the element is of lvalue
   reference type, in which case lvalue reference is returned.
   3,6) Const reference to the selected element of t.

.SH Exceptions

   noexcept specification:  
   noexcept
     

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <tuple>
  
 int main()
 {
     auto t = std::make_tuple(1, "Foo", 3.14);
     // index-based access
     std::cout << "(" << std::get<0>(t) << ", " << std::get<1>(t)
               << ", " << std::get<2>(t) << ")\\n";
     // type-based access
     std::cout << "(" << std::get<int>(t) << ", " << std::get<const char*>(t)
               << ", " << std::get<double>(t) << ")\\n";
 }

.SH Output:

 (1, Foo, 3.14)
 (1, Foo, 3.14)

.SH See also

   std::get(std::array) accesses an element of an array
                        \fI(function template)\fP 
   std::get(std::pair)  accesses an element of a pair
   \fI(C++11)\fP              \fI(function template)\fP 
