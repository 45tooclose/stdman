.TH std::literals::chrono_literals::operator""ns 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <chrono>
   constexpr std::chrono::nanoseconds operator "" ns(unsigned long    \fB(1)\fP \fI(since C++14)\fP
   long nsec);
   constexpr std::chrono::duration</*unspecified*/,                   \fB(2)\fP \fI(since C++14)\fP
   std::nano> operator "" ns(long double nsec);

   Forms a std::chrono::duration literal representing nanoseconds.

   1) integer literal, returns exactly std::chrono::nanoseconds(nsec)
   2) floating-point literal, returns a floating-point duration equivalent to
   std::chrono::nanoseconds

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Possible implementation
     * 4 Notes
     * 5 Example
     * 6 See also

.SH Parameters

   nsec - the number of nanoseconds

.SH Return value

   The std::chrono::duration literal.

.SH Possible implementation

   constexpr std::chrono::nanoseconds operator ""ns(unsigned long long ns)
   {
       return chrono::nanoseconds(ns);
   }
   constexpr std::chrono::duration<long double, std::nano> operator ""ns(long double ns)
   {
       return std::chrono::duration<long double, std::nano>(ns);
   }

.SH Notes

   These operators are declared in the namespace std::literals::chrono_literals, where
   both literals and chrono_literals are inline namespaces.

.SH Example

   
// Run this code

 #include <iostream>
 #include <chrono>

 int main()
 {
     using namespace std::literals::chrono_literals;
     auto d1 = 250ns;
     std::chrono::nanoseconds d2 = 1us;
     std::cout << "250ns = " << d1.count() << " nanoseconds\\n"
               << "1us = " << d2.count() << " nanoseconds\\n";
 }

.SH Output:

 250ns = 250 nanoseconds
 1us = 1000 nanoseconds

.SH See also

   constructor   constructs new duration
                 \fI(public member function of std::chrono::duration)\fP
