.TH std::shared_mutex::try_lock_shared 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   void try_lock_shared();  \fI(since C++14)\fP

   Tries to lock the mutex in shared mode. Returns immediately. On successful lock
   acquisition returns true, otherwise returns false.

   This function is allowed to fail spuriously and return false even if the mutex is
   not currenly exclusively locked by any other thread.

   Prior unlock() operation on the same mutex synchronizes-with (as defined in
   std::memory_order) this operation if it returns true.

   The behavior is undefined if the calling thread already owns the mutex in any mode.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 Example
     • 5 See also

.SH Parameters

   \fI(none)\fP

.SH Return value

   true if the lock was acquired successfully, otherwise false.

.SH Exceptions

   \fI(none)\fP

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   lock            locks the mutex, blocks if the mutex is not available
                   \fI(public member function)\fP
                   tries to lock the mutex for shared ownership, returns if the mutex
   try_lock_shared is not available
                   \fI(public member function)\fP
   unlock_shared   unlocks the mutex (shared ownership)
                   \fI(public member function)\fP

.SH Category:

     • Todo no example
