.TH std::greater 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::greater \- std::greater

.SH Synopsis
   Defined in header <functional>
   template< class T >             \fI(until C++14)\fP
   struct greater;
   template< class T = void >      \fI(since C++14)\fP
   struct greater;

   Function object for performing comparisons. Unless specialized, invokes operator> on
   type T.

.SH Specializations

   The partial specialization of std::greater for any pointer type yields a total
   order, even if the built-in operator> does not.

   The standard library provides a specialization of std::greater when T
   is not specified, which leaves the parameter types and return type to
   be deduced.
                                                                          \fI(since C++14)\fP
                 function object implementing x > y deducing argument and
   greater<void> return types
                 \fI(class template specialization)\fP 

.SH Member types

   type                 definition
   result_type          bool
   first_argument_type  T
   second_argument_type T

.SH Member functions

   operator() checks if the first argument is greater than the second
              \fI(public member function)\fP

std::greater::operator()

   bool operator()( const T& lhs, const T& rhs ) const;            \fI(until C++14)\fP
   constexpr bool operator()( const T& lhs, const T& rhs ) const;  \fI(since C++14)\fP

   Checks whether lhs is greater than rhs.

.SH Parameters

   lhs, rhs - values to compare

.SH Return value

   true if lhs > rhs, false otherwise.

.SH Exceptions

   \fI(none)\fP

.SH Possible implementation

   constexpr bool operator()(const T &lhs, const T &rhs) const
   {
       return lhs > rhs;
   }
