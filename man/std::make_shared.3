.TH std::make_shared 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <memory>
   template< class T, class... Args >
   shared_ptr<T> make_shared( Args&&... args );

   Constructs an object of type T and wraps it in a std::shared_ptr using args as the
   parameter list for the constructor of T.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 Notes
     • 5 Example
     • 6 See also

.SH Parameters

   args - list of arguments with which an instance of T will be constructed.

.SH Return value

   std::shared_ptr of an instance of type T.

.SH Exceptions

   May throw std::bad_alloc or any exception thrown by the constructor of T. If an
   exception is thrown, this function has no effect.

.SH Notes

   This function typically allocates memory for the T object and for the shared_ptr's
   control block with a single memory allocation (it is a non-binding requirement in
   the Standard). In contrast, the declaration std::shared_ptr<T> p(new T(Args...))
   performs at least two memory allocations, which may incur unnecessary overhead.

   Moreover, f(shared_ptr<int>(new int\fB(42)\fP), g()) can lead to memory leak if g throws
   an exception. This problem doesn't exist if make_shared is used.

.SH Example

   
// Run this code

 #include <iostream>
 #include <memory>
  
 void foo(std::shared_ptr<int> i)
 {
     (*i)++;
 }
  
 int main()
 {
     auto sp = std::make_shared<int>(10);
     foo(sp);
     std::cout << *sp << std::endl;
 }

.SH Output:

 11

.SH See also

   constructor     constructs new shared_ptr
                   \fI(public member function)\fP
                   creates a shared pointer that manages a new object allocated using
   allocate_shared an allocator
                   \fI(function template)\fP
