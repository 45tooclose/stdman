.TH std::move_iterator 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <iterator>
   template< class Iterator >    \fI(since C++11)\fP
   class move_iterator;

   std::move_iterator is an iterator adaptor which behaves exactly like the underlying
   iterator (which must be at least an InputIterator), except that dereferencing
   converts the value returned by the underlying iterator into an rvalue. If this
   iterator is used as an input iterator, the effect is that the values are moved from,
   rather than copied from.

.SH Contents

     * 1 Member types
     * 2 Member functions
     * 3 Non-member functions
     * 4 Example
     * 5 See also

.SH Member types

   Member type       Definition
   iterator_type     Iterator
   difference_type   std::iterator_traits<Iterator>::difference_type
   pointer           Iterator
   value_type        std::iterator_traits<Iterator>::value_type
   iterator_category std::iterator_traits<Iterator>::iterator_category
   reference         value_type&&

.SH Member functions

   constructor     constructs a new iterator adaptor
                   \fI(public member function)\fP
   operator=       assigns another iterator
                   \fI(public member function)\fP
   base            accesses the underlying iterator
                   \fI(public member function)\fP
   operator*       accesses the pointed-to element
   operator->      \fI(public member function)\fP
   operator[]      obtains rvalue reference to indexed element
                   \fI(public member function)\fP
   operator++
   operator++(int)
   operator+=
   operator+       advances or decrements the iterator
   operator--      \fI(public member function)\fP
   operator--(int)
   operator-=
   operator-

.SH Non-member functions

   operator==
   operator!=
   operator<  compares the underlying iterators
   operator<= \fI(function template)\fP
   operator>
   operator>=
   operator+  advances the iterator
              \fI(function template)\fP
   operator-  computes the distance between two iterator adaptors
              \fI(function template)\fP

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <vector>
 #include <iterator>
 #include <numeric>

 int main()
 {
     std::vector<std::string> v{"this", "is", "an", "example"};

     std::cout << "Old contents of the vector: ";
     for (auto& s : v)
         std::cout << '"' << s << "\\" ";

     typedef std::vector<std::string>::iterator iter_t;
     std::string concat = std::accumulate(
                              std::move_iterator<iter_t>(v.begin()),
                              std::move_iterator<iter_t>(v.end()),
                              std::string());  // Can be simplified with std::make_move_iterator

     std::cout << "\\nConcatenated as string: " << concat << '\\n'
               << "New contents of the vector: ";
     for (auto& s : v)
         std::cout << '"' << s << "\\" ";
     std::cout << '\\n';
 }

.SH Output:

 Old contents of the vector: "this" "is" "an" "example"
 Concatenated as string: thisisanexample
 New contents of the vector: "" "" "" ""

.SH See also

   make_move_iterator creates a std::move_iterator of type inferred from the argument
   \fI(C++11)\fP            \fI(function template)\fP
