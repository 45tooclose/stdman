.TH std::wprintf,std::fwprintf,std::swprintf 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cwchar>
   int wprintf( const wchar_t* format, ... );                                     \fB(1)\fP
   int fwprintf( std::FILE* stream, const wchar_t* format, ... );                 \fB(2)\fP
   int swprintf( wchar_t* buffer, std::size_t size, const wchar_t* format, ... ); \fB(3)\fP

   Loads the data from the given locations, converts them to wide string equivalents
   and writes the results to a variety of sinks.

   1) Writes the results to stdout.
   2) Writes the results to a file stream stream.
   3) Writes the results to a wide string buffer. At most size-1 wide characters are
   written. The resulting wide character string will be terminated with a null
   character, unless size is zero.

.SH Parameters

stream - output file stream to write to
buffer - pointer to a wide character string to write to
size   - up to size - 1 characters may be written, plus the null terminator
         pointer to a null-terminated wide string specifying how to interpret the data.

         The format string consists of ordinary characters (except %), which are copied unchanged into the output
         stream, and conversion specifications. Each conversion specification has the following format:

           * introductory % character

           * (optional) one or more flags that modify the behavior of the conversion:

           * -: the result of the conversion is left-justified within the field (by default it is
             right-justified)
           * +: the sign of signed conversions is always prepended to the result of the conversion (by default
             the result is preceded by minus only when it is negative)
           * space: if the result of a signed conversion does not start with a sign character, or is empty, space
             is prepended to the result. It is ignored if + flag is present.
           * # : alternative form of the conversion is performed. See the table below for exact effects.
           * 0 : for integer and floating point number conversions, leading zeros are used to pad the field
             instead of space characters. For floating point numbers it is ignored if the precision is explicitly
             specified. For other conversions using this flag results in undefined behavior. It is ignored if -
             flag is present.

           * (optional) integer value or * that specifies minimum field width. The result is padded with space
             characters (by default), if required, on the left when right-justified, or on the right if
             left-justified. In the case when * is used, the width is specified by an additional argument of type
             int. If the value of the argument is negative, it results with the - flag specified and positive
             field width.

           * (optional) . followed by integer number or * that specifies precision of the conversion. In the case
             when * is used, the precision is specified by an additional argument of type int. If the value of
             this argument is negative, it is ignored. See the table below for exact effects of precision.

           * (optional) length modifier that specifies the size of the argument

           * conversion format specifier

         The following format specifiers are available:

         Conversion  Explanation                                   Argument type
         specifier
              length modifier         hh       h      \fI(none)\fP     l        ll        j       z        t       L
                    writes literal
                    %. The full
             %      conversion     N/A      N/A      N/A      N/A      N/A      N/A       N/A    N/A       N/A
                    specification
                    must be %%.
                    writes a
             c      single         N/A      N/A      char     wchar_t  N/A      N/A       N/A    N/A       N/A
                    character
                    writes a
                    character
                    string.

             s      Precision      N/A      N/A      char*    wchar_t* N/A      N/A       N/A    N/A       N/A
                    specifies the
                    maximum number
                    of bytes to be
                    written.
                    converts a
                    signed decimal
                    integer in the
                    style [-]dddd.

                    Precision
                    specifies the
                    minimum number
                    of digits to
             d      appear. The
             i      default                                                                                N/A
                    precision is
                    1.
                    If both the
                    converted
                    value and the
                    precision are
                    0 the
                    conversion
                    results in no
                    characters.
                    converts a
                    signed octal
                    integer in the
                    style [-]oooo.

                    Precision
                    specifies the  signed   signed   signed   signed   signed
                    minimum number char     short    int      long     long     intmax_t
                    of digits to                                       long
                    appear. The
                    default
                    precision is
                    1. If both the
                    converted
                    value and the
                    precision are
                    0 the
             o      conversion                                                                             N/A
                    results in no
                    characters. In
                    the
                    alternative
                    implementation
                    precision is
                    increased if
                    necessary, to
                    write one
                    leading zero.
                    In that case
                    if both the
                    converted
                    value and the
                    precision are
                    0, single
                    0 is
                    written.
                    converts a                                                            size_t ptrdiff_t
                    signed
                    hexadecimal
                    integer in the
                    style [-]hhhh.

                    For the x
                    conversion
                    letters abcdef
                    are used.
                    For the X
                    conversion
                    letters ABCDEF
                    are used.
                    Precision
                    specifies the
                    minimum number
                    of digits to
             x      appear. The                                                                            N/A
             X      default
                    precision is
                    1. If both the
                    converted
                    value and the
                    precision are
                    0 the
                    conversion
                    results in no
                    characters. In unsigned unsigned unsigned unsigned unsigned
                    the            char     short    int      long     long     uintmax_t
                    alternative                                        long
                    implementation
                    0x or 0X is
                    prefixed to
                    results if the
                    converted
                    value is
                    nonzero.
                    converts an
                    unsigned
                    decimal
                    integer in the
                    style dddd.

                    Precision
                    specifies the
                    minimum number
                    of digits to
             u      appear. The                                                                            N/A
                    default
                    precision is
                    1. If both the
                    converted
                    value and the
                    precision are
                    0 the
                    conversion
                    results in no
                    characters.
                    converts
                    floating-point
                    number to the
                    decimal
                    notation in
                    the style
                    [-]ddd.ddd.

                    Precision
                    specifies the
                    minimum number
                    of digits to
                    appear after
                    the decimal
             f      point
             F      character. The N/A      N/A                        N/A      N/A       N/A    N/A
                    default
                    precision is
                    6. In the
                    alternative
                    implementation
                    decimal point
                    character is
                    written even
                    if no digits
                    follow it. For
                    infinity and
                    not-a-number
                    conversion
                    style see
                    notes.
                    converts
                    floating-point
                    number to the
format -            decimal
                    exponent
                    notation.

                    For the e
                    conversion
                    style
                    [-]d.dddeÂ±dd
                    is used.
                    For the E
                    conversion
                    style
                    [-]d.dddEÂ±dd
                    is used.
                    The exponent
                    contains at
                    least two
                    digits, more
                    digits are
                    used only if
                    necessary. If
             e      the value is
             E      0, the       N/A      N/A                        N/A      N/A       N/A    N/A
                    exponent is
                    also 0.
                    Precision
                    specifies the
                    minimum number
                    of digits to
                    appear after
                    the decimal
                    point
                    character. The
                    default
                    precision is
                    6. In the
                    alternative
                    implementation
                    decimal point
                    character is
                    written even
                    if no digits
                    follow it. For
                    infinity and
                    not-a-number
                    conversion
                    style see
                    notes.
                    converts
                    floating-point
                    number to the
                    hexadecimal
                    exponent
                    notation.

                    For the a
                    conversion
                    style
                    [-]0xh.hhhpÂ±d
                    is used.
                    For the A
                    conversion
                    style
                    [-]0Xh.hhhPÂ±d
                    is used.
                    The first
                    hexadecimal
                    digit is 0 if
                    the argument
                    is not a
                    normalized
                    floating point                   double   double                                       long
                    value. If the                                                                          double
                    value is 0,
             a      the exponent
             A      is also 0.   N/A      N/A                        N/A      N/A       N/A    N/A
                    Precision
                    specifies the
                    minimum number
                    of digits to
                    appear after
                    the decimal
                    point
                    character. The
                    default
                    precision is
                    sufficient for
                    exact
                    representation
                    of the value.
                    In the
                    alternative
                    implementation
                    decimal point
                    character is
                    written even
                    if no digits
                    follow it. For
                    infinity and
                    not-a-number
                    conversion
                    style see
                    notes.
                    converts
                    floating-point
                    number to
                    decimal or
                    decimal
                    exponent
                    notation
                    depending on
                    the value and
                    the precision.

                    For the g
                    conversion
                    style
                    conversion
                    with style e
                    or f will be
                    performed.
                    For the G
                    conversion
                    style
                    conversion
                    with style E
                    or F will be
                    performed.
                    Let P equal
                    the precision
                    if nonzero, 6
                    if the
                    precision is
                    not specified,
                    or 1 if the
                    precision is
                    0. Then, if
                    a conversion
                    with style E
             g      would have an
             G      exponent of X: N/A      N/A                        N/A      N/A       N/A    N/A

                      * if P > X â¥
                        â4, the
                        conversion
                        is with
                        style f or
                        F and
                        precision
                        P â 1 â X.
                      * otherwise,
                        the
                        conversion
                        is with
                        style e or
                        E and
                        precision
                        P â 1.

                    Unless
                    alternative
                    representation
                    is requested
                    the trailing
                    zeros are
                    removed, also
                    the decimal
                    point
                    character is
                    removed if no
                    fractional
                    part is left.
                    For infinity
                    and
                    not-a-number
                    conversion
                    style see
                    notes.
                    returns the
                    number of
                    characters
                    written so far
                    by this call
                    to the
                    function.
             n                     N/A      N/A      int*     N/A      N/A      N/A       N/A    N/A       N/A
                    The result is
                    written to the
                    value pointed
                    to by the
                    argument. The
                    complete
                    specification
                    must be %n.
                    writes an
                    implementation
                    defined
             p      character      N/A      N/A      void*    N/A      N/A      N/A       N/A    N/A       N/A
                    sequence
                    defining a
                    pointer.
.SH Notes:

         The floating point conversion functions convert infinity to inf or infinity. Which one is used is
         implementation defined.
         Not-a-number is converted to nan or nan(char_sequence). Which one is used is implementation defined.
         The conversions F, E, G, A output INF, INFINITY, NAN instead.
         The correct conversion specifiers for the fixed-width character types (std:int8_t, etc) are defined in
         the header <cinttypes>
...    - arguments specifying data to print

.SH Return value

   Number of wide characters written if successful (not counting the terminating null
   character) or negative value if an error occurred.

.SH Example

   
// Run this code

 #include <iostream>
 #include <locale>
 #include <clocale>
 #include <cwchar>
  
 int main()
 {
     char narrow_str[] = "z\\u00df\\u6c34\\U0001f34c";
                     // or "zÃæ°´ð"
                     // or "\\x7a\\xc3\\x9f\\xe6\\xb0\\xb4\\xf0\\x9f\\x8d\\x8c";
     wchar_t warr[30];
     std::setlocale(LC_ALL, "en_US.utf8");
  
     std::swprintf(warr, sizeof warr - 1,
                   L"Converted from UTF-8: '%s'", narrow_str);
  
     std::wcout.imbue(std::locale("en_US.utf8"));
     std::wcout << warr << '\\n';
 }

.SH Output:

 Converted from UTF-8: 'zÃæ°´ð'

.SH See also

   vwprintf  prints formatted wide character output to stdout, a file stream
   vfwprintf or a buffer using variable argument list
   vswprintf \fI(function)\fP 
   fputws    writes a wide string to a file stream
             \fI(function)\fP 
   C documentation for
   wprintf,
   fwprintf,
   swprintf
