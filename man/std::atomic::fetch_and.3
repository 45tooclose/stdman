.TH std::atomic::fetch_and 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   T fetch_and( T arg,
   memory_order = std::memory_order_seq_cst );  \fI(since C++11)\fP
   T fetch_and( T arg,                          (member only of atomic<Integral>
   memory_order = std::memory_order_seq_cst )   template specialization)
   volatile;

   Atomically replaces the current value with the result of bitwise AND of the value
   and arg. The operation is read-modify-write operation. Memory is affected according
   to the value of memory_order.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 See also

.SH Parameters

   arg          - the other argument of bitwise AND
   memory_order - memory order constraints to enforce

.SH Return value

   The value of the atomic variable before the call.

.SH Exceptions

   noexcept specification:
   noexcept

.SH See also

   atomic_fetch_and          replaces the atomic object with the result of logical AND
   atomic_fetch_and_explicit with a non-atomic argument and obtains the previous value
   \fI(C++11)\fP                   of the atomic
   \fI(C++11)\fP                   \fI(function template)\fP
