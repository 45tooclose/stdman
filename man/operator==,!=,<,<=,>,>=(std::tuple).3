.TH operator==,!=,<,<=,>,>=(std::tuple) 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <tuple>
   template< class... TTypes, class... UTypes >
                                                               \fI(since C++11)\fP
   bool operator==( const tuple<TTypes...>& lhs,           \fB(1)\fP \fI(until C++14)\fP

   const tuple<UTypes...>& rhs );
   template< class... TTypes, class... UTypes >

   constexpr bool operator==( const tuple<TTypes...>& lhs, \fB(1)\fP \fI(since C++14)\fP

   const tuple<UTypes...>& rhs );
   template< class... TTypes, class... UTypes >
                                                               \fI(since C++11)\fP
   bool operator!=( const tuple<TTypes...>& lhs,           \fB(2)\fP \fI(until C++14)\fP

   const tuple<UTypes...>& rhs );
   template< class... TTypes, class... UTypes >

   constexpr bool operator!=( const tuple<TTypes...>& lhs, \fB(2)\fP \fI(since C++14)\fP

   const tuple<UTypes...>& rhs );
   template< class... TTypes, class... UTypes >
                                                               \fI(since C++11)\fP
   bool operator<( const tuple<TTypes...>& lhs,            \fB(3)\fP \fI(until C++14)\fP

   const tuple<UTypes...>& rhs );
   template< class... TTypes, class... UTypes >

   constexpr bool operator<( const tuple<TTypes...>& lhs,  \fB(3)\fP \fI(since C++14)\fP

   const tuple<UTypes...>& rhs );
   template< class... TTypes, class... UTypes >
                                                               \fI(since C++11)\fP
   bool operator<=( const tuple<TTypes...>& lhs,           \fB(4)\fP \fI(until C++14)\fP

   const tuple<UTypes...>& rhs );
   template< class... TTypes, class... UTypes >

   constexpr bool operator<=( const tuple<TTypes...>& lhs, \fB(4)\fP \fI(since C++14)\fP

   const tuple<UTypes...>& rhs );
   template< class... TTypes, class... UTypes >
                                                               \fI(since C++11)\fP
   bool operator>( const tuple<TTypes...>& lhs,            \fB(5)\fP \fI(until C++14)\fP

   const tuple<UTypes...>& rhs );
   template< class... TTypes, class... UTypes >

   constexpr bool operator>( const tuple<TTypes...>& lhs,  \fB(5)\fP \fI(since C++14)\fP

   const tuple<UTypes...>& rhs );
   template< class... TTypes, class... UTypes >
                                                               \fI(since C++11)\fP
   bool operator>=( const tuple<TTypes...>& lhs,           \fB(6)\fP \fI(until C++14)\fP

   const tuple<UTypes...>& rhs );
   template< class... TTypes, class... UTypes >

   constexpr bool operator>=( const tuple<TTypes...>& lhs, \fB(6)\fP \fI(since C++14)\fP

   const tuple<UTypes...>& rhs );

   1-2) Compares every element of the tuple lhs with the corresponding element of the
   tuple rhs.

   3-6) Compares lhs and rhs lexicographically, that is, compares the first elements,
   if they are equivalent, compares the second elements, if those are equivalent,
   compares the third elements, and so on.

   All comparison operators are short-circuited; they do not access tuple elements
   beyond what is necessary to determine the result of the comparison.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Example
     * 4 See also

.SH Parameters

   lhs, rhs - tuples to compare

.SH Return value

   1) true if std::get<i>(lhs) == std::get<i>(rhs) for all i in [0, sizeof...(Types)),
   otherwise false. For two empty tuples returns true.

   2) !(lhs == rhs)

   3) (bool)(std::get<0>(lhs) < std::get<0>(rhs)) || (!(bool)(std::get<0>(rhs) <
   std::get<0>(lhs)) && lhstail < rhstail), where lhstail is lhs without its first
   element, and rhstail is rhs without its first element. For two empty tuples, returns
   false.

   4) !(rhs < lhs)

   5) rhs < lhs

   6) !(lhs < rhs)

.SH Example

   Because operator< is defined for tuples, containers of tuples can be sorted.

   
// Run this code

 #include <iostream>
 #include <tuple>
 #include <vector>
 #include <algorithm>
 int main()
 {
     std::vector<std::tuple<int, std::string, float>> v;
     v.emplace_back(2, "baz", -0.1);
     v.emplace_back(2, "bar", 3.14);
     v.emplace_back(1, "foo", 100.1);
     std::sort(v.begin(), v.end());

     for(auto p: v) {
         std::cout << "(" << std::get<0>(p) << ", " << std::get<1>(p)
                   << ", " << std::get<2>(p) << ")\\n";
     }
 }

.SH Output:

 (1, foo, 100.1)
 (2, bar, 3.14)
 (2, baz, -0.1)

.SH See also
