.TH std::is_copy_assignable,std::is_trivially_copy_assignable, 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis

   Defined in header <type_traits>
   template< class T >                  \fB(1)\fP \fI(since C++11)\fP
   struct is_copy_assignable;
   template< class T >                  \fB(2)\fP \fI(since C++11)\fP
   struct is_trivially_copy_assignable;
   template< class T >                  \fB(3)\fP \fI(since C++11)\fP
   struct is_nothrow_copy_assignable;

   1) Checks whether a type is CopyAssignable, i.e. has an accessible explicit or
   implicit copy assignment operator. If the requirement is met, a member constant
   value equal true is provided, otherwise value is false.

   2) Same as 1), but evaluation of the copy-assignment expression will not call any
   operation that is not trivial.

   3) Same as 1), but the evaluation of the copy-assignment expression will not call
   any operation that is not noexcept.

.SH Member constants

   value    true if T is copy-assignable, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

template< class T>
struct is_copy_assignable
    : std::is_assignable< typename std::add_lvalue_reference<T>::type,
                          typename std::add_lvalue_reference<const T>::type> {};
 
template< class T>
struct is_trivially_copy_assignable
    : std::is_trivially_assignable< typename std::add_lvalue_reference<T>::type,
                                    typename std::add_lvalue_reference<const T>::type> {};
 
template< class T>
struct is_nothrow_copy_assignable
    : std::is_nothrow_assignable< typename std::add_lvalue_reference<T>::type,
                                  typename std::add_lvalue_reference<const T>::type> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <utility>
 #include <type_traits>
 struct Foo { int n; };
 int main() {
     std::cout << std::boolalpha
               << "Foo is trivally copy-assignable? "
               << std::is_trivially_copy_assignable<Foo>::value << '\\n'
               << "int[2] is copy-assignable? "
               << std::is_copy_assignable<int[2]>::value << '\\n'
               << "int is nothrow copy-assignable? "
               << std::is_nothrow_copy_assignable<int>::value << '\\n';
 }

.SH Output:

 Foo is trivally copy-assignable? true
 int[2] is copy-assignable? false
 int is nothrow copy-assignable? true

.SH See also

   is_assignable
   is_trivially_assignable      checks if a type has a assignment operator for a
   is_nothrow_assignable        specific argument
   \fI(C++11)\fP                      \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
   is_move_assignable
   is_trivially_move_assignable
   is_nothrow_move_assignable   checks if a type has a move assignment operator
   \fI(C++11)\fP                      \fI(class template)\fP 
   \fI(C++11)\fP
   \fI(C++11)\fP
