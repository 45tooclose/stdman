.TH std::extent 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T, unsigned N = 0>  \fI(since C++11)\fP
   struct extent;

   If T is an array type, provides the member constant value equal to the number of
   elements along the Nth dimension of the array, if N is in [0, std::rank<T>::value).
   For any other type, or if T is array of unknown bound along its first dimension and
   N is 0, value is 0.

.SH Contents

     * 1 Inherited from
       std::integral_constant

          * 1.1 Member constants
          * 1.2 Member functions
          * 1.3 Member types
          * 1.4 Possible implementation
          * 1.5 Example
          * 1.6 See also

Inherited from std::integral_constant

.SH Member constants

   value    the number of elements along the Nth dimension of T
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator std::size_t converts the object to std::size_t, returns value
                        \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type std::size_t
   type       std::integral_constant<std::size_t, value>

.SH Possible implementation

template<class T, unsigned N = 0>
struct extent : std::integral_constant<std::size_t, 0> {};

template<class T>
struct extent<T[], 0> : std::integral_constant<std::size_t, 0> {};

template<class T, unsigned N>
struct extent<T[], N> : std::integral_constant<std::size_t, std::extent<T, N-1>::value> {};

template<class T, std::size_t N>
struct extent<T[N], 0> : std::integral_constant<std::size_t, N> {};

template<class T, std::size_t I, unsigned N>
struct extent<T[I], N> : std::integral_constant<std::size_t, std::extent<T, N-1>::value> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 int main()
 {
     std::cout << std::extent<int[3]>::value << '\\n';
     std::cout << std::extent<int[3][4]>::value << '\\n';
     std::cout << std::extent<int[3][4], 1>::value << '\\n';
     std::cout << std::extent<int[3][4], 2>::value << '\\n';
     std::cout << std::extent<int[]>::value << '\\n';
 }

.SH Output:

 3
 3
 4
 0
 0

.SH See also

   is_array           checks if a type is an array type
   \fI(C++11)\fP            \fI(class template)\fP
   rank               obtains the number of dimensions of an array type
   \fI(C++11)\fP            \fI(class template)\fP
   remove_extent      removes one extent from the given array type
   \fI(C++11)\fP            \fI(class template)\fP
   remove_all_extents removes all extents from the given array type
   \fI(C++11)\fP            \fI(class template)\fP
