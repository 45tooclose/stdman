.TH std::make_tuple 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <tuple>
   template< class... Types >                                 \fI(since C++11)\fP
   tuple<VTypes...> make_tuple( Types&&... args );            \fI(until C++14)\fP
   template< class... Types >                                 \fI(since C++14)\fP
   constexpr tuple<VTypes...> make_tuple( Types&&... args );

   Creates a tuple object, deducing the target type from the types of arguments.

   For each Ti in Types..., the corresponding type Vi in Vtypes... is
   std::decay<Ti>::type unless application of std::decay results in
   std::reference_wrapper<X> for some type X, in which case the deduced type is X&.

.SH Parameters

   args - zero or more arguments to construct the tuple from

.SH Return value

   A std::tuple object containing the given values, created as if by
   std::tuple<VTypes...>(std::forward<Types>(t)...).

.SH Possible implementation

   template <class T>
   struct special_decay
   {
       using type = typename std::decay<T>::type;
   };

   template <class T>
   struct special_decay<std::reference_wrapper<T>>
   {
       using type = T&;
   };

   template <class T>
   using special_decay_t = typename special_decay<T>::type;

   template <class... Types>
   auto make_tuple(Types&&... args)
   {
       return std::tuple<special_decay_t<Types>...>(std::forward<Types>(args)...);
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <tuple>
 #include <functional>

 std::tuple<int, int> f() // this function returns multiple values
 {
     int x = 5;
     return std::make_tuple(x, 7); // return {x,7}; in C++17
 }

 int main()
 {
     // heterogeneous tuple construction
     int n = 1;
     auto t = std::make_tuple(10, "Test", 3.14, std::ref(n), n);
     n = 7;
     std::cout << "The value of t is "  << "("
               << std::get<0>(t) << ", " << std::get<1>(t) << ", "
               << std::get<2>(t) << ", " << std::get<3>(t) << ", "
               << std::get<4>(t) << ")\\n";

     // function returning multiple values
     int a, b;
     std::tie(a, b) = f();
     std::cout << a << " " << b << "\\n";
 }

.SH Output:

 The value of t1 is (10, Test, 3.14, 7, 1)
 5 7

                    creates a tuple of lvalue references or unpacks a tuple into
   tie              individual objects
                    \fI(function template)\fP
   forward_as_tuple creates a tuple of rvalue references
                    \fI(function template)\fP
   tuple_cat        creates a tuple by concatenating any number of tuples
                    \fI(function template)\fP
