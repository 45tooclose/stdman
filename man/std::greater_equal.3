.TH std::greater_equal 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <functional>
   template< class T >             \fI(until C++14)\fP
   struct greater_equal;
   template< class T = void >      \fI(since C++14)\fP
   struct greater_equal;

   Function object for performing comparisons. Unless specialized, invokes operator>=
   on type T.

.SH Contents

     • 1 Specializations
     • 2 Member types
     • 3 Member functions
     • 4
       std::greater_equal::operator()

          • 4.1 Parameters
          • 4.2 Return value
          • 4.3 Exceptions
          • 4.4 Possible implementation

.SH Specializations

   If the built-in operator<= does not provide total order for pointers, a partial
   specialization of std::greater_equal for pointer types is provided, which guarantees
   total order.

   The standard library provides a specialization of std::greater_equal
   when T is not specified, which leaves the parameter types and return
   type to be deduced.
                                                                          \fI(since C++14)\fP
                       function object implementing x >= y deducing
   greater_equal<void> argument and return types
                       \fI(class template specialization)\fP

.SH Member types

   type                 definition
   result_type          bool
   first_argument_type  T
   second_argument_type T

.SH Member functions

   operator() checks if the first argument is greater than or equal to the second
              \fI(public member function)\fP

                              std::greater_equal::operator()

   bool operator()( const T& lhs, const T& rhs ) const;            \fI(until C++14)\fP
   constexpr bool operator()( const T& lhs, const T& rhs ) const;  \fI(since C++14)\fP

   Checks whether lhs is greater than or equal to rhs.

.SH Parameters

   lhs, rhs - values to compare

.SH Return value

   true if lhs >= rhs, false otherwise.

.SH Exceptions

   \fI(none)\fP

.SH Possible implementation

   constexpr bool operator()(const T &lhs, const T &rhs) const
   {
       return lhs >= rhs;
   }
