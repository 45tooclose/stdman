.TH std::find_first_of 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt1, class ForwardIt2 >

   ForwardIt1 find_first_of( ForwardIt1 first,              \fI(until C++11)\fP
   ForwardIt1 last,

   ForwardIt2 s_first, ForwardIt2 s_last );
   template< class InputIt, class ForwardIt >

   InputIt find_first_of( InputIt first, InputIt            \fI(since C++11)\fP
   last,

   ForwardIt s_first, ForwardIt s_last );
   template< class ForwardIt1, class ForwardIt2,
   class BinaryPredicate >                          \fB(1)\fP

   ForwardIt1 find_first_of( ForwardIt1 first,                            \fI(until C++11)\fP
   ForwardIt1 last,

   ForwardIt2 s_first, ForwardIt2 s_last,
   BinaryPredicate p );                                 \fB(2)\fP
   template< class InputIt, class ForwardIt, class
   BinaryPredicate >

   InputIt find_first_of( InputIt first, InputIt                          \fI(since C++11)\fP
   last,

   ForwardIt s_first, ForwardIt s_last,
   BinaryPredicate p );

   Searches the range [first, last) for any of the elements in the range [s_first,
   s_last). The first version uses operator== to compare the elements, the second
   version uses the given binary predicate p.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Complexity
     * 4 Possible implementation
     * 5 Example
     * 6 See also

.SH Parameters

   first, last     - the range of elements to examine
   s_first, s_last - the range of elements to search for
                     binary predicate which returns true if the elements should be
                     treated as equal.

                     The signature of the predicate function should be equivalent to
                     the following:

                     bool pred(const Type1 &a, const Type2 &b);
   p               -
                     The signature does not need to have const &, but the function must
                     not modify the objects passed to it.
                     The types Type1 and Type2 must be such that objects of types
                     ForwardIt1 and ForwardIt2 can be dereferenced and then implicitly
                     converted to Type1 and Type2 respectively.

                     
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   ForwardIt1 must meet the requirements of ForwardIterator.
   -
   ForwardIt2 must meet the requirements of ForwardIterator.

.SH Return value

   Iterator to the first element in the range [first, last) that is equal to an element
   from the range [s_first; s_last). If no such element is found, last is returned.

.SH Complexity

   Does at most (S*N) comparisons where S = distance(s_first, s_last) and N =
   distance(first, last).

.SH Possible implementation

.SH First version
   template<class InputIt, class ForwardIt>
   InputIt find_first_of(InputIt first, InputIt last,
                         ForwardIt s_first, ForwardIt s_last)
   {
       for (; first != last; ++first) {
           for (ForwardIt it = s_first; it != s_last; ++it) {
               if (*first == *it) {
                   return first;
               }
           }
       }
       return last;
   }
.SH Second version
   template<class InputIt, class ForwardIt, class BinaryPredicate>
   InputIt find_first_of(InputIt first, InputIt last,
                         ForwardIt s_first, ForwardIt s_last,
                         BinaryPredicate p)
   {
       for (; first != last; ++first) {
           for (ForwardIt it = s_first; it != s_last; ++it) {
               if (p(*first, *it)) {
                   return first;
               }
           }
       }
       return last;
   }

.SH Example

   The following code searches for any of specified integers in a vector of integers:

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>

 int main()
 {
     std::vector<int> v{0, 2, 3, 25, 5};
     std::vector<int> t{3, 19, 10, 2};

     auto result = std::find_first_of(v.begin(), v.end(), t.begin(), t.end());

     if (result == v.end()) {
         std::cout << "no elements of v were equal to 3, 19, 10 or 2\\n";
     } else {
         std::cout << "found a match at "
                   << std::distance(v.begin(), result) << "\\n";
     }
  }

.SH Output:

 found a match at 1

.SH See also

   find
   find_if     finds the first element satisfying specific criteria
   find_if_not \fI(function template)\fP
   \fI(C++11)\fP
