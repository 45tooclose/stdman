.TH std::less 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::less \- std::less

.SH Synopsis
   Defined in header <functional>
   template< class T >             \fI(until C++14)\fP
   struct less;
   template< class T = void >      \fI(since C++14)\fP
   struct less;

   Function object for performing comparisons. Unless specialized, invokes operator< on
   type T.

.SH Specializations

   The partial specialization of std::less for any pointer type yields a total order,
   even if the built-in operator< does not.

   The standard library provides a specialization of std::less when T is
   not specified, which leaves the parameter types and return type to be
   deduced.
                                                                          \fI(since C++14)\fP
              function object implementing x < y deducing argument and
   less<void> return types
              \fI(class template specialization)\fP 

.SH Member types

   type                 definition
   result_type          bool
   first_argument_type  T
   second_argument_type T

.SH Member functions

   operator() checks if the first argument is less than the second
              \fI(public member function)\fP

std::less::operator()

   bool operator()( const T& lhs, const T& rhs ) const;            \fI(until C++14)\fP
   constexpr bool operator()( const T& lhs, const T& rhs ) const;  \fI(since C++14)\fP

   Checks whether lhs is less than rhs.

.SH Parameters

   lhs, rhs - values to compare

.SH Return value

   true if lhs < rhs, false otherwise.

.SH Exceptions

   \fI(none)\fP

.SH Possible implementation

   constexpr bool operator()(const T &lhs, const T &rhs) const
   {
       return lhs < rhs;
   }

.SH Example

   
// Run this code

 #include <functional>
 #include <iostream>
  
 template <typename A, typename B, typename U = std::less<int>>
 bool f(A a, B b, U u = U())
 {
     return u(a, b);
 }
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << f(5, 20) << '\\n';
     std::cout << f(100, 10) << '\\n';
 }

.SH Output:

 true
 false

.SH See also

   owner_less provides mixed-type owner-based ordering of shared and weak pointers
   \fI(C++11)\fP    \fI(class template)\fP 
