.TH std::deque 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <deque>
   template<

       class T,
       class Allocator = std::allocator<T>

   > class deque;

   std::deque (double-ended queue) is an indexed sequence container that allows fast
   insertion and deletion at both its beginning and its end. In addition, insertion and
   deletion at either end of a deque never invalidates pointers or references to the
   rest of the elements.

   As opposed to std::vector, the elements of a deque are not stored contiguously:
   typical implementations use a sequence of individually allocated fixed-size arrays.

   The storage of a deque is automatically expanded and contracted as needed. Expansion
   of a deque is cheaper than the expansion of a std::vector because it does not
   involve copying of the existing elements to a new memory location.

   The complexity (efficiency) of common operations on deques is as follows:

     * Random access - constant O(1)
     * Insertion or removal of elements at the end or beginning - amortized constant
       O(1)
     * Insertion or removal of elements - linear O(n)

   std::deque meets the requirements of Container, AllocatorAwareContainer,
   SequenceContainer and ReversibleContainer.

.SH Template parameters

               The type of the elements.

               T must meet the requirements of CopyAssignable and         \fI(until C++11)\fP
               CopyConstructible.
               The requirements that are imposed on the elements depend
   T         - on the actual operations performed on the container.
               Generally, it is required that element type meets the      \fI(since C++11)\fP
               requirements of MoveConstructible and MoveAssignable, but
               many member functions impose stricter requirements.

               
   Allocator - An allocator that is used to acquire memory to store the elements. The
               type must meet the requirements of Allocator. 

.SH Member types

   Member type            Definition
   value_type             T 
   allocator_type         Allocator 
   size_type              Unsigned integral type (usually std::size_t) 
   difference_type        Signed integer type (usually std::ptrdiff_t) 
   reference              Allocator::reference \fI(until C++11)\fP
                          value_type& \fI(since C++11)\fP 
   const_reference        Allocator::const_reference \fI(until C++11)\fP
                          const value_type& \fI(since C++11)\fP 
                          Allocator::pointer \fI(until C++11)\fP
   pointer                std::allocator_traits<Allocator>::pointer \fI(since C++11)\fP
                          
                          Allocator::const_pointer \fI(until C++11)\fP
   const_pointer          std::allocator_traits<Allocator>::const_pointer \fI(since C++11)\fP
                          
   iterator               RandomAccessIterator 
   const_iterator         Constant random access iterator 
   reverse_iterator       std::reverse_iterator<iterator> 
   const_reverse_iterator std::reverse_iterator<const_iterator> 

.SH Member functions

   constructor   constructs the deque
                 \fI(public member function)\fP 
   destructor    destructs the deque
                 \fI(public member function)\fP 
   operator=     assigns values to the container
                 \fI(public member function)\fP 
   assign        assigns values to the container
                 \fI(public member function)\fP 
   get_allocator returns the associated allocator
                 \fI(public member function)\fP 
.SH Element access
   at            access specified element with bounds checking
                 \fI(public member function)\fP 
   operator[]    access specified element
                 \fI(public member function)\fP 
   front         access the first element
                 \fI(public member function)\fP 
   back          access the last element
                 \fI(public member function)\fP 
.SH Iterators
   begin         returns an iterator to the beginning
   cbegin        \fI(public member function)\fP 
   end           returns an iterator to the end
   cend          \fI(public member function)\fP 
   rbegin        returns a reverse iterator to the beginning
   crbegin       \fI(public member function)\fP 
   rend          returns a reverse iterator to the end
   crend         \fI(public member function)\fP 
.SH Capacity
   empty         checks whether the container is empty
                 \fI(public member function)\fP 
   size          returns the number of elements
                 \fI(public member function)\fP 
   max_size      returns the maximum possible number of elements
                 \fI(public member function)\fP 
   shrink_to_fit reduces memory usage by freeing unused memory
   \fI(C++11)\fP       \fI(public member function)\fP 
.SH Modifiers
   clear         clears the contents
                 \fI(public member function)\fP 
   insert        inserts elements
                 \fI(public member function)\fP 
   emplace       constructs element in-place
   \fI(C++11)\fP       \fI(public member function)\fP 
   erase         erases elements
                 \fI(public member function)\fP 
   push_back     adds elements to the end
                 \fI(public member function)\fP 
   emplace_back  constructs elements in-place at the end
   \fI(C++11)\fP       \fI(public member function)\fP 
   pop_back      removes the last element
                 \fI(public member function)\fP 
   push_front    inserts elements to the beginning
                 \fI(public member function)\fP 
   emplace_front constructs elements in-place at the beginning
   \fI(C++11)\fP       \fI(public member function)\fP 
   pop_front     removes the first element
                 \fI(public member function)\fP 
   resize        changes the number of elements stored
                 \fI(public member function)\fP 
   swap          swaps the contents
                 \fI(public member function)\fP 

.SH Non-member functions

   operator==
   operator!=
   operator<             lexicographically compares the values in the deque
   operator<=            \fI(function template)\fP 
   operator>
   operator>=
   std::swap(std::deque) specializes the std::swap algorithm
                         \fI(function template)\fP 
