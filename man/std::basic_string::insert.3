.TH std::basic_string::insert 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   basic_string& insert( size_type index,       \fB(1)\fP
   size_type count, CharT ch );
   basic_string& insert( size_type index, const \fB(2)\fP
   CharT* s );
   basic_string& insert( size_type index, const \fB(3)\fP
   CharT* s, size_type count );
   basic_string& insert( size_type index, const \fB(4)\fP
   basic_string& str );
   basic_string& insert( size_type index, const
   basic_string& str,                                   (until
                         size_type index_str,           C++14)
   size_type count );
   basic_string& insert( size_type index, const
   basic_string& str,                                   (since
                         size_type index_str,           C++14)
   size_type count = npos);
   iterator insert( iterator pos, CharT ch );                   (until
                                                                C++11)
   iterator insert( const_iterator pos, CharT                   (since
   ch );                                        \fB(5)\fP             C++11)
   void insert( iterator pos, size_type count,                          (until
   CharT ch );                                                          C++11)
   iterator insert( const_iterator pos,                                 (since
   size_type count, CharT ch );                     \fB(6)\fP                 C++11)
   template< class InputIt >                                                    (until
   void insert( iterator pos, InputIt first,            \fB(7)\fP                     C++11)
   InputIt last );
   template< class InputIt >                                    \fB(8)\fP             (since
   iterator insert( const_iterator pos, InputIt                                 C++11)
   first, InputIt last );
   iterator insert( const_iterator pos,                                 \fB(9)\fP     (since
   std::initializer_list<CharT> ilist );                                        C++11)

   Inserts characters into the string.

   1) Inserts count copies of character ch at the position index
   2) Inserts null-terminated character string pointed to by s at the position index.
   The length of the string is determined by the first null character (effectively
   calls Traits::length(s).
   3) Inserts the first count characters from the character string pointed to by s at
   the position index. s can contain null characters.
   4) Inserts string str at the position index
   5) Inserts a string, obtained by str.substr(index_str, count) at the position index
   6) Inserts character ch before the character pointed by pos
   7) Inserts count copies of character ch before the element pointed by pos
   8) Inserts characters from the range [first, last) before the element pointed by pos
   9) Inserts elements from initializer list ilist before the element pointed by pos

.SH Parameters

   index       - position at which the content will be inserted
   pos         - iterator before which the characters will be inserted
   ch          - character to insert
   count       - number of characters to insert
   s           - pointer to the character string to insert
   str         - string to insert
   first, last - range defining characters to insert
   index_str   - position of the first character in the string str to insert
   ilist       - initializer list to insert the characters from
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.

.SH Return value

   1-5) *this
   6-9) An iterator which refers to the copy of the first inserted character or pos if
   no characters were inserted (count==0 or first==last or ilist.size()==0)

.SH Exceptions

   1) std::out_of_range if index > size() and std::length_error if size() + count >
   max_size().
   2) std::out_of_range if index > size() and std::length_error if size() +
   Traits::length(s) > max_size().
   3) std::out_of_range if index > size() and std::length_error if size() + count >
   max_size().
   4) Throws exceptions on the following conditions:
   a) std::out_of_range if index > size().
   b) std::length_error if size() + str.size() > max_size() where ins_count is the
   number of characters that will be inserted.
   5) Throws exceptions on the following conditions:
   a) std::out_of_range if index > size().
   b) std::out_of_range if index_str > str.size().
   c) std::length_error if size() + ins_count > max_size() where ins_count is the
   number of characters that will be inserted.
   6-9) \fI(none)\fP

   In any case, if an exception is thrown for any reason, this function has no effect
   \fI(strong exception guarantee)\fP.
   \fI(since C++11)\fP

.SH See also

   append    appends characters to the end
             \fI(public member function)\fP 
   push_back appends a character to the end
             \fI(public member function)\fP 
