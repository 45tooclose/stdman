.TH std::literals::chrono_literals::operator""s 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <chrono>
   constexpr chrono::seconds operator "" s(unsigned long long secs);  \fB(1)\fP \fI(since C++14)\fP
   constexpr chrono::duration</*unspecified*/> operator "" s(long     \fB(2)\fP \fI(since C++14)\fP
   double secs);

   Forms a std::chrono::duration literal representing seconds.

   1) integer literal, returns exactly std::chrono::seconds(secs)
   2) floating-point literal, returns a floating-point duration equivalent to
   std::chrono::seconds

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Possible implementation
     * 4 Notes
     * 5 Example
     * 6 See also

.SH Parameters

   secs - the number of seconds

.SH Return value

   The std::chrono::duration literal.

.SH Possible implementation

   constexpr std::chrono::seconds operator ""s(unsigned long long s)
   {
       return std::chrono::seconds(m);
   }
   constexpr std::chrono::duration<long double> operator ""s(long double s)
   {
       return std::chrono::duration<long double>(s);
   }

.SH Notes

   These operators are declared in the namespace std::literals::chrono_literals, where
   both literals and chrono_literals are inline namespaces.

   std::string also defines operator""s, to represent literal objects of type
   std::string, but it is a string literal: 10s is ten seconds, but "10"s is a
   two-character string.

.SH Example

   
// Run this code

 #include <iostream>
 #include <chrono>

 int main()
 {
     using namespace std::literals::chrono_literals;
     auto halfmin = 30s;
     std::cout << "half a minute is " << halfmin.count() << " seconds\\n"
               << "a minute and a half is " << (1min + 30s).count() << " seconds\\n";
 }

.SH Output:

 half a minute is 30 seconds
 a minute and a half is 90 seconds

.SH See also

   constructor   constructs new duration
                 \fI(public member function of std::chrono::duration)\fP
