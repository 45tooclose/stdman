.TH std::sort 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >                                \fB(1)\fP
   void sort( RandomIt first, RandomIt last );
   template< class RandomIt, class Compare >                 \fB(2)\fP
   void sort( RandomIt first, RandomIt last, Compare comp );

   Sorts the elements in the range [first, last) in ascending order. The order of equal
   elements is not guaranteed to be preserved. The first version uses operator< to
   compare the elements, the second version uses the given comparison function object
   comp.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Complexity
     * 4 Example
     * 5 See also

.SH Parameters

   first, last - the range of elements to sort
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less (i.e. is ordered before) the second element.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                 bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type RandomIt
                 can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
   -
   RandomIt must meet the requirements of ValueSwappable and RandomAccessIterator.
   -
   The type of dereferenced RandomIt must meet the requirements of MoveAssignable and
   MoveConstructible.
   -
   Compare must meet the requirements of Compare.

.SH Return value

   \fI(none)\fP

.SH Complexity

   O(N·log(N)), where N = std::distance(first, last) comparisons on       \fI(until C++11)\fP
   average.
   O(N·log(N)), where N = std::distance(first, last) comparisons.         \fI(since C++11)\fP

.SH Example

   
// Run this code

 #include <algorithm>
 #include <functional>
 #include <array>
 #include <iostream>

 int main()
 {
     std::array<int, 10> s = {5, 7, 4, 2, 8, 6, 1, 9, 0, 3};

     // sort using the default operator<
     std::sort(s.begin(), s.end());
     for (int a : s) {
         std::cout << a << " ";
     }
     std::cout << '\\n';

     // sort using a standard library compare function object
     std::sort(s.begin(), s.end(), std::greater<int>());
     for (int a : s) {
         std::cout << a << " ";
     }
     std::cout << '\\n';

     // sort using a custom function object
     struct {
         bool operator()(int a, int b)
         {
             return a < b;
         }
     } customLess;
     std::sort(s.begin(), s.end(), customLess);
     for (int a : s) {
         std::cout << a << " ";
     }
     std::cout << '\\n';

     // sort using a lambda expression
     std::sort(s.begin(), s.end(), [](int a, int b) {
         return b < a;
     });
     for (int a : s) {
         std::cout << a << " ";
     }
     std::cout << '\\n';
 }

.SH Output:

 0 1 2 3 4 5 6 7 8 9
 9 8 7 6 5 4 3 2 1 0
 0 1 2 3 4 5 6 7 8 9
 9 8 7 6 5 4 3 2 1 0

.SH See also

   partial_sort sorts the first N elements of a range
                \fI(function template)\fP
   stable_sort  sorts a range of elements while preserving order between equal elements
                \fI(function template)\fP
