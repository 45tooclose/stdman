.TH std::rend 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <iterator>
   template< class C >                                 \fB(1)\fP \fI(since C++14)\fP
   auto rend( C& c ) -> decltype(c.rend());
   template< class C >                                 \fB(1)\fP \fI(since C++14)\fP
   auto rend( const C& c ) -> decltype(c.rend());
   template< class T, size_t N >                       \fB(2)\fP \fI(since C++14)\fP
   reverse_iterator<T*> rend( T (&array)[N] );
   template< class C >                                 \fB(3)\fP \fI(since C++14)\fP
   auto crend( const C& c ) -> decltype(std::rend(c));

   Returns an iterator to the reverse-end of the given container c or array array.

   1) Returns a possibly const-qualified iterator to the reverse-end of the container
   c.
   2) Returns std::reverse_iterator<T*> to the reverse-end of the array array.
   3) Returns a const-qualified iterator to the reverse-end of the container c.

   range-rbegin-rend.svg

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Notes
     * 4 Specializations
     * 5 Example
     * 6 See also

.SH Parameters

   c     - a container with a rend method
   array - an array of arbitrary type

.SH Return value

   An iterator to the reverse-end of c or array

.SH Notes

   In addition to being included in <iterator>, std::rend is guaranteed to become
   available if any of the following headers are included: <array>, <deque>,
   <forward_list>, <list>, <map>, <regex>, <set>, <string>, <unordered_map>,
   <unordered_set>, and <vector>.

.SH Specializations

   Custom specializations of std::rend may be provided for classes that do not expose a
   suitable rend() member function, yet can be iterated. The following specializations
   are already provided by the standard library:

   rend(std::initializer_list) specializes std::rend
   \fI(C++14)\fP                     \fI(function)\fP

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   rbegin  returns a reverse iterator to a container or array
   crbegin \fI(function)\fP
   \fI(C++14)\fP

.SH Category:

     * Todo no example
