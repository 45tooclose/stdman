.TH std::max_element 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt >                                             \fB(1)\fP
   ForwardIt max_element( ForwardIt first, ForwardIt last );
   template< class ForwardIt, class Compare >                              \fB(2)\fP
   ForwardIt max_element( ForwardIt first, ForwardIt last, Compare comp );

   Finds the greatest element in the range [first, last). The first version uses
   operator< to compare the values, the second version uses the given comparison
   function comp.

.SH Parameters

   first, last - forward iterators defining the range to examine
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if if *a is less than *b.

                 The signature of the comparison function should be equivalent to the
                 following:

   cmp         -  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type
                 ForwardIt can be dereferenced and then implicitly converted to both of
                 them. 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   Iterator to the greatest element in the range [first, last). If several elements in
   the range are equivalent to the greatest element, returns the iterator to the first
   such element. Returns last if the range is empty.

.SH Complexity

   Exactly max(N-1,0) comparisons, where N = std::distance(first, last).

.SH Possible implementation

.SH First version
   template<class ForwardIt>
   ForwardIt max_element(ForwardIt first, ForwardIt last)
   {
       if (first == last) {
           return last;
       }
       ForwardIt largest = first;
       ++first;
       for (; first != last; ++first) {
           if (*largest < *first) {
               largest = first;
           }
       }
       return largest;
   }
.SH Second version
   template<class ForwardIt, class Compare>
   ForwardIt max_element(ForwardIt first, ForwardIt last,
                               Compare comp)
   {
       if (first == last) {
           return last;
       }
       ForwardIt largest = first;
       ++first;
       for (; first != last; ++first) {
           if (comp(*largest, *first)) {
               largest = first;
           }
       }
       return largest;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>
 #include <cmath>
  
 static bool abs_compare(int a, int b)
 {
     return (std::abs(a) < std::abs(b));
 }
  
 int main()
 {
     std::vector<int> v{ 3, 1, -14, 1, 5, 9 };
     std::vector<int>::iterator result;
  
     result = std::max_element(v.begin(), v.end());
     std::cout << "max element at: " << std::distance(v.begin(), result) << '\\n';
  
     result = std::max_element(v.begin(), v.end(), abs_compare);
     std::cout << "max element (absolute) at: " << std::distance(v.begin(), result);
 }

.SH Output:

 max element at: 5
 max element (absolute) at: 2

.SH See also

   min_element    returns the smallest element in a range
                  \fI(function template)\fP 
   minmax_element returns the smallest and the largest element in a range
   \fI(C++11)\fP        \fI(function template)\fP 
   max            returns the larger of two elements
                  \fI(function template)\fP 
