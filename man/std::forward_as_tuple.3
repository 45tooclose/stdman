.TH std::forward_as_tuple 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <tuple>
   template< class... Types >                                        \fI(since C++11)\fP
   tuple<Types&&...> forward_as_tuple( Types&&... args );            \fI(until C++14)\fP
   template< class... Types >                                        \fI(since C++14)\fP
   constexpr tuple<Types&&...> forward_as_tuple( Types&&... args );

   Constructs a tuple of references to the arguments in args suitable for forwarding as
   an argument to a function. The tuple has rvalue reference data members when rvalues
   are used as arguments, and otherwise has lvalue reference data members. If rvalues
   are used, the result of this function must be consumed before the next sequence
   point.

.SH Parameters

   args - zero or more arguments to construct the tuple from

.SH Return value

   A std::tuple object created as if by
   std::tuple<Types&&...>(std::forward<Types>(args)...)

.SH Exceptions

   noexcept specification:  
   noexcept
     

.SH Example

   
// Run this code

 #include <iostream>
 #include <map>
 #include <tuple>
 #include <string>
  
 int main()
 {
     std::map<int, std::string> m;
  
     m.emplace(std::piecewise_construct,
               std::forward_as_tuple(10),
               std::forward_as_tuple(20, 'a'));
     std::cout << "m[10] = " << m[10] << '\\n';
  
     // The following is an error: it produces a
     // std::tuple<int&&, char&&> holding two dangling references.
     //
     // auto t = std::forward_as_tuple(20, 'a');
     // m.emplace(std::piecewise_construct, std::forward_as_tuple(10), t);
 }

.SH Output:

 m[10] = aaaaaaaaaaaaaaaaaaaa

   make_tuple creates a tuple object of the type defined by the argument types
              \fI(function template)\fP 
              creates a tuple of lvalue references or unpacks a tuple into individual
   tie        objects
              \fI(function template)\fP 
   tuple_cat  creates a tuple by concatenating any number of tuples
              \fI(function template)\fP 
