.TH std::numeric_limits::tinyness_before 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   static const bool tinyness_before;      \fI(until C++11)\fP
   static constexpr bool tinyness_before;  \fI(since C++11)\fP

   The value of std::numeric_limits<T>::tinyness_before is true for all floating-point
   types T that test results of floating-point expressions for underflow before
   rounding.

.SH Contents

     * 1 Standard specializations
     * 2 Notes
     * 3 Example
     * 4 See also

.SH Standard specializations

   T                     value of std::numeric_limits<T>::tinyness_before
   /* non-specialized */ false
   bool                  false
   char                  false
   signed char           false
   unsigned char         false
   wchar_t               false
   char16_t              false
   char32_t              false
   short                 false
   unsigned short        false
   int                   false
   unsigned int          false
   long                  false
   unsigned long         false
   long long             false
   unsigned long long    false
   float                 implementation-defined
   double                implementation-defined
   long double           implementation-defined

.SH Notes

   Standard-compliant IEEE 754 floating-point implementations may detect the
   floating-point underflow at three predefined moments:

   1) after computation of a result with absolute value smaller than
   std::numeric_limits<T>::min(), such implementation detects tinyness before rounding
   (e.g. UltraSparc)

   2) after rounding of the result to std::numeric_limits<T>::digits bits, if the
   result is tiny, such implementation detects tinyness after rounding (e.g.
   SuperSparc)

   3) if the conversion of the rounded tiny result to subnormal form resulted in the
   loss of precision, such implementation detects denorm loss.

.SH Example

   Multiplication of the largest subnormal number by the number one machine epsilon
   greater than 1.0 gives the tiny value 0x0.fffffffffffff8p-1022 before rounding, but
   normal value 1p-1022 after rounding. The implementation used to execute this test
   (IBM Power7) detects tinyness before rounding.

   
// Run this code

 #include <iostream>
 #include <limits>
 #include <cmath>
 #include <cfenv>
 int main()
 {
     std::cout << "Tinyness before: " << std::boolalpha
               << std::numeric_limits<double>::tinyness_before << '\\n';

     double denorm_max = std::nextafter(std::numeric_limits<double>::min(), 0);
     double multiplier = 1 + std::numeric_limits<double>::epsilon();

     std::feclearexcept(FE_ALL_EXCEPT);

     double result = denorm_max*multiplier; // Underflow only if tinyness_before

     if(std::fetestexcept(FE_UNDERFLOW))
         std::cout << "Underflow detected\\n";
     else if (std::fetestexcept(FE_INEXACT))
         std::cout << "Inexact result detected\\n";

     std::cout << std::hexfloat << denorm_max << " x " << multiplier  <<  " = "
               << result << '\\n';
 }

.SH Possible output:

 Tinyness before: true
 Underflow detected
 0xf.ffffffffffffp-1030 x 0x1.0000000000001p+0 = 0x1p-1022

.SH See also

   has_denorm_loss identifies the floating-point types that detect loss of precision as
   \fB[static]\fP        denormalization loss rather than inexact result
                   \fI(public static member constant)\fP
   has_denorm      identifies the denormalization style used by the floating-point type
   \fB[static]\fP        \fI(public static member constant)\fP
