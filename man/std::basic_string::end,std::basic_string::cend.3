.TH std::basic_string::end,std::basic_string::cend 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   iterator end();
   const_iterator end() const;
   const_iterator cend() const;  \fI(since C++11)\fP

   Returns an iterator to the character following the last character of the string.
   This character acts as a placeholder, attempting to access it results in undefined
   behavior.

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   iterator to the character following the last character

.SH Exceptions

   \fI(none)\fP                  \fI(until C++11)\fP
   noexcept specification: \fI(since C++11)\fP
   noexcept

.SH Complexity

   Constant

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <iterator>
 #include <string>

 int main()
 {
     std::string s("Exemparl");
     std::next_permutation(s.begin(), s.end());

     std::string c;
     std::copy(s.cbegin(), s.cend(), std::back_inserter(c));
     std::cout << c <<'\\n'; // "Exemplar"
 }

.SH Output:

 Exemplar

.SH See also

   begin   returns an iterator to the beginning
   cbegin  \fI(public member function)\fP
   \fI(C++11)\fP

.SH Category:

     * unconditionally noexcept
