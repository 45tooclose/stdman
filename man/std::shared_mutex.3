.TH std::shared_mutex 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::shared_mutex \- std::shared_mutex

.SH Synopsis
   Defined in header <shared_mutex>
   class shared_mutex;               \fI(since C++17)\fP

   The shared_mutex class is a synchronization primitive that can be used to protect
   shared data from being simultaneously accessed by multiple threads. In contrast to
   other mutex types which facilitate exclusive access, a shared_mutex has two levels
   of access:

     * shared - several threads can share ownership of the same mutex.

     * exclusive - only one thread can own the mutex.

   Shared mutexes are usually used in situations when multiple readers can access the
   same resource at the same time without causing data races, but only one writer can
   do so.

   The shared_mutex class satisfies all requirements of SharedMutex and
   StandardLayoutType.

.SH Member types

   Member type        Definition
   native_handle_type implementation-defined

.SH Member functions

   constructor     constructs the mutex
                   \fI(public member function)\fP 
   destructor      destroys the mutex
                   \fI(public member function)\fP 
   operator=       not copy-assignable
   [deleted]       \fI(public member function)\fP 
         Exclusive locking
   lock            locks the mutex, blocks if the mutex is not available
                   \fI(public member function)\fP 
   try_lock        tries to lock the mutex, returns if the mutex is not available
                   \fI(public member function)\fP 
   unlock          unlocks the mutex
                   \fI(public member function)\fP 
.SH Shared locking
                   locks the mutex for shared ownership, blocks if the mutex is not
   lock_shared     available
                   \fI(public member function)\fP 
                   tries to lock the mutex for shared ownership, returns if the mutex
   try_lock_shared is not available
                   \fI(public member function)\fP 
   unlock_shared   unlocks the mutex (shared ownership)
                   \fI(public member function)\fP 
.SH Native handle
   native_handle   returns the underlying implementation-defined thread handle
                   \fI(public member function)\fP 

    This section is incomplete
    Reason: build a motivating example

   A copy assignment operator for a class that holds resources that can handle multiple
   readers, but only one writer

   
// Run this code

 class R
 {
     mutable std::shared_mutex mut;
     /* data */
 public:
     R& operator=(const R& other)
     {
         // requires exclusive ownership to write to *this
         std::unique_lock<std::shared_mutex> lhs(mut, std::defer_lock);
         // requires shared ownership to read from other
         std::shared_lock<std::shared_mutex> rhs(other.mut, std::defer_lock);
         std::lock(lhs, rhs);
         /* assign data */
         return *this;
     }
 }

.SH See also

   shared_timed_mutex provides shared mutual exclusion facility
   \fI(C++14)\fP            \fI(class)\fP 

.SH Category:

     * Todo with reason
