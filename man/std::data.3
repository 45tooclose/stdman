.TH std::data 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::data \- std::data

.SH Synopsis
   Defined in header <iterator>
   Defined in header <array>
   Defined in header <deque>
   Defined in header <forward_list>
   Defined in header <list>
   Defined in header <map>
   Defined in header <regex>
   Defined in header <set>
   Defined in header <string>
   Defined in header <unordered_map>
   Defined in header <unordered_set>
   Defined in header <vector>
   template <class C>                                             \fB(1)\fP (since C++17)
   constexpr auto data(C& c) -> decltype(c.data());
   template <class C>                                             \fB(2)\fP (since C++17)
   constexpr auto data(const C& c) -> decltype(c.data());
   template <class T, std::size_t N>                              \fB(3)\fP (since C++17)
   constexpr T* data(T (&array)[N]) noexcept;
   template <class E>                                             \fB(4)\fP (since C++17)
   constexpr const E* data(std::initializer_list<E> il) noexcept;

   Returns a pointer to the block of memory containing the elements of the container.

   1,2) returns c.data()
   3) returns array
   4) returns il.begin()

.SH Parameters

   c     - a container with a data() method
   array - an array of arbitrary type
   il    - an initializer list

.SH Return value

   A pointer to the block of memory containing the elements of the container.

.SH Exceptions

   3,4)
   noexcept specification:  
   noexcept
     

.SH Possible implementation

.SH First version
   template <class C>
   constexpr auto data(C& c) -> decltype(c.data());
   {
       return c.data();
   }
.SH Second version
   template <class C>
   constexpr auto data(const C& c) -> decltype(c.data());
   {
       return c.data();
   }
                           Third version
   template <class T, std::size_t N>
   constexpr T* data(T (&array)[N]) noexcept;
   {
       return array;
   }
                           Fourth version
   template <class E>
   constexpr const E* data(std::initializer_list<E> il) noexcept;
   {
       return il.begin();
   }

.SH Example

    This section is incomplete
    Reason: no example

   Categories:

     * unconditionally noexcept
     * Todo no example
