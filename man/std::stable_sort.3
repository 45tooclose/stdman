.TH std::stable_sort 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >                                       \fB(1)\fP
   void stable_sort( RandomIt first, RandomIt last );
   template< class RandomIt, class Compare >                        \fB(2)\fP
   void stable_sort( RandomIt first, RandomIt last, Compare comp );

   Sorts the elements in the range [first, last) in ascending order. The order of equal
   elements is guaranteed to be preserved. The first version uses operator< to compare
   the elements, the second version uses the given comparison function comp.

.SH Parameters

   first, last - the range of elements to sort
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less (i.e. is ordered before) the second element.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type RandomIt
                 can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
   -
   RandomIt must meet the requirements of ValueSwappable and RandomAccessIterator.
   -
   The type of dereferenced RandomIt must meet the requirements of MoveAssignable and
   MoveConstructible.

.SH Return value

   \fI(none)\fP

.SH Complexity

   O(N·log^2(N)), where N = std::distance(first, last) applications of cmp. If
   additional memory is available, then the complexity is O(N·log(N)).

.SH Notes

   This function attempts to allocate a temporary buffer equal in size to the sequence
   to be sorted, typically by calling std::get_temporary_buffer. If the allocation
   fails, the less efficient algorithm is chosen.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <string>
 #include <vector>
  
 struct Employee {
     Employee(int age, std::string name) : age(age), name(name) { }
     int age;
     std::string name;  // Does not particpate in comparisons
 };
  
 bool operator<(const Employee &lhs, const Employee &rhs) {
     return lhs.age < rhs.age;
 }
  
 int main()
 {
     std::vector<Employee> v = {
         Employee(108, "Zaphod"),
         Employee(32, "Arthur"),
         Employee(108, "Ford"),
     };
  
     std::stable_sort(v.begin(), v.end());
  
     for (const Employee &e : v) {
         std::cout << e.age << ", " << e.name << '\\n';
     }
 }

.SH Output:

 32, Arthur
 108, Zaphod
 108, Ford

.SH See also

   partial_sort sorts the first N elements of a range
                \fI(function template)\fP 
   sort         sorts a range into ascending order
                \fI(function template)\fP 
