.TH std::copy_n 3 "Nov 16 2016" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::copy_n \- std::copy_n

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class Size, class OutputIt >              \fB(1)\fP \fI(since C++11)\fP
   OutputIt copy_n( InputIt first, Size count, OutputIt result );
   template< class ExecutionPolicy, class InputIt, class Size, class
   OutputIt >                                                         \fB(2)\fP \fI(since C++17)\fP
   OutputIt copy_n( ExecutionPolicy&& policy, InputIt first, Size
   count, OutputIt result );

   1) Copies exactly count values from the range beginning at first to the range
   beginning at result, if count>0. Does nothing otherwise.
   2) Same as \fB(1)\fP, but executed according to policy. This overload does not participate
   in overload resolution unless
   std::is_execution_policy_v<std::decay_t<ExecutionPolicy>> is true

.SH Parameters

   first  - the beginning of the range of elements to copy from
   count  - number of the elements to copy
   result - the beginning of the destination range
   policy - the execution policy to use. See execution policy for details.
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.

.SH Return value

   Iterator in the destination range, pointing past the last element copied if count>0
   or result otherwise.

.SH Complexity

   Exactly count assignments, if count>0.

.SH Exceptions

   The overload with a template parameter named ExecutionPolicy reports errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception,
       std::terminate is called.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Possible implementation

   template< class InputIt, class Size, class OutputIt>
   OutputIt copy_n(InputIt first, Size count, OutputIt result)
   {
       if (count > 0) {
           *result++ = *first;
           for (Size i = 1; i < count; ++i) {
               *result++ = *++first;
           }
       }
       return result;
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <algorithm>
 #include <iterator>

 int main()
 {
     std::string in = "1234567890";
     std::string out;

     std::copy_n(in.begin(), 4, std::back_inserter(out));
     std::cout << out << '\\n';
 }

.SH Output:

 1234

.SH See also

   copy                                copies a range of elements to a new location
   copy_if                             \fI(function template)\fP
   \fI(C++11)\fP
   std::experimental::parallel::copy_n parallelized version of std::copy_n
   (parallelism TS)                    \fI(function template)\fP
