.TH std::advance 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <iterator>
   template< class InputIt, class Distance >
   void advance( InputIt& it, Distance n );

   Increments given iterator it by n elements.

   If n is negative, the iterator is decremented. In this case, InputIt must meet the
   requirements of BidirectionalIterator, otherwise the behavior is undefined.

.SH Parameters

   it    -   iterator to be advanced
   n     -   number of elements it should be advanced
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear.

   However, if InputIt additionally meets the requirements of RandomAccessIterator,
   complexity is constant.

.SH Example

   
// Run this code

 #include <iostream>
 #include <iterator>
 #include <vector>

 int main()
 {
     std::vector<int> v{ 3, 1, 4 };

     auto vi = v.begin();

     std::advance(vi, 2);

     std::cout << *vi << '\\n';
 }

.SH Output:

 4

.SH See also

   next     increment an iterator
   \fI(C++11)\fP  \fI(function)\fP
   distance returns the distance between two iterators
            \fI(function)\fP
