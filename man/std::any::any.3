.TH std::any::any 3 "Nov 16 2016" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::any::any \- std::any::any

.SH Synopsis
   constexpr any();                                                   \fB(1)\fP \fI(since C++17)\fP
   any( const any& other );                                           \fB(2)\fP \fI(since C++17)\fP
   any( any&& other );                                                \fB(3)\fP \fI(since C++17)\fP
   template< class ValueType >                                        \fB(4)\fP \fI(since C++17)\fP
   any( ValueType&& value );
   template< class T, class... Args >                                 \fB(5)\fP \fI(since C++17)\fP
   explicit any( std::in_place_type_t<T>, Args&&... args );
   template< class T, class U, class... Args >

   explicit any( std::in_place_type_t<T>, std::initializer_list<U>    \fB(6)\fP \fI(since C++17)\fP
   il,

   Args&&... args );

   Constructs a new any object.

   1) Constructs an empty object.
   2-3) Copies \fB(2)\fP or moves \fB(3)\fP content of other into a new instance, so that any
   content is equivalent in both type and value to those of other prior to the
   constructor call, or empty if other is empty.
   4) Constructs an object with initial content an object of type
   std::decay_t<ValueType>, direct-initialized from std::forward<ValueType>(value). If
   std::is_copy_constructible<std::decay_t<ValueType>>::value is false, the program is
   ill-formed. This overload only participates in overload resolution if
   std::decay_t<ValueType> is not the same type as any.
   5) Constructs an object with initial content an object of type T,
   direct-non-list-initialized from std::forward<Args>(args).... If
   std::is_constructible_v<T, Args...> is false, the behavior is undefined.
   6) Constructs an object with initial content an object of type T,
   direct-non-list-initialized from il, std::forward<Args>(args).... This overload only
   participates in overload resolution if std::is_constructible_v<T,
   std::initializer_list<U>&, Args...> is true.

.SH Template parameters

   ValueType               -              contained value type
.SH Type requirements
   -
   std::decay_t<ValueType> must meet the requirements of CopyConstructible.

.SH Parameters

   other    - another any object to copy or move from
   value    - value to initialize the contained value with
   il, args - arguments to be passed to the constructor of the contained object

.SH Exceptions

   1,3)
   noexcept specification:
   noexcept
   2,4,5,6) Throws any exception thrown by the constructor of the contained type.

.SH Notes

   Because the default constructor is constexpr, static std::anys are initialized as
   part of static non-local initialization, before any dynamic non-local initialization
   begins. This makes it safe to use an object of type std::any in a constructor of any
   static object.

.SH See also

   operator= assigns an any object
             \fI(public member function)\fP

.SH Category:

     * unconditionally noexcept
