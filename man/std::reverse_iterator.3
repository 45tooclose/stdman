.TH std::reverse_iterator 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <iterator>
   template< class Iterator >

   class reverse_iterator : public std::iterator<
   typename std::iterator_traits<Iterator>::iterator_category,
   typename std::iterator_traits<Iterator>::value_type,
   typename std::iterator_traits<Iterator>::difference_type,
   typename std::iterator_traits<Iterator>::pointer,

   typename std::iterator_traits<Iterator>::reference >

   std::reverse_iterator is an iterator adaptor that reverses the direction of a given
   iterator. In other words, when provided with a bidirectional iterator,
   std::reverse_iterator produces a new iterator that moves from the end to the
   beginning of the sequence defined by the underlying bidirectional iterator.

   For a reverse iterator r constructed from an iterator i, the relationship &*r ==
   &*(i-1) is always true; thus a reverse iterator constructed from a one-past-the-end
   iterator dereferences to the last element in a sequence.

   This is the iterator returned by member functions rbegin() and rend() of the
   standard library containers.

   range-rbegin-rend.svg

.SH Contents

     * 1 Member types
     * 2 Member functions
     * 3 Member objects
     * 4 Non-member functions
     * 5 Inherited from
       std::iterator

          * 5.1 Member types
          * 5.2 Example
          * 5.3 See also

.SH Member types

   Member type     Definition
   iterator_type   Iterator
   difference_type std::iterator_traits<Iterator>::difference_type
   pointer         std::iterator_traits<Iterator>::pointer
   reference       std::iterator_traits<Iterator>::reference

.SH Member functions

   constructor     constructs a new iterator adaptor
                   \fI(public member function)\fP
   operator=       assigns another iterator
                   \fI(public member function)\fP
   base            accesses the underlying iterator
                   \fI(public member function)\fP
   operator*       accesses the pointed-to element
   operator->      \fI(public member function)\fP
   operator[]      obtains rvalue reference to indexed element
                   \fI(public member function)\fP
   operator++
   operator++(int)
   operator+=
   operator+       advances or decrements the iterator
   operator--      \fI(public member function)\fP
   operator--(int)
   operator-=
   operator-

.SH Member objects

   Member name         Definition
   current (protected) a copy of the base() iterator

   In addition to the current value of the underlying iterator, a typical
   implementation of std::reverse_iterator holds a decremented copy of the underlying
   iterator, which is used in dereferencing.

.SH Non-member functions

   operator==
   operator!=
   operator<  compares the underlying iterators
   operator<= \fI(function template)\fP
   operator>
   operator>=
   operator+  advances the iterator
              \fI(function template)\fP
   operator-  computes the distance between two iterator adaptors
              \fI(function template)\fP

Inherited from std::iterator

.SH Member types

   Member type       Definition
   value_type        std::iterator_traits<Iterator>::value_type
   difference_type   std::iterator_traits<Iterator>::difference_type
   pointer           std::iterator_traits<Iterator>::pointer
   reference         std::iterator_traits<Iterator>::reference
   iterator_category std::iterator_traits<Iterator>::iterator_category

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>
 #include <iterator>

 int main()
 {
     std::string s = "Hello, world";
     std::reverse_iterator<std::string::iterator> r = s.rbegin();
     r[7] = 'O'; // replaces 'o' with 'O'
     r += 7; // iterator now points at 'O'
     std::string rev(r, s.rend());
     std::cout << rev << '\\n';
 }

.SH Output:

 OlleH

.SH See also

   iterator the basic iterator
            \fI(class template)\fP
