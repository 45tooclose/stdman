.TH std::is_polymorphic 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_polymorphic;

   If T is a polymorphic class (that is, a class that declares or inherits at least one
   virtual function), provides the member constant value equal true. For any other
   type, value is false.

.SH Contents

     • 1 Inherited from
       std::integral_constant

          • 1.1 Member constants
          • 1.2 Member functions
          • 1.3 Member types
          • 1.4 Notes
          • 1.5 Example
          • 1.6 See also

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a polymorphic class type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Only polymorphic classes contain hidden RTTI information which makes it possible to
   examine and convert them with dynamic_cast.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct A {
     int m;
 };
  
 struct B {
     virtual void foo();
 };
  
 struct C : B {};
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_polymorphic<A>::value << '\\n';
     std::cout << std::is_polymorphic<B>::value << '\\n';
     std::cout << std::is_polymorphic<C>::value << '\\n';
 }

.SH Output:

 false
 true
 true

.SH See also

   is_class    checks if a type is a class type (but not union type)
   \fI(C++11)\fP     \fI(class template)\fP
   is_abstract checks if a type is abstract class type
   \fI(C++11)\fP     \fI(class template)\fP
