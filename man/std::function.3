.TH std::function 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <functional>
   template< class >                   \fI(since C++11)\fP
   class function; /* undefined */
   template< class R, class... Args >  \fI(since C++11)\fP
   class function<R(Args...)>

   Class template std::function is a general-purpose polymorphic function wrapper.
   Instances of std::function can store, copy, and invoke any callable target --
   functions, lambda expressions, bind expressions, or other function objects.

   The stored callable object is called the target of std::function. If a std::function
   contains no target, it is called empty. Invoking the target of an empty
   std::function results in std::bad_function_call exception being thrown.

   std::function satisfies the requirements of CopyConstructible and CopyAssignable.

.SH Contents

     * 1 Member types
     * 2 Member functions

          * 2.1 Target access

     * 3 Non-member functions
     * 4 Helper classes
     * 5 Example
     * 6 See also

.SH Member types

   Type                 Definition
   result_type          R
   argument_type        T if sizeof...(Args)==1 and T is the first and only type in
                        Args...
   first_argument_type  T1 if sizeof...(Args)==2 and T1 is the first of the two types
                        in Args...
   second_argument_type T2 if sizeof...(Args)==2 and T2 is the second of the two types
                        in Args...

.SH Member functions

   constructor   constructs a new std::function instance
                 \fI(public member function)\fP
   destructor    destroys a std::function instance
                 \fI(public member function)\fP
   operator=     assigns a new target
                 \fI(public member function)\fP
   swap          swaps the contents
                 \fI(public member function)\fP
   assign        assigns a new target
                 \fI(public member function)\fP
   operator bool checks if a valid target is contained
                 \fI(public member function)\fP
   operator()    invokes the target
                 \fI(public member function)\fP
.SH Target access
   target_type   obtains the typeid of the stored target of a std::function
                 \fI(public member function)\fP
   target        obtains a pointer to the stored target of a std::function
                 \fI(public member function)\fP

.SH Non-member functions

   std::swap(std::function) specializes the std::swap algorithm
   \fI(C++11)\fP                  \fI(function template)\fP
   operator==               compares an std::function with std::nullptr
   operator!=               \fI(function template)\fP

.SH Helper classes

   std::uses_allocator<std::function> specializes the std::uses_allocator type trait
   \fI(C++11)\fP                            \fI(class template specialization)\fP

.SH Example

   
// Run this code

 #include <functional>
 #include <iostream>

 struct Foo {
     Foo(int num) : num_(num) {}
     void print_add(int i) const { std::cout << num_+i << '\\n'; }
     int num_;
 };

 void print_num(int i)
 {
     std::cout << i << '\\n';
 }

 struct PrintNum {
     void operator()(int i) const
     {
         std::cout << i << '\\n';
     }
 };

 int main()
 {
     // store a free function
     std::function<void(int)> f_display = print_num;
     f_display(-9);

     // store a lambda
     std::function<void()> f_display_42 = []() { print_num(42); };
     f_display_42();

     // store the result of a call to std::bind
     std::function<void()> f_display_31337 = std::bind(print_num, 31337);
     f_display_31337();

     // store a call to a member function
     std::function<void(const Foo&, int)> f_add_display = &Foo::print_add;
     const Foo foo(314159);
     f_add_display(foo, 1);

     // store a call to a member function and object
     using std::placeholders::_1;
     std::function<void(int)> f_add_display2= std::bind( &Foo::print_add, foo, _1 );
     f_add_display2(2);

     // store a call to a function object
     std::function<void(int)> f_display_obj = PrintNum();
     f_display_obj(18);
 }

.SH Output:

 -9
 42
 31337
 314160
 314161
 18

.SH See also

   bad_function_call the exception thrown when invoking an empty std::function
   \fI(C++11)\fP           \fI(class)\fP
   mem_fn            creates a function object out of a pointer to a member
   \fI(C++11)\fP           \fI(function template)\fP
