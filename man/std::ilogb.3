.TH std::ilogb 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cmath>
   int ilogb( float arg );                         \fI(since C++11)\fP
   int ilogb( double arg );                        \fI(since C++11)\fP
   int ilogb( long double arg );                   \fI(since C++11)\fP
   double ilogb( Integral arg );                   \fI(since C++11)\fP
   #define FP_ILOGB0 /*implementation-defined*/    \fI(since C++11)\fP
   #define FP_ILOGBNAN /*implementation-defined*/  \fI(since C++11)\fP

   Extracts the value of the exponent from the floating-point argument arg, and returns
   it as a signed integer value. Formally, the result is the integral part of log
   r|arg| as a signed integral value, for non-zero arg, where r is
   std::numeric_limits<T>::radix and T is the floating-point type of arg.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Notes
     * 4 Example
     * 5 See also

.SH Parameters

   arg - floating point value

.SH Return value

   The floating-point exponent, cast to integer, as if by
   static_cast<int>(std::logb(arg)).

   Domain or range error may occur if arg is zero, FP_ILOGB0 is returned in that case.

   Domain or range error may occur if arg is infinite, INT_MAX is returned in that
   case.

   Domain or range error may occur if arg is NaN, FP_ILOGBNAN is returned in that case.

   If the result cannot be represented as int, the result is undefined.

.SH Notes

   The value of the exponent returned by std::ilogb is always 1 less than the exponent
   retuned by std::frexp because of the different normalization requirements: for the
   exponent e returned by std::ilogb, |arg*r-e
   | is between 1 and r (typically between 1 and 2), but for the exponent e returned by
   std::frexp, |arg*2-e
   | is between 0.5 and 1.

.SH Example

   Compares different floating-point decomposition functions

   
// Run this code

 #include <iostream>
 #include <cmath>
 #include <limits>
 int main()
 {
     double f = 123.45;
     std::cout << "Given the number " << f << " or " << std::hexfloat
               << f << std::defaultfloat << " in hex,\\n";

     double f3;
     double f2 = std::modf(f, &f3);
     std::cout << "modf() makes " << f3 << " + " << f2 << '\\n';

     int i;
     f2 = std::frexp(f, &i);
     std::cout << "frexp() makes " << f2 << " * 2^" << i << '\\n';

     i = std::ilogb(f);
     std::cout << "logb()/ilogb() make " << f/std::scalbn(1.0, i) << " * "
               << std::numeric_limits<double>::radix
               << "^" << std::ilogb(f) << '\\n';
 }

.SH Output:

 Given the number 123.45 or 0x1.edccccccccccdp+6 in hex,
 modf() makes 123 + 0.45
 frexp() makes 0.964453 * 2^7
 logb()/ilogb() make 1.92891 * 2^6

.SH See also

   frexp   decomposes a number into significand and a power of 2
           \fI(function)\fP
   logb    extracts exponent of the number
   \fI(C++11)\fP \fI(function)\fP
   scalbn
   scalbln multiplies a number by FLT_RADIX raised to a power
   \fI(C++11)\fP \fI(function)\fP
   \fI(C++11)\fP
