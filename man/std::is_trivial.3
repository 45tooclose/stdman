.TH std::is_trivial 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_trivial;

   If T is a trivial type (that is, a scalar type, a trivially copyable class with a
   trivial default constructor, or array of such type/class, possibly cv-qualified),
   provides the member constant value equal true. For any other type, value is false.

.SH Contents

     • 1 Inherited from
       std::integral_constant

          • 1.1 Member constants
          • 1.2 Member functions
          • 1.3 Member types
          • 1.4 Notes
          • 1.5 Possible implementation
          • 1.6 Example
          • 1.7 See also

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a trivial type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Only objects (including arrays) of trivial type may be created by a call to
   std::malloc.

.SH Possible implementation

   template< class T >
   struct is_trivial : std::integral_constant<
       bool,
       std::is_trivially_copyable<T>::value &&
       std::is_trivially_default_constructible<T>::value
   > {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct A {
     int m;
 };
  
 struct B {
     B() {}
 };
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_trivial<A>::value << '\\n';
     std::cout << std::is_trivial<B>::value << '\\n';
 }

.SH Output:

 true
 false

.SH See also

   is_trivially_copyable checks if a type is trivially copyable
   \fI(C++11)\fP               \fI(class template)\fP
