.TH std::is_arithmetic 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_arithmetic;

   If T is an arithmetic type (that is, an integral type or a floating-point type),
   provides the member constant value equal true. For any other type, value is false.

.SH Contents

     • 1 Inherited from
       std::integral_constant

          • 1.1 Member constants
          • 1.2 Member functions
          • 1.3 Member types
          • 1.4 Notes
          • 1.5 Possible implementation
          • 1.6 Example
          • 1.7 See also

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an arithmetic type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Arithmetic types are the types for which the built-in arithmetic operators (+, -, *,
   /) are defined (possibly in combination with the usual arithmetic conversions)

   Specializations of std::numeric_limits are provided for all arithmetic types.

.SH Possible implementation

   template< class T >
   struct is_arithmetic : std::integral_constant<bool,
                                                 std::is_integral<T>::value ||
                                                 std::is_floating_point<T>::value> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 class A {};
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_arithmetic<A>::value << '\\n';
     std::cout << std::is_arithmetic<int>::value << '\\n';
     std::cout << std::is_arithmetic<int&>::value << '\\n';
     std::cout << std::is_arithmetic<int*>::value << '\\n';
     std::cout << std::is_arithmetic<float>::value << '\\n';
     std::cout << std::is_arithmetic<float&>::value << '\\n';
     std::cout << std::is_arithmetic<float*>::value << '\\n';
 }

.SH Output:

 false
 true
 false
 false
 true
 false
 false

.SH See also

   is_integral       checks if a type is integral type
   \fI(C++11)\fP           \fI(class template)\fP
   is_floating_point checks if a type is floating-point type
   \fI(C++11)\fP           \fI(class template)\fP
