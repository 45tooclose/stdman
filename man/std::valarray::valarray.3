.TH std::valarray::valarray 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   valarray();                                \fB(1)\fP
   explicit valarray( size_t count );         \fB(2)\fP
   valarray( const T& val, size_t count );    \fB(3)\fP
   valarray( const T* vals, size_t count );   \fB(4)\fP
   valarray( const valarray& other );         \fB(5)\fP
   valarray( valarray&& other );              \fB(6)\fP  \fI(since C++11)\fP
   valarray( const std::slice_array<T>& );    \fB(7)\fP
   valarray( const std::gslice_array<T>& );   \fB(8)\fP
   valarray( const std::mask_array<T>& );     \fB(9)\fP
   valarray( const std::indirect_array<T>& ); \fB(10)\fP
   valarray( std::initializer_list<T> il );   \fB(11)\fP \fI(since C++11)\fP

   Constructs new numeric array from various sources.

   1) Default constructor. Constructs an empty numeric array.
   2) Constructs a numeric array with count copies of value-initialized elements.
   3) Constructs a numeric array with count copies of val or *val respectively.
   4) Constructs a numeric array with copies of count values from an array pointed to
   by vals. If this array contains less than count values, the behavior is undefined.
   5) Copy constructor. Constructs the numeric array with the copy of the contents of
   other.
   6) Move constructor. Constructs the container with the contents of other using move
   semantics.

    This section is incomplete

   11) Constructs the numeric array with the contents of the initializer list il.

.SH Parameters

   count - the number of elements to construct
   val   - the value to initialize the elements with
           another numeric array to use as source to initialize the contents
   other -
            This section is incomplete
   il    - initializer list to initialize the elements with

.SH Exceptions

   1-5) \fI(none)\fP
   6)

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

   7-11) \fI(none)\fP
.SH Category:

     • Todo without reason
