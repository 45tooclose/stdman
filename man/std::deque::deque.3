.TH std::deque::deque 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   explicit deque( const Allocator& alloc =         \fB(1)\fP
   Allocator() );
   explicit deque( size_type count,

   const T& value = T(),                                    \fI(until C++11)\fP

   const Allocator& alloc = Allocator());
   deque( size_type count,

   const T& value,                                          \fI(since C++11)\fP

   const Allocator& alloc = Allocator());
   explicit deque( size_type count );                                     \fI(since C++11)\fP
                                                                          \fI(until C++14)\fP
   explicit deque( size_type count, const           \fB(2)\fP                   \fI(since C++14)\fP
   Allocator& alloc = Allocator() );
   template< class InputIt >

   deque( InputIt first, InputIt last,                      \fB(4)\fP
                                                        \fB(3)\fP
   const Allocator& alloc = Allocator() );
   deque( const deque& other );                             \fB(5)\fP
   deque( const deque& other, const Allocator&              \fB(5)\fP           \fI(since C++11)\fP
   alloc );
   deque( deque&& other )                                   \fB(6)\fP           \fI(since C++11)\fP
   deque( deque&& other, const Allocator& alloc );          \fB(6)\fP           \fI(since C++11)\fP
   deque( std::initializer_list<T> init,                    \fB(7)\fP           \fI(since C++11)\fP
   const Allocator& alloc = Allocator() );

   Constructs new container from a variety of data sources and optionally using user
   supplied allocator alloc.

   1) Default constructor. Constructs empty container.
   2) Constructs the container with count copies of elements with value value.
   3) Constructs the container with count value-initialized (default constructed, for
   classes) instances of T. No copies are made.
   4) Constructs the container with the contents of the range [first, last).
   5) Copy constructor. Constructs the container with the copy of the contents of
   other. If alloc is not provided, allocator is obtained by calling
   std::allocator_traits<allocator_type>::select_on_container_copy_construction(other).
   6) Move constructor. Constructs the container with the contents of other using move
   semantics. If alloc is not provided, allocator is obtained by move-construction from
   the allocator belonging to other.
   7) Constructs the container with the contents of the initializer list init.

.SH Contents

     * 1 Parameters
     * 2 Complexity
     * 3 Example
     * 4 See also

.SH Parameters

   alloc       - allocator to use for all memory allocations of this container
   count       - the size of the container
   value       - the value to initialize elements of the container with
   first, last - the range to copy the elements from
   other       - another container to be used as source to initialize the elements of
                 the container with
   init        - initializer list to initialize the elements of the container with
.SH Type requirements
   -
   Allocator must meet the requirements of Allocator.
   -
   InputIt must meet the requirements of InputIterator.

.SH Complexity

   1) Constant
   2-3) Linear in count
   4) Linear in distance between first and last
   5) Linear in size of other
   6) Constant. If alloc is given and alloc != other.get_allocator(), then linear.
   7) Linear in size of init

.SH Example

   
// Run this code

 #include <deque>
 #include <string>
 #include <iostream>

 template<typename T>
 std::ostream& operator<<(std::ostream& s, const std::deque<T>& v) {
     s.put('[');
     char comma[3] = {'\\0', ' ', '\\0'};
     for (const auto& e : v) {
         s << comma << e;
         comma[0] = ',';
     }
     return s << ']';
 }

 int main()
 {
     // c++11 initializer list syntax:
     std::deque<std::string> words1 {"the", "frogurt", "is", "also", "cursed"};
     std::cout << "words1: " << words1 << '\\n';

     // words2 == words1
     std::deque<std::string> words2(words1.begin(), words1.end());
     std::cout << "words2: " << words2 << '\\n';

     // words3 == words1
     std::deque<std::string> words3(words1);
     std::cout << "words3: " << words3 << '\\n';

     // words4 is {"Mo", "Mo", "Mo", "Mo", "Mo"}
     std::deque<std::string> words4(5, "Mo");
     std::cout << "words4: " << words4 << '\\n';
 }

.SH Output:

 words1: [the, frogurt, is, also, cursed]
 words2: [the, frogurt, is, also, cursed]
 words3: [the, frogurt, is, also, cursed]
 words4: [Mo, Mo, Mo, Mo, Mo]

.SH See also

   assign    assigns values to the container
             \fI(public member function)\fP
   operator= assigns values to the container
             \fI(public member function)\fP
