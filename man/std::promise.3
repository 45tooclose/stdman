.TH std::promise 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::promise \- std::promise

.SH Synopsis
   Defined in header <future>
   template< class R > class promise;       \fB(1)\fP \fI(since C++11)\fP
   template< class R > class promise<R&>;   \fB(2)\fP \fI(since C++11)\fP
   template<>          class promise<void>; \fB(3)\fP \fI(since C++11)\fP

   1) base template
   2) non-void specialization, used to communicate objects between threads
   3) void specialization, used to communicate stateless events

   The class template std::promise provides a facility to store a value or an exception
   that is later acquired asynchronously via a std::future object created by the
   std::promise object.

   Each promise is associated with a shared state, which contains some state
   information and a result which may be not yet evaluated, evaluated to a value
   (possibly void) or evaluated to an exception. A promise may do three things with the
   shared state:

     * make ready: the promise stores the result or the exception in the shared state.
       Marks the state ready and unblocks any thread waiting on a future associated
       with the shared state.
     * release: the promise gives up its reference to the shared state. If this was the
       last such reference, the shared state is destroyed. Unless this was a shared
       state created by std::async which is not yet ready, this operation does not
       block.
     * abandon: the promise stores the exception of type std::future_error with error
       code std::future_errc::broken_promise, makes the shared state ready, and then
       releases it.

   The promise is the "push" end of the promise-future communication channel: the
   operation that stores a value in the shared state synchronizes-with (as defined in
   std::memory_order) the successful return from any function that is waiting on the
   shared state (such as std::future::get). Concurrent access to the same shared state
   may conflict otherwise: for example multiple callers of std::shared_future::get must
   either all be read-only or provide external synchronization.

.SH Member functions

   constructor                  constructs the promise object
                                \fI(public member function)\fP 
   destructor                   destructs the promise object
                                \fI(public member function)\fP 
   operator=                    assigns the shared state
                                \fI(public member function)\fP 
   swap                         swaps two promise objects
                                \fI(public member function)\fP 
.SH Getting the result
   get_future                   returns a future associated with the promised result
                                \fI(public member function)\fP 
.SH Setting the result
   set_value                    sets the result to specific value
                                \fI(public member function)\fP 
                                sets the result to specific value while delivering the
   set_value_at_thread_exit     notification only at thread exit
                                \fI(public member function)\fP 
   set_exception                sets the result to indicate an exception
                                \fI(public member function)\fP 
                                sets the result to indicate an exception while
   set_exception_at_thread_exit delivering the notification only at thread exit
                                \fI(public member function)\fP 

.SH Non-member functions

   std::swap(std::promise) specializes the std::swap algorithm
   \fI(C++11)\fP                 \fI(function template)\fP 

.SH Helper classes

   std::uses_allocator<std::promise> specializes the std::uses_allocator type trait
   \fI(C++11)\fP                           \fI(class template specialization)\fP 
