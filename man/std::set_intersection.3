.TH std::set_intersection 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::set_intersection \- std::set_intersection

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt1, class InputIt2, class OutputIt >

   OutputIt set_intersection( InputIt1 first1, InputIt1 last1,  \fB(1)\fP
                              InputIt2 first2, InputIt2 last2,

                              OutputIt d_first );
   template< class InputIt1, class InputIt2,

             class OutputIt, class Compare >
   OutputIt set_intersection( InputIt1 first1, InputIt1 last1,  \fB(2)\fP
                              InputIt2 first2, InputIt2 last2,

                              OutputIt d_first, Compare comp );

   Constructs a sorted range beginning at d_first consisting of elements that are found
   in both sorted ranges [first1, last1) and [first2, last2). The first version expects
   both input ranges to be sorted with operator<, the second version expects them to be
   sorted with the given comparison function comp. If some element is found m times in
   [first1, last1) and n times in [first2, last2), the first std::min(m, n) elements
   will be copied from the first range to the destination range. The order of
   equivalent elements is preserved. The resulting range cannot overlap with either of
   the input ranges.

.SH Parameters

   first1, last1 - the first range of elements to examine
   first2, last2 - the second range of elements to examine
                   comparison function object (i.e. an object that satisfies the
                   requirements of Compare) which returns true if the first argument
                   is less (i.e. is ordered before) the second element.

                   The signature of the comparison function should be equivalent to the
                   following:
   comp          -
                    bool cmp(const Type1 &a, const Type2 &b);

                   The signature does not need to have const &, but the function object
                   must not modify the objects passed to it.
                   The types Type1 and Type2 must be such that objects of types
                   InputIt1 and InputIt2 can be dereferenced and then implicitly
                   converted to Type1 and Type2 respectively. 
.SH Type requirements
   -
   InputIt1 must meet the requirements of InputIterator.
   -
   InputIt2 must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.

.SH Return value

   Iterator past the end of the constructed range.

.SH Complexity

   At most 2Â·(N[1]+N[2]-1) comparisons, where N[1] = std::distance(first1, last1) and
   N[2] = std::distance(first2, last2).

.SH Possible implementation

.SH First version
   template<class InputIt1, class InputIt2, class OutputIt>
   OutputIt set_intersection(InputIt1 first1, InputIt1 last1,
                             InputIt2 first2, InputIt2 last2,
                             OutputIt d_first)
   {
       while (first1 != last1 && first2 != last2) {
           if (*first1 < *first2) {
               ++first1;
           } else  {
               if (!(*first2 < *first1)) {
                   *d_first++ = *first1++;
               }
               ++first2;
           }
       }
       return d_first;
   }
.SH Second version
   template<class InputIt1, class InputIt2,
            class OutputIt, class Compare>
   OutputIt set_intersection(InputIt1 first1, InputIt1 last1,
                             InputIt2 first2, InputIt2 last2,
                             OutputIt d_first, Compare comp)
   {
       while (first1 != last1 && first2 != last2) {
           if (comp(*first1, *first2)) {
               ++first1;
           } else {
               if (!comp(*first2, *first1)) {
                   *d_first++ = *first1++;
               }
               ++first2;
           }
       }
       return d_first;
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <vector>
 #include <algorithm>
 #include <iterator>
 int main()
 {
     std::vector<int> v1{1,2,3,4,5,6,7,8};
     std::vector<int> v2{        5,  7,  9,10};
     std::sort(v1.begin(), v1.end());
     std::sort(v2.begin(), v2.end());
  
     std::vector<int> v_intersection;
  
     std::set_intersection(v1.begin(), v1.end(),
                           v2.begin(), v2.end(),
                           std::back_inserter(v_intersection));
     for(int n : v_intersection)
         std::cout << n << ' ';
 }

.SH Output:

 5 7

.SH See also

   set_union computes the union of two sets
             \fI(function template)\fP 
