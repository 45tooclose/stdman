.TH std::chrono::duration 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <chrono>
   template<

       class Rep,                    \fI(since C++11)\fP
       class Period = std::ratio<1>

   > class duration;

   Class template std::chrono::duration represents a time interval.

   It consists of a count of ticks of type Rep and a tick period, where the tick period
   is a compile-time rational constant representing the number of seconds from one tick
   to the next.

   The only data stored in a duration is a tick count of type Rep. If Rep is floating
   point, then the duration can represent fractions of ticks. Period is included as
   part of the duration's type, and is only used when converting between different
   durations.

.SH Contents

     • 1 Member types
     • 2 Member functions
     • 3 Non-member functions
     • 4 Helper types
     • 5 Helper classes
     • 6 Literals
     • 7 Example

.SH Member types

   Member type Definition
   rep         Rep, an arithmetic type representing the number of ticks
   period      Period, a std::ratio representing the tick period (i.e. the number of
               seconds per tick)

.SH Member functions

   constructor     constructs new duration
                   \fI(public member function)\fP
   operator=       assigns the contents
                   \fI(public member function)\fP
   count           returns the count of ticks
                   \fI(public member function)\fP
   zero            returns the special duration value zero
   \fB[static]\fP        \fI(public static member function)\fP
   min             returns the special duration value min
   \fB[static]\fP        \fI(public static member function)\fP
   max             returns the special duration value max
   \fB[static]\fP        \fI(public static member function)\fP
   operator+       implements unary + and unary -
   operator-       \fI(public member function)\fP
   operator++
   operator++(int) increments or decrements the tick count
   operator--      \fI(public member function)\fP
   operator--(int)
   operator+=
   operator-=      implements compound assignment between two durations
   operator*=      \fI(public member function)\fP
   operator/=
   operator%=

.SH Non-member functions

   std::common_type<std::chrono::duration> specializes the std::common_type trait
                                           \fI(class template specialization)\fP
   operator+
   operator-                               implements arithmetic operations with
   operator*                               durations as arguments
   operator/                               \fI(function template)\fP
   operator%
   operator==
   operator!=
   operator<                               compares two durations
   operator<=                              \fI(function template)\fP
   operator>
   operator>=
                                           converts a duration to another, with a
   duration_cast                           different tick interval
                                           \fI(function template)\fP

.SH Helper types

   Type                      Definition
   std::chrono::nanoseconds  duration</*signed integer type of at least 64 bits*/,
                             std::nano>
   std::chrono::microseconds duration</*signed integer type of at least 55 bits*/,
                             std::micro>
   std::chrono::milliseconds duration</*signed integer type of at least 45 bits*/,
                             std::milli>
   std::chrono::seconds      duration</*signed integer type of at least 35 bits*/ >
   std::chrono::minutes      duration</*signed integer type of at least 29
                             bits*/,std::ratio<60>>
   std::chrono::hours        duration</*signed integer type of at least 23 bits*/,
                             std::ratio<3600>>

.SH Helper classes

                           indicates that a duration is convertible to duration with
   treat_as_floating_point different tick period
                           \fI(class template)\fP
                           constructs zero, min, and max values of a tick count of
   duration_values         given type
                           \fI(class template)\fP

.SH Literals

   Defined in inline namespace std::literals::chrono_literals
   operator""h   A std::chrono::duration literal representing hours
   \fI(C++14)\fP       \fI(function)\fP
   operator""min A std::chrono::duration literal representing minutes
   \fI(C++14)\fP       \fI(function)\fP
   operator""s   A std::chrono::duration literal representing seconds
   \fI(C++14)\fP       \fI(function)\fP
   operator""ms  A std::chrono::duration literal representing milliseconds
   \fI(C++14)\fP       \fI(function)\fP
   operator""us  A std::chrono::duration literal representing microseconds
   \fI(C++14)\fP       \fI(function)\fP
   operator""ns  A std::chrono::duration literal representing nanoseconds
   \fI(C++14)\fP       \fI(function)\fP

.SH Example

   This example shows how to define several custom duration types and convert between
   types:

   
// Run this code

 #include <iostream>
 #include <chrono>
  
 int main()
 {
     typedef std::chrono::duration<int, std::ratio<1, 100000000>> shakes;
     typedef std::chrono::duration<int, std::centi> jiffies;
     typedef std::chrono::duration<float, std::ratio<12096,10000>> microfortnights;
     typedef std::chrono::duration<float, std::ratio<3155,1000>> nanocenturies;
  
     std::chrono::seconds sec(1);
  
     std::cout << "1 second is:\\n";
  
     std::cout << std::chrono::duration_cast<shakes>(sec).count()
               << " shakes\\n";
     std::cout << std::chrono::duration_cast<jiffies>(sec).count()
               << " jiffies\\n";
     std::cout << microfortnights(sec).count() << " microfortnights\\n";
     std::cout << nanocenturies(sec).count() << " nanocenturies\\n";
 }

.SH Output:

 1 second is:
 100000000 shakes
 100 jiffies
 0.82672 microfortnights
 0.316957 nanocenturies
