.TH std::mem_fun_ref_t,std::mem_fun1_ref_t,std::const_mem_fun_ref_t, 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis

   template< class S, class T >

   class mem_fun_ref_t : public unary_function<T,S> {
   public:                                                      \fB(1)\fP \fB(deprecated)\fP
       explicit mem_fun_ref_t(S (T::*p)());
       S operator()(T& p) const;

   };
   template< class S, class T >

   class const_mem_fun_ref_t : public unary_function<T,S> {
   public:                                                      \fB(2)\fP \fB(deprecated)\fP
       explicit const_mem_fun_ref_t(S (T::*p)() const);
       S operator()(const T& p) const;

   };
   template< class S, class T, class A >

   class mem_fun1_ref_t : public binary_function<T,A,S> {
   public:                                                      \fB(3)\fP \fB(deprecated)\fP
       explicit mem_fun1_ref_t(S (T::*p)(A));
       S operator()(T& p, A x) const;

   };
   template< class S, class T, class A >

   class const_mem_fun1_ref_t : public binary_function<T,A,S> {
   public:                                                      \fB(4)\fP \fB(deprecated)\fP
       explicit const_mem_fun1_ref_t(S (T::*p)(A) const);
       S operator()(const T& p, A x) const;

   };

   Wrapper around a member function pointer. The class instance whose member function
   to call is passed as a reference to the operator().

   1) Wraps a non-const member function with no parameters.
   2) Wraps a const member function with no parameters.
   3) Wraps a non-const member function with a single parameter.
   4) Wraps a const member function with a single parameter.

.SH See also

   mem_fun_ref      creates a wrapper from a pointer to member function, callable with
   \fB(deprecated)\fP     a reference to object
                    \fI(function template)\fP 
   mem_fun_t
   mem_fun1_t
   const_mem_fun_t  wrapper for a pointer to nullary or unary member function, callable
   const_mem_fun1_t with a pointer to object
   \fB(deprecated)\fP     \fI(class template)\fP 
   \fB(deprecated)\fP
   \fB(deprecated)\fP
   \fB(deprecated)\fP
