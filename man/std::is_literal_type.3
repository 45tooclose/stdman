.TH std::is_literal_type 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_literal_type \- std::is_literal_type

.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_literal_type;

   If T satisfies all requirements of LiteralType, provides the member constant value
   equal true. For any other type, value is false.

   

.SH Member constants

   value    true if T is a literal type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Only literal types may be used as parameters to or returned from constexpr
   functions. Only literal classes may have constexpr member functions.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct A {
     int m;
 };
  
 struct B {
     virtual ~B();
 };
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_literal_type<A>::value << '\\n';
     std::cout << std::is_literal_type<B>::value << '\\n';
 }

.SH Output:

 true
 false

.SH See also

   std::experimental::is_literal_type_v variable template alias of
   (library fundamentals TS)            std::is_literal_type::value
                                        (variable template) 
