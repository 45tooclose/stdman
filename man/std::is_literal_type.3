.TH std::is_literal_type 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_literal_type;

   If T is a literal type, provides the member constant value equal true. For any other
   type, value is false.

   A literal type is any scalar type, any reference type or a class type that:

   1. has a trivial destructor

   2. all of its constructor calls and initializers for nonstatic data members are
   constant expressions

   3. is an aggregate type or has at least one constexpr constructor that is not a copy
   or move constructor

   4. all of its nonstatic data members and base classes are literal types

   An array of literal types is also a literal type.

.SH Contents

     • 1 Inherited from
       std::integral_constant

          • 1.1 Member constants
          • 1.2 Member functions
          • 1.3 Member types
          • 1.4 Notes
          • 1.5 Example

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a literal type, false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Only literal types may be used as parameters to or returned from constexpr
   functions. Only literal classes may have constexpr member functions.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct A {
     int m;
 };
  
 struct B {
     virtual ~B();
 };
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_literal_type<A>::value << '\\n';
     std::cout << std::is_literal_type<B>::value << '\\n';
 }

.SH Output:

 true
 false
