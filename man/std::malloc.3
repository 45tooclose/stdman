.TH std::malloc 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cstdlib>
   void* malloc( std::size_t size );

   Allocates size bytes of uninitialized storage.

   If allocation succeeds, returns a pointer to the lowest (first) byte in the
   allocated memory block that is suitably aligned for any object type.

   If size is zero, the behavior is implementation defined (null pointer may be
   returned, or some non-null pointer may be returned that may not be used to access
   storage)

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Notes
     * 4 Example
     * 5 See also

.SH Parameters

   size - number of bytes to allocate

.SH Return value

   Pointer to the beginning of newly allocated memory or null pointer if error has
   occurred. The pointer must be deallocated with std::free().

.SH Notes

   This function does not call constructors or initialize memory in any way. Thus
   preferred method of memory allocation is new expression.

.SH Example

   
// Run this code

 #include <cstdlib>
 #include <iostream>

 int main()
 {
     // Allocate an array of 4 integers
     int *array = static_cast<int *>(std::malloc(4 * sizeof(int)));

     if (array != nullptr) {
         for (int arrayIdx = 0; arrayIdx < 4; ++arrayIdx) {
             array[arrayIdx] = 2 * ( arrayIdx + 1 );
         }

         for (int arrayIdx = 0; arrayIdx < 4; ++arrayIdx) {
             std::cout << "Array item " << ( arrayIdx + 1 ) << " = " << array[arrayIdx] << '\\n';
         }
         std::free(array);
     }
 }

.SH Possible output:

 Array item 1 = 2
 Array item 2 = 4
 Array item 3 = 6
 Array item 4 = 8

.SH See also

   operator new         allocation functions
   operator new[]       \fI(function)\fP
   get_temporary_buffer obtains uninitialized storage
                        \fI(function template)\fP
   C documentation for
   malloc
