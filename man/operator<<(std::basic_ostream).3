.TH operator<<(std::basic_ostream) 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   template< class CharT, class Traits>

   basic_ostream<CharT,Traits>& operator<<(
   basic_ostream<CharT,Traits>& os,

   CharT ch );
   template< class CharT, class Traits>

   basic_ostream<CharT,Traits>& operator<<(
   basic_ostream<CharT,Traits>& os,

   char ch );
   template< class Traits >

   basic_ostream<char,Traits>& operator<<(
   basic_ostream<char,Traits>& os,

   char ch );
   template< class Traits >

   basic_ostream<char,Traits>& operator<<(
   basic_ostream<char,Traits>& os,

   signed char ch );
   template< class Traits >

   basic_ostream<char,Traits>& operator<<(
   basic_ostream<char,Traits>& os,

   unsigned char ch );
   template< class CharT, class Traits >

   basic_ostream<CharT,Traits>& operator<<(                   \fB(1)\fP
   basic_ostream<CharT,Traits>& os,

   const CharT* s );
   template< class CharT, class Traits >

   basic_ostream<CharT,Traits>& operator<<(
   basic_ostream<CharT,Traits>& os,

   const char* s );
   template< class Traits >

   basic_ostream<char,Traits>& operator<<(
   basic_ostream<char,Traits>& os,

   const char* s );                                               \fB(2)\fP
   template< class Traits >

   basic_ostream<char,Traits>& operator<<(
   basic_ostream<char,Traits>& os,

   const signed char* s );
   template< class Traits >

   basic_ostream<char,Traits>& operator<<(
   basic_ostream<char,traits>& os,

   const unsigned char* s );
   template< class CharT, class Traits, class T >

   basic_ostream< charT, traits >& operator<<(                        \fB(3)\fP \fI(since C++11)\fP
   basic_ostream<CharT,Traits>&& os,

   const T& value );

   Inserts a character or a character string.

   1) Behaves as an FormattedOutputFunction. After constructing and checking the sentry
   object, inserts the character ch. If the type of the character is not CharT, it is
   first converted with os.widen(ch). Padding is determined as follows: if
   os.width()>1, then os.width()-1 copies of os.fill() are added to the output
   character to form the output character sequence. If
   (out.flags()&std::ios_base::adjustfield) == std::ios_base::left, the fill characters
   are placed after the output character, otherwise before. After insertion,
   os.width\fB(0)\fP is called to cancel the effects of std::setw, if any.
   2) Behaves as an FormattedOutputFunction. After constructing and checking the sentry
   object, inserts successive characters from the character array whose first element
   is pointed to by s.

     * for the first and third overloads (where CharT matches the type of ch), exactly
       traits::length(s) characters are inserted.
     * for the second overload, exactly std::char_traits<char>::length(s) characters
       are inserted.
     * for the last two overloads, exactly traits::length(reinterpret_cast<const
       char*>(s)) are inserted.

   Before insertion, first, all characters are widened using os.widen(), then padding
   is determined as follows: if the number of characters to insert is less than
   os.width(), then enough copies of os.fill() are added to the character sequence to
   make its length equal os.width(). If (out.flags()&std::ios_base::adjustfield) ==
   std::ios_base::left, the fill characters are added at the end of the output
   sequence, otherwise they are added before the output sequence.

   After insertion, width\fB(0)\fP is called to cancel the effects of std::setw, if any.
   3) Calls the appropriate insertion operator, given an rvalue reference to an output
   stream object (equivalent to os << value).

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Example
     * 4 See also

.SH Parameters

   os - output stream to insert data to
   ch - reference to a character to insert
   s  - pointer to a character string to insert

.SH Return value

   st

.SH Example

   
// Run this code

 #include <iostream>
 #include <sstream>

 int main()
 {
     std::cout << "Hello, world" // the const char* overload
               << '\\n';          // the char overload
     std::string s = (std::ostringstream() << 1.2).str(); // rvalue overload
     std::cout << s << '\\n';
 }

.SH Output:

 Hello, world
 1.2

.SH See also

   operator<< inserts formatted data
              \fI(public member function)\fP
   widen      widens characters
              \fI(public member function of std::basic_ios)\fP
