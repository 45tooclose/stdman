.TH std::reference_wrapper 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <functional>
   template< class T >             \fI(since C++11)\fP
   class reference_wrapper;

   std::reference_wrapper is a class template that wraps a reference in a copyable,
   assignable object. It is frequently used as a mechanism to store references inside
   standard containers (like std::vector or std::pair) which can not normally hold
   references.

   Specifically, std::reference_wrapper is a CopyConstructible and CopyAssignable
   wrapper around a reference to object or reference to function of type T. Instances
   of std::reference_wrapper are objects (they can be copied or stored in containers)
   but they are implicitly convertible to T&, so that they can be used as arguments
   with the functions that take the underlying type by reference.

   Helper functions std::ref and std::cref are often used to generate
   std::reference_wrapper objects.

   std::reference_wrapper is also used to pass objects to std::bind or to the
   constructor of std::thread by reference.

.SH Contents

     * 1 Member types
     * 2 Member functions
     * 3 Example
     * 4 See also

.SH Member types

   type                 definition
   type                 T
   result_type          The return type of T if T is a function. Otherwise, not defined
                        1) if T is a function or pointer to function that takes one
                        argument of type A1, then argument_type is A1.

   argument_type        2) if T is a pointer to member function of class T0 that takes
                        no arguments, then argument_type is T0*, possibly cv-qualified
                        3) if T is a class type with a member type T::argument_type,
                        then argument_type is an alias of that
                        1) if T is a function or pointer to function that takes two
                        arguments of type s A1 and A2, then first_argument_type is A1.

                        2) if T is a pointer to member function of class T0 that takes
   first_argument_type  one argument, then first_argument_type is T0*, possibly
                        cv-qualified
                        3) if T is a class type with a member type
                        T::first_argument_type, then first_argument_type is an alias of
                        that
                        1) if T is a function or pointer to function that takes two
                        arguments of type s A1 and A2, then second_argument_type is A2.

                        2) if T is a pointer to member function of class T0 that takes
   second_argument_type one argument A1, then second_argument_type is A1, possibly
                        cv-qualified
                        3) if T is a class type with a member type
                        T::second_argument_type, then second_argument_type is an alias
                        of that

.SH Member functions

   constructor   stores a reference in a new std::reference_wrapper object
                 \fI(public member function)\fP
   operator=     rebinds a std::reference_wrapper
                 \fI(public member function)\fP
   get           accesses the stored reference
   operator T&   \fI(public member function)\fP
   operator()    calls the stored function
                 \fI(public member function)\fP

.SH Example

   Demonstrates the use of reference_wrapper as a container of references, which makes
   it possible to access the same container using multiple indexes

   
// Run this code

 #include <algorithm>
 #include <list>
 #include <vector>
 #include <iostream>
 #include <functional>

 int main()
 {
     std::list<int> l = {-4, -3, -2, -1, 0, 1, 2, 3, 4};

     std::vector<std::reference_wrapper<int>> v(l.begin(), l.end());
     std::random_shuffle(v.begin(), v.end());

     std::vector<std::reference_wrapper<int>> v2(v.begin(), v.end());
     std::partition(v2.begin(), v2.end(), [](int n){return n<0;});

     std::cout << "Contents of the list: ";
     for(int n: l) {
         std::cout << n << ' ';
     }
     std::cout << '\\n';

     std::cout << "Contents of the list, shuffled: ";
     for(int i: v) {
         std::cout << i << ' ';
     }
     std::cout << '\\n';

     std::cout << "Shuffled elements, partitioned: ";
     for(int i: v2) {
         std::cout << i << ' ';
     }
     std::cout << '\\n';
 }

.SH Output:

 Contents of the list: -4 -3 -2 -1 0 1 2 3 4
 Contents of the list, shuffled: 0 -1 3 4 -4 1 -2 -3 2
 Shuffled elements, partitioned: -3 -1 -2 -4 4 1 3 0 2

.SH See also

   ref
   cref    creates a std::reference_wrapper with a type deduced from its argument
   \fI(C++11)\fP \fI(function template)\fP
   \fI(C++11)\fP
   bind    binds one or more arguments to a function object
   \fI(C++11)\fP \fI(function template)\fP
