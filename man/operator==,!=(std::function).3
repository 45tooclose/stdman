.TH operator==,!=(std::function) 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   template< class R, class... ArgTypes >                                \fB(1)\fP
   bool operator==( const function<R(ArgTypes...)>& f, std::nullptr_t );
   template< class R, class... ArgTypes >                                \fB(2)\fP
   bool operator==( std::nullptr_t, const function<R(ArgTypes...)>& f );
   template< class R, class... ArgTypes >                                \fB(3)\fP
   bool operator!=( const function<R(ArgTypes...)>& f, std::nullptr_t );
   template< class R, class... ArgTypes >                                \fB(4)\fP
   bool operator!=( std::nullptr_t, const function<R(ArgTypes...)>& f );

   Compares a std::function with a null pointer. Empty functions (that is, functions
   without a callable target) compare equal, non-empty functions compare non-equal.

.SH Parameters

   f - std::function to compare

.SH Return value

   1-2) !f

   3-4) (bool) f

.SH Example

   
// Run this code

 #include <functional>
 #include <iostream>
  
 using SomeVoidFunc = std::function<void(int)>;
  
 class C {
 public:
     C(SomeVoidFunc void_func = nullptr) :
         void_func_(void_func)
     {
         if (void_func_ == nullptr) { // specialized compare with nullptr
             void_func_ = std::bind(&C::default_func, this, std::placeholders::_1);
         }
         void_func_(7);
     }
  
     void default_func(int i) { std::cout << i << '\\n'; };
  
 private:
     SomeVoidFunc void_func_;
 };
  
 void user_func(int i)
 {
     std::cout << (i + 1) << '\\n';
 }
  
 int main()
 {
     C c1;
     C c2(user_func);
 }

.SH Output:

 7
 8
