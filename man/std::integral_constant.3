.TH std::integral_constant 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T, T v >         \fI(since C++11)\fP
   struct integral_constant;

   std::integral_constant wraps a static constant of specified type. It is the base
   class for the C++ type traits.

   Two specializations for the type bool are provided:

   Defined in header <type_traits>
   Type       Definition
   true_type  std::integral_constant<bool, true>
   false_type std::integral_constant<bool, false>

.SH Member types

   Type       Definition
   value_type T
   type       std::integral_constant<T,v>

.SH Member constants

   Name  Value
   value static constant expression of type T with value v

.SH Member functions

   (constexpr)operator value_type converts the object to value_type, returns value
   (const noexcept)               \fI(public member function)\fP 
   (constexpr)operator()          returns value \fI(C++14)\fP
   (const noexcept)               \fI(public member function)\fP 

.SH Possible implementation

   template<class T, T v>
   struct integral_constant {
       static constexpr T value = v;
       typedef T value_type;
       typedef integral_constant type;
       constexpr operator value_type() const noexcept { return value; }
       constexpr value_type operator()() const noexcept { return value; }
   };

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 int main()
 {
     typedef std::integral_constant<int, 2> two_t;
     typedef std::integral_constant<int, 4> four_t;
  
 //  static_assert(std::is_same<two_t, four_t>::value,
 //                "two_t and four_t are not equal!");
 //  error: static assertion failed: "two_t and four_t are not a same types"
  
     static_assert(two_t::value*2 == four_t::value,
        "2*2 != 4"
     );
  
     enum class my_e {
        e1,
        e2
     };
     typedef std::integral_constant<my_e, my_e::e1> my_e_e1;
     typedef std::integral_constant<my_e, my_e::e2> my_e_e2;
  
 //  static_assert(my_e_e1::value == my_e::e2,
 //               "my_e_e1::value != my_e::e2");
 //  error: static assertion failed: "my_e_e1::value != my_e::e2"
  
     static_assert(std::is_same<my_e_e2, my_e_e2>::value,
                   "my_e_e2 != my_e_e2");
 }
