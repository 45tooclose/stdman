.TH std::reverse 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::reverse \- std::reverse

.SH Synopsis
   Defined in header <algorithm>
   template< class BidirIt >
   void reverse( BidirIt first, BidirIt last );

   Reverses the order of the elements in the range [first, last)

   Behaves as if applying std::iter_swap to every pair of iterators first+i, (last-i) -
   1 for each non-negative i < (last-first)/2

.SH Parameters

   first, last           -          the range of elements to reverse
.SH Type requirements
   -
   BidirIt must meet the requirements of BidirectionalIterator.
   -
   The type of dereferenced BidirIt must meet the requirements of Swappable.

.SH Return value

   \fI(none)\fP

.SH Possible implementation

   template<class BidirIt>
   void reverse(BidirIt first, BidirIt last)
   {
       while ((first != last) && (first != --last)) {
           std::iter_swap(first++, last);
       }
   }

.SH Example

   
// Run this code

 #include <vector>
 #include <iostream>
 #include <iterator>
 #include <algorithm>
  
 int main()
 {
     std::vector<int> v({1,2,3});
     std::reverse(std::begin(v), std::end(v));
     std::cout << v[0] << v[1] << v[2] << '\\n';
  
     int a[] = {4, 5, 6, 7};
     std::reverse(std::begin(a), std::end(a));
     std::cout << a[0] << a[1] << a[2] << a[3] << '\\n';
 }

.SH Output:

 321
 7654

.SH Complexity

   linear in the distance between first and last

.SH See also

   reverse_copy                         creates a copy of a range that is reversed
                                        \fI(function template)\fP 
   std::experimental::parallel::reverse parallelized version of std::reverse
   (parallelism TS)                     \fI(function template)\fP 
