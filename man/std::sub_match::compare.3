.TH std::sub_match::compare 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <regex>
   Direct comparison
   template< class BidirIt >

   bool operator==( const sub_match<BiIter>& lhs,                    \fB(1)\fP  \fI(since C++11)\fP

   const sub_match<BidirIt>& rhs );
   template< class BidirIt >

   bool operator!=( const sub_match<BiIter>& lhs,                    \fB(2)\fP  \fI(since C++11)\fP

   const sub_match<BidirIt>& rhs );
   template< class BidirIt >

   bool operator<( const sub_match<BiIter>& lhs,                     \fB(3)\fP  \fI(since C++11)\fP

   const sub_match<BidirIt>& rhs );
   template< class BidirIt >

   bool operator<=( const sub_match<BiIter>& lhs,                    \fB(4)\fP  \fI(since C++11)\fP

   const sub_match<BidirIt>& rhs );
   template< class BidirIt >

   bool operator>( const sub_match<BiIter>& lhs,                     \fB(5)\fP  \fI(since C++11)\fP

   const sub_match<BidirIt>& rhs );
   template< class BidirIt >

   bool operator>=( const sub_match<BiIter>& lhs,                    \fB(6)\fP  \fI(since C++11)\fP

   const sub_match<BidirIt>& rhs );
   std::basic_string and std::sub_match
   template< class BidirIt, class Traits, class Alloc >

   bool operator==( const std::basic_string<
   typename std::iterator_traits<BidirIt>::value_type,               \fB(7)\fP  \fI(since C++11)\fP
   Traits,Alloc>& lhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator!=( const std::basic_string<
   typename std::iterator_traits<BidirIt>::value_type,               \fB(8)\fP  \fI(since C++11)\fP
   Traits,Alloc>& lhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator<( const std::basic_string<
   typename std::iterator_traits<BidirIt>::value_type,               \fB(9)\fP  \fI(since C++11)\fP
   Traits,Alloc>& lhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator<=( const std::basic_string<
   typename std::iterator_traits<BidirIt>::value_type,               \fB(10)\fP \fI(since C++11)\fP
   Traits,Alloc>& lhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator>( const std::basic_string<
   typename std::iterator_traits<BidirIt>::value_type,               \fB(11)\fP \fI(since C++11)\fP
   Traits,Alloc>& lhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator>=( const std::basic_string<
   typename std::iterator_traits<BidirIt>::value_type,               \fB(12)\fP \fI(since C++11)\fP
   Traits,Alloc>& lhs,

   const sub_match<BidirIt>& rhs );
   std::sub_match and std::basic_string
   template< class BidirIt, class Traits, class Alloc >

   bool operator==( const sub_match<BidirIt>& lhs,
   const std::basic_string<                                          \fB(13)\fP \fI(since C++11)\fP
   typename std::iterator_traits<BidirIt>::value_type,

   Traits,Alloc>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator!=( const sub_match<BidirIt>& lhs,
   const std::basic_string<                                          \fB(14)\fP \fI(since C++11)\fP
   typename std::iterator_traits<BidirIt>::value_type,

   Traits,Alloc>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator<( const sub_match<BidirIt>& lhs,
   const std::basic_string<                                          \fB(15)\fP \fI(since C++11)\fP
   typename std::iterator_traits<BidirIt>::value_type,

   Traits,Alloc>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator<=( const sub_match<BidirIt>& lhs,
   const std::basic_string<                                          \fB(16)\fP \fI(since C++11)\fP
   typename std::iterator_traits<BidirIt>::value_type,

   Traits,Alloc>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator>( const sub_match<BidirIt>& lhs,
   const std::basic_string<                                          \fB(17)\fP \fI(since C++11)\fP
   typename std::iterator_traits<BidirIt>::value_type,

   Traits,Alloc>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator>=( const sub_match<BidirIt>& lhs,
   const std::basic_string<                                          \fB(18)\fP \fI(since C++11)\fP
   typename std::iterator_traits<BidirIt>::value_type,

   Traits,Alloc>& rhs );
   std::iterator_traits<BiIter>::value_type* and std::sub_match
   template< class BidirIt, class Traits, class Alloc >

   bool operator==( const typename                                   \fB(19)\fP \fI(since C++11)\fP
   std::iterator_traits<BiIter>::value_type* rhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator!=( const typename                                   \fB(20)\fP \fI(since C++11)\fP
   std::iterator_traits<BiIter>::value_type* rhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator<( const typename                                    \fB(21)\fP \fI(since C++11)\fP
   std::iterator_traits<BiIter>::value_type* rhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator<=( const typename                                   \fB(22)\fP \fI(since C++11)\fP
   std::iterator_traits<BiIter>::value_type* rhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator>( const typename                                    \fB(23)\fP \fI(since C++11)\fP
   std::iterator_traits<BiIter>::value_type* rhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator>=( const typename                                   \fB(24)\fP \fI(since C++11)\fP
   std::iterator_traits<BiIter>::value_type* rhs,

   const sub_match<BidirIt>& rhs );
   std::sub_match and std::iterator_traits<BiIter>::value_type*
   template< class BidirIt, class Traits, class Alloc >

   bool operator==( const sub_match<BidirIt>& lhs,                   \fB(25)\fP \fI(since C++11)\fP

   const typename std::iterator_traits<BiIter>::value_type* rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator!=( const sub_match<BidirIt>& lhs,                   \fB(26)\fP \fI(since C++11)\fP

   const typename std::iterator_traits<BiIter>::value_type* rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator<( const sub_match<BidirIt>& lhs,                    \fB(27)\fP \fI(since C++11)\fP

   const typename std::iterator_traits<BiIter>::value_type* rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator<=( const sub_match<BidirIt>& lhs,                   \fB(28)\fP \fI(since C++11)\fP

   const typename std::iterator_traits<BiIter>::value_type* rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator>( const sub_match<BidirIt>& lhs,                    \fB(29)\fP \fI(since C++11)\fP

   const typename std::iterator_traits<BiIter>::value_type* rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator>=( const sub_match<BidirIt>& lhs,                   \fB(30)\fP \fI(since C++11)\fP

   const typename std::iterator_traits<BiIter>::value_type* rhs );
   std::iterator_traits<BiIter>::value_type& and std::sub_match
   template< class BidirIt, class Traits, class Alloc >

   bool operator==( const typename                                   \fB(31)\fP \fI(since C++11)\fP
   std::iterator_traits<BiIter>::value_type& rhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator!=( const typename                                   \fB(32)\fP \fI(since C++11)\fP
   std::iterator_traits<BiIter>::value_type& rhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator<( const typename                                    \fB(33)\fP \fI(since C++11)\fP
   std::iterator_traits<BiIter>::value_type& rhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator<=( const typename                                   \fB(34)\fP \fI(since C++11)\fP
   std::iterator_traits<BiIter>::value_type& rhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator>( const typename                                    \fB(35)\fP \fI(since C++11)\fP
   std::iterator_traits<BiIter>::value_type& rhs,

   const sub_match<BidirIt>& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator>=( const typename                                   \fB(36)\fP \fI(since C++11)\fP
   std::iterator_traits<BiIter>::value_type& rhs,

   const sub_match<BidirIt>& rhs );
   std::sub_match and std::iterator_traits<BiIter>::value_type&
   template< class BidirIt, class Traits, class Alloc >

   bool operator==( const sub_match<BidirIt>& lhs,                   \fB(37)\fP \fI(since C++11)\fP

   const typename std::iterator_traits<BiIter>::value_type& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator!=( const sub_match<BidirIt>& lhs,                   \fB(38)\fP \fI(since C++11)\fP

   const typename std::iterator_traits<BiIter>::value_type& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator<( const sub_match<BidirIt>& lhs,                    \fB(39)\fP \fI(since C++11)\fP

   const typename std::iterator_traits<BiIter>::value_type& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator<=( const sub_match<BidirIt>& lhs,                   \fB(40)\fP \fI(since C++11)\fP

   const typename std::iterator_traits<BiIter>::value_type& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator>( const sub_match<BidirIt>& lhs,                    \fB(41)\fP \fI(since C++11)\fP

   const typename std::iterator_traits<BiIter>::value_type& rhs );
   template< class BidirIt, class Traits, class Alloc >

   bool operator>=( const sub_match<BidirIt>& lhs,                   \fB(42)\fP \fI(since C++11)\fP

   const typename std::iterator_traits<BiIter>::value_type& rhs );

   Compares a sub_match to another sub_match, a string, a null-terminated character
   sequence or a character.

   1-6) Compares two sub_match directly by comparing their underlying character
   sequences. Implemented using lhs.str().compare(rhs.str())
   7-18) Compares a sub_match with a std::basic_string. Implemented using
   sm.str().compare(st), where sm is a sub_match and st is a basic_string.
   19-30) Compares a sub_match with a null-terminated string. Implemented using
   sm.str().compare(s), where sm is a sub_match and s is a pointer to a null-terminated
   character string.
   31-42) Compares a sub_match with a character. Implemented using the following:

   sm.str().compare(typename sub_match<BidirIt>::string_type(1, ch)), where sm is a
   sub_match and ch is a character.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Example
     * 4 See also

.SH Parameters

   lhs, rhs - a sub_match, basic_string, pointer to a null-terminated string or a
              character to compare

.SH Return value

   true if the corresponding comparison holds as defined by compare(), false otherwise.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   compare compares matched subsequence (if any)
           \fI(public member function)\fP

.SH Category:

     * Todo no example
