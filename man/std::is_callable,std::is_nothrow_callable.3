.TH std::is_callable,std::is_nothrow_callable 3 "2017.04.02" "http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_callable,std::is_nothrow_callable \- std::is_callable,std::is_nothrow_callable

.SH Synopsis
   Defined in header <type_traits>
   template <class, class R = void> struct is_callable; // not
   defined
                                                                      \fB(1)\fP \fI(since C++17)\fP
   template <class Fn, class... ArgTypes, class R>

   struct is_callable<Fn(ArgTypes...), R>;
   template <class, class R = void> struct is_nothrow_callable; //
   not defined
                                                                      \fB(2)\fP \fI(since C++17)\fP
   template <class Fn, class... ArgTypes, class R>

   struct is_nothrow_callable<Fn(ArgTypes...), R>;

   1) Determines whether Fn is callable with the arguments ArgTypes... and the result
   would be convertible to R. Formally, determines whether INVOKE(declval<Fn>(),
   declval<ArgTypes>()..., R) is well formed when treated as an unevaluated operand,
   where INVOKE is the operation defined in Callable.
   2) Determines whether Fn is callable with the arguments ArgTypes... and the result
   would be convertible to R (same as \fB(1)\fP), and that such call is known not to throw
   any exceptions.

   Fn, R and all types in the parameter pack Args shall each be a complete type,
   (possibly cv-qualified) void, or an array of unknown bound. Otherwise, the behavior
   is undefined.

.SH Member constants

   value    true if INVOKE(declval<Fn>(), declval<ArgTypes>()..., R) is well formed
   \fB[static]\fP when treated as an unevaluated operand , false otherwise
            \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Version \fB(1)\fP of this trait may be implemented in terms of std::is_convertible and
   std::result_of.

.SH Examples

    This section is incomplete
    Reason: no example

.SH See also

   invoke    invokes any Callable object with given arguments
   \fI(C++17)\fP   \fI(function template)\fP 
   result_of deduces the return type of a function call expression
   \fI(C++11)\fP   \fI(class template)\fP 
   declval   obtains a reference to its argument for use in unevaluated context
   \fI(C++11)\fP   \fI(function template)\fP 

.SH Category:

     * Todo no example
