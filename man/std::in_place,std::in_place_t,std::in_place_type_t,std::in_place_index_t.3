.TH std::in_place,std::in_place_t,std::in_place_type_t,std::in_place_index_t 3 "Nov 16 2016" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::in_place,std::in_place_t,std::in_place_type_t,std::in_place_index_t \- std::in_place,std::in_place_t,std::in_place_type_t,std::in_place_index_t

.SH Synopsis
   Defined in header <utility>
   std::in_place_tag in_place( /* unspecified */ );                   \fB(1)\fP \fI(since C++17)\fP
   template < class T >                                               \fB(2)\fP \fI(since C++17)\fP
   std::in_place_tag in_place( /* unspecified */<T> );
   template < std::size_t I >                                         \fB(3)\fP \fI(since C++17)\fP
   std::in_place_tag in_place( /* unspecified */<I> );
   using in_place_t = std::in_place_tag (&)( /* unspecified */ );         \fI(since C++17)\fP
   template < class T >
   using in_place_type_t = std::in_place_tag (&)( /* unspecified          \fI(since C++17)\fP
   */<T> );
   template < std::size_t I >
   using in_place_index_t = std::in_place_tag (&)( /* unspecified         \fI(since C++17)\fP
   */<I> );

   The std::in_place function and function templates are special disambiguation tags
   that can be passed to the constructors of std::optional, std::variant, and std::any
   to indicate that the contained object should be constructed in-place, and (for the
   latter two) the type of the object to be constructed.

   They are implemented as a set of overloaded function/function templates with a
   special return type, to allow users to write all of in_place, in_place<T> (with a
   type), and in_place<I> (with an integral index). The corresponding alias/alias
   templates in_place_t, in_place_type_t and in_place_index_t can be used in the
   constructor's parameter list to match the intended tag.

   Actually calling any of the in_place functions results in undefined behavior.

.SH See also

   optional      a wrapper that may or may not hold an object
   \fI(since C++17)\fP \fI(class template)\fP
   variant       a type-safe discriminated union
   \fI(since C++17)\fP \fI(class template)\fP
   any           Objects that hold instances of any CopyConstructible type.
   \fI(since C++17)\fP \fI(class)\fP
   in_place_tag  Special tag type used by the in-place construction tags
   \fI(since C++17)\fP \fI(class)\fP
