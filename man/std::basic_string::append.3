.TH std::basic_string::append 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   basic_string& append( size_type count, const CharT& ch );   \fB(1)\fP
   basic_string& append( const basic_string& str );            \fB(2)\fP
   basic_string& append( const basic_string& str,

   size_type pos,                                              \fB(3)\fP

   size_type count );
   basic_string& append( const CharT* s,                       \fB(4)\fP
   size_type count );
   basic_string& append( const CharT* s );                     \fB(5)\fP
   template< class InputIt >                                   \fB(6)\fP
   basic_string& append( InputIt first, InputIt last );
   basic_string& append( std::initializer_list<CharT> ilist ); \fB(7)\fP \fI(since C++11)\fP

   Appends additional characters to the string.

   1) Appends count copies of character ch

   2) Appends string str

   3) Appends a substring [pos, pos+count) of str. If the requested substring lasts
   past the end of the string, or if count == npos, the appended substring is [pos,
   size()). If pos >= str.size(), std::out_of_range is thrown.

   4) Appends the first count characters of character string pointed to by s. s can
   contain null characters.

   5) Appends the null-terminated character string pointed to by s. The length of the
   string is determined by the first null character.

   6) Appends characters in the range [first, last)

   7) Appends characters in the initializer list ilist.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Complexity
     * 4 Exceptions
     * 5 Example
     * 6 See also

.SH Parameters

   count       - number of characters to append
   ch          - character value to append
   first, last - range of characters to append
   str         - string to append
   s           - pointer to the character string to append
   ilist       - initializer list with the characters to append
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.

.SH Return value

   *this

.SH Complexity

   1) linear in count

   2) linear in size of str

   3-4) linear in count

   5) linear in size of s

   6) linear in distance between first and last

   7) linear in size of ilist

.SH Exceptions

   If an exception is thrown for any reason, this function has no effect (strong
   exception guarantee).
   \fI(since C++11)\fP

   If the operation would result in size() > max_size(), throws std::length_error.

.SH Example

   
// Run this code

 #include <string>
 #include <iostream>

 int main() {
     std::basic_string<char> str = "string";
     const char* cptr = "C-string";
     const char carr[] = "Two and one";

     std::string output;

     // 1) Repeat a char
     output.append(3, '*');
     std::cout << "1) " << output << "\\n";

     //  2) Append a whole string
     output.append(str);
     std::cout << "2) " << output << "\\n";

     // 3) Append part of a string (last 3 letters, in this case)
     output.append(str, 3, 3);
     std::cout << "3) " << output << "\\n";

     // 4) Append part of a C-string
     // Notice, because `append` returns *this, we can chain calls together
     output.append(1, ' ').append(carr, 4);
     std::cout << "4) " << output << "\\n";

     // 5) Append a whole C-string
     output.append(cptr);
     std::cout << "5) " << output << "\\n";

     // 6) Append range
     output.append(&carr[3], std::end(carr));
     std::cout << "6) " << output << "\\n";

     // 7) Append initializer list
     output.append({ ' ', 'l', 'i', 's', 't' });
     std::cout << "7) " << output << "\\n";
 }

.SH Output:

 1) ***
 2) ***string
 3) ***stringing
 4) ***stringing Two
 5) ***stringing Two C-string
 6) ***stringing Two C-string and one
 7) ***stringing Two C-string and one list

.SH See also

   operator+= appends characters to the end
              \fI(public member function)\fP
