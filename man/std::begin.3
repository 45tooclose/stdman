.TH std::begin 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <iterator>
   template< class C >                                   \fB(1)\fP \fI(since C++11)\fP
   auto begin( C& c ) -> decltype(c.begin());
   template< class C >                                   \fB(1)\fP \fI(since C++11)\fP
   auto begin( const C& c ) -> decltype(c.begin());
   template< class T, size_t N >                         \fB(2)\fP \fI(since C++11)\fP
   T* begin( T (&array)[N] );
   template< class C >                                   \fB(3)\fP \fI(since C++14)\fP
   auto cbegin( const C& c ) -> decltype(std::begin(c));

   Returns an iterator to the beginning of the given container c or array array.

   1) Returns a possibly const-qualified iterator to the beginning of the container c.
   2) Returns a pointer to the beginning of the array array.
   3) Returns a const-qualified iterator to the beginning of the container c.

   range-begin-end.svg

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Notes
     * 4 Specializations
     * 5 Example
     * 6 See also

.SH Parameters

   c     - a container with a begin method
   array - an array of arbitrary type

.SH Return value

   An iterator to the beginning of c or array

.SH Notes

   In addition to being included in <iterator>, std::begin is guaranteed to become
   available if any of the following headers are included: <array>, <deque>,
   <forward_list>, <list>, <map>, <regex>, <set>, <string>, <unordered_map>,
   <unordered_set>, and <vector>.

.SH Specializations

   Custom specializations of std::begin may be provided for classes that do not expose
   a suitable begin() member function, yet can be iterated. The following
   specializations are already provided by the standard library:

   std::begin(std::initializer_list) specializes std::begin
   \fI(C++11)\fP                           \fI(function template)\fP
   std::begin(std::valarray)         specializes std::begin
   \fI(C++11)\fP                           \fI(function template)\fP

.SH Example

   
// Run this code

 #include <iostream>
 #include <vector>
 #include <iterator>

 int main()
 {
     std::vector<int> v = { 3, 1, 4 };
     auto vi = std::begin(v);
     std::cout << *vi << '\\n';

     int a[] = { -5, 10, 15 };
     auto ai = std::begin(a);
     std::cout << *ai << '\\n';
 }

.SH Output:

 3
 -5

.SH See also

   end
   cend    returns an iterator to the end of a container or array
   \fI(C++11)\fP \fI(function)\fP
   \fI(C++14)\fP
