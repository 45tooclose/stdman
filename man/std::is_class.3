.TH std::is_class 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_class;

   Checks whether T is an class or struct type. Provides the member constant value
   which is equal to true, if T is an class or struct type (but not union). Otherwise,
   value is equal to false.

.SH Contents

     * 1 Template parameters
     * 2 Inherited from
       std::integral_constant

          * 2.1 Member constants
          * 2.2 Member functions
          * 2.3 Member types
          * 2.4 Example
          * 2.5 See also

.SH Template parameters

   T - a type to check

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a class or struct , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 struct A {};

 class B {};

 enum class C {};

 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_class<A>::value << '\\n';
     std::cout << std::is_class<B>::value << '\\n';
     std::cout << std::is_class<C>::value << '\\n';
     std::cout << std::is_class<int>::value << '\\n';
 }

.SH Output:

 true
 true
 false
 false

.SH See also

   is_union checks if a type is an union type
   \fI(C++11)\fP  \fI(class template)\fP
