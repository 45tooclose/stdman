.TH std::get(std::array) 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   template< size_t I, class T, size_t N >        \fB(1)\fP \fI(since C++11)\fP
   constexpr T& get( array<T,N>& a );
   template< size_t I, class T, size_t N >        \fB(2)\fP \fI(since C++11)\fP
   constexpr T&& get( array<T,N>&& a );
   template< size_t I, class T, size_t N >        \fB(3)\fP \fI(since C++11)\fP
   constexpr const T& get( const array<T,N>& a );

   Extracts the Ith element element from the array.

   I must be an integer value in range [0, N). This is enforced at compile time as
   opposed to at() or operator[].

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 Notes
     • 5 Example
     • 6 See also

.SH Parameters

   a - array whose contents to extract

.SH Return value

   1) Reference to the Ith element of a.

   2) Rvalue reference to the Ith element of a, unless the element is of lvalue
   reference type, in which case lvalue reference is returned.

   3) Const reference to the Ith element of a.

.SH Exceptions

   noexcept specification:  
   noexcept
     

.SH Notes

   The overloads are marked as constexpr since C++14.

.SH Example

   
// Run this code

 #include <iostream>
 #include <array>
  
 int main()
 {
     std::array<int, 3> arr;
  
     // set values:
     std::get<0>(arr) = 1;
     std::get<1>(arr) = 2;
     std::get<2>(arr) = 3;
  
     // get values:
     std::cout << "(" << std::get<0>(arr) << ", " << std::get<1>(arr)
               << ", " << std::get<2>(arr) << ")\\n";
 }

.SH Output:

 (1, 2, 3)

.SH See also

   operator[]           access specified element
                        \fI(public member function)\fP
   at                   access specified element with bounds checking
                        \fI(public member function)\fP
   std::get(std::tuple) tuple accesses specified element
                        \fI(function template)\fP
   std::get(std::pair)  accesses an element of a pair
   \fI(C++11)\fP              \fI(function template)\fP
