.TH std::is_object 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_object;

   If T is an object type (that is, scalar, array, class, or union), provides the
   member constant value equal true. For any other type, value is false.

.SH Contents

     * 1 Inherited from
       std::integral_constant

          * 1.1 Member constants
          * 1.2 Member functions
          * 1.3 Member types
          * 1.4 Possible implementation
          * 1.5 Example
          * 1.6 See also

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an object type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template< class T>
   struct is_object : std::integral_constant<bool,
                        std::is_scalar<T>::value ||
                        std::is_array<T>::value  ||
                        std::is_union<T>::value  ||
                        std::is_class<T>::value> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 int main() {
     class cls {};
     std::cout << std::boolalpha;
     std::cout << std::is_object<int>::value << '\\n';
     std::cout << std::is_object<int&>::value << '\\n';
     std::cout << std::is_object<cls>::value << '\\n';
     std::cout << std::is_object<cls&>::value << '\\n';
 }

.SH Output:

 true
 false
 true
 false

.SH See also

   is_scalar checks if a type is scalar type
   \fI(C++11)\fP   \fI(class template)\fP
   is_array  checks if a type is an array type
   \fI(C++11)\fP   \fI(class template)\fP
   is_union  checks if a type is an union type
   \fI(C++11)\fP   \fI(class template)\fP
   is_class  checks if a type is a class type (but not union type)
   \fI(C++11)\fP   \fI(class template)\fP
