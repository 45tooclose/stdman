.TH std::unordered_map 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_map \- std::unordered_map

.SH Synopsis
   Defined in header <unordered_map>
   template<

       class Key,
       class T,
       class Hash = std::hash<Key>,                                 \fI(since C++11)\fP
       class KeyEqual = std::equal_to<Key>,
       class Allocator = std::allocator< std::pair<const Key, T> >

   > class unordered_map;

   Unordered map is an associative container that contains key-value pairs with unique
   keys. Search, insertion, and removal of elements have average constant-time
   complexity.

   Internally, the elements are not sorted in any particular order, but organized into
   buckets. Which bucket an element is placed into depends entirely on the hash of its
   key. This allows fast access to individual elements, since once hash is computed, it
   refers to the exact bucket the element is placed into.

   std::unordered_map meets the requirements of Container, AllocatorAwareContainer,
   UnorderedAssociativeContainer.

.SH Notes

     * The swap functions do not invalidate any of the iterators inside the container,
       but they do invalidate the iterator marking the end of the swap region.

     * References and pointers to either key or data stored in the container are only
       invalidated by erasing that element, even when the corresponding iterator is
       invalidated.

.SH Member types

   Member type          Definition
   key_type             Key 
   mapped_type          T 
   value_type           std::pair<const Key, T> 
   size_type            Unsigned integral type (usually std::size_t) 
   difference_type      Signed integer type (usually std::ptrdiff_t) 
   hasher               Hash 
   key_equal            KeyEqual 
   allocator_type       Allocator 
   reference            value_type& 
   const_reference      const value_type& 
   pointer              std::allocator_traits<Allocator>::pointer 
   const_pointer        std::allocator_traits<Allocator>::const_pointer 
   iterator             ForwardIterator 
   const_iterator       Constant forward iterator 
                        An iterator type whose category, value, difference, pointer and
   local_iterator       reference types are the same as iterator. This iterator
                        can be used to iterate through a single bucket but not across
                        buckets
                        An iterator type whose category, value, difference, pointer and
   const_local_iterator reference types are the same as const_iterator. This iterator
                        can be used to iterate through a single bucket but not across
                        buckets

.SH Member functions

   constructor      constructs the unordered_map
                    \fI(public member function)\fP 
   destructor       destructs the unordered_map
                    \fI(public member function)\fP 
   operator=        assigns values to the container
                    \fI(public member function)\fP 
   get_allocator    returns the associated allocator
                    \fI(public member function)\fP 
.SH Iterators
   begin            returns an iterator to the beginning
   cbegin           \fI(public member function)\fP 
   end              returns an iterator to the end
   cend             \fI(public member function)\fP 
.SH Capacity
   empty            checks whether the container is empty
                    \fI(public member function)\fP 
   size             returns the number of elements
                    \fI(public member function)\fP 
   max_size         returns the maximum possible number of elements
                    \fI(public member function)\fP 
.SH Modifiers
   clear            clears the contents
                    \fI(public member function)\fP 
   insert           inserts elements
                    \fI(public member function)\fP 
   insert_or_assign inserts an element or assigns to the current element if the key
   \fI(C++17)\fP          already exists
                    \fI(public member function)\fP 
   emplace          constructs element in-place
                    \fI(public member function)\fP 
   emplace_hint     constructs elements in-place using a hint
                    \fI(public member function)\fP 
   try_emplace      inserts in-place if the key does not exist, does nothing if the key
   \fI(C++17)\fP          exists
                    \fI(public member function)\fP 
   erase            erases elements
                    \fI(public member function)\fP 
   swap             swaps the contents
                    \fI(public member function)\fP 
.SH Lookup
   at               access specified element with bounds checking
                    \fI(public member function)\fP 
   operator[]       access specified element
                    \fI(public member function)\fP 
   count            returns the number of elements matching specific key
                    \fI(public member function)\fP 
   find             finds element with specific key
                    \fI(public member function)\fP 
   equal_range      returns range of elements matching a specific key
                    \fI(public member function)\fP 
.SH Bucket interface
   begin(int)       returns an iterator to the beginning of the specified bucket
   cbegin(int)      \fI(public member function)\fP 
   end(int)         returns an iterator to the end of the specified bucket
   cend(int)        \fI(public member function)\fP 
   bucket_count     returns the number of buckets
                    \fI(public member function)\fP 
   max_bucket_count returns the maximum number of buckets
                    \fI(public member function)\fP 
   bucket_size      returns the number of elements in specific bucket
                    \fI(public member function)\fP 
   bucket           returns the bucket for specific key
                    \fI(public member function)\fP 
.SH Hash policy
   load_factor      returns average number of elements per bucket
                    \fI(public member function)\fP 
   max_load_factor  manages maximum average number of elements per bucket
                    \fI(public member function)\fP 
                    reserves at least the specified number of buckets.
   rehash           This regenerates the hash table.
                    \fI(public member function)\fP 
                    reserves space for at least the specified number of elements.
   reserve          This regenerates the hash table.
                    \fI(public member function)\fP 
.SH Observers
   hash_function    returns function used to hash the keys
                    \fI(public member function)\fP 
   key_eq           returns the function used to compare keys for equality
                    \fI(public member function)\fP 

.SH Non-member functions

   operator==                    compares the values in the unordered_map
   operator!=                    \fI(function template)\fP 
   std::swap(std::unordered_map) specializes the std::swap algorithm
   \fI(C++11)\fP                       \fI(function template)\fP 
