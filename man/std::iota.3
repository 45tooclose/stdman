.TH std::iota 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <numeric>
   template< class ForwardIterator, class T >                          \fI(since C++11)\fP
   void iota( ForwardIterator first, ForwardIterator last, T value );

   Fills the range [first, last) with sequentially increasing values, starting with
   value and repetitively evaluating ++value.

   Equivalent operation:

 *(d_first)   = value;
 *(d_first+1) = ++value;
 *(d_first+2) = ++value;
 *(d_first+3) = ++value;
 ...

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Complexity
     • 4 Possible implementation
     • 5 Notes
     • 6 Example
     • 7 See also

.SH Parameters

   first, last - the range of elements to fill with sequentially increasing values
                 starting with value
   value       - initial value to store, the expression ++value must be well-formed

.SH Return value

   \fI(none)\fP

.SH Complexity

   Exactly last - first increments and assignments.

.SH Possible implementation

   template<class ForwardIterator, class T>
   void iota(ForwardIterator first, ForwardIterator last, T value)
   {
       while(first != last) {
           *first++ = value;
           ++value;
       }
   }

.SH Notes

   The function is named after the integer function ⍳ from the programming language
   APL. It was one of the STL components that were not included in C++98, but
   eventually made it into the standard library in C++11.

.SH Example

   The following example applies std::random_shuffle to a vector of iterators to a
   std::list since std::random_shuffle cannot be applied to an std::list directly.
   std::iota is used to create the vector.

   
// Run this code

 #include <numeric>
 #include <algorithm>
 #include <list>
 #include <vector>
 #include <iostream>

 int main()
 {
     std::list<int> l(10);
     std::iota(l.begin(), l.end(), -4);

     std::vector<std::list<int>::iterator> v(l.size());
     std::iota(v.begin(), v.end(), l.begin());

     std::random_shuffle(v.begin(), v.end());

     std::cout << "Contents of the list: ";
     for(auto n: l) {
         std::cout << n << ' ';
     }
     std::cout << '\\n';

     std::cout << "Contents of the list, shuffled: ";
     for(auto i: v) {
         std::cout << *i << ' ';
     }
     std::cout << '\\n';
 }

.SH Output:

 Contents of the list: -4 -3 -2 -1 0 1 2 3 4 5
 Contents of the list, shuffled: 0 -1 3 4 -4 1 -2 -3 2 5

.SH See also

   fill     assigns a range of elements a certain value
            \fI(function template)\fP
   generate saves the result of a function in a range
            \fI(function template)\fP
