.TH std::get_temporary_buffer 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <memory>
   template< class T >
   std::pair< T*, std::ptrdiff_t > get_temporary_buffer( std::ptrdiff_t count )

   Allocates storage sufficient to store up to count adjacent objects of type T. If
   there is insufficient memory for all count objects, allocates less than count, if
   possible.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 Example
     • 5 See also

.SH Parameters

   count - the number of objects to allocate

.SH Return value

   An std::pair holding a pointer to the beginning of the allocated storage and the
   number of objects that fit in the storage that was actually allocated (may be zero).

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <memory>
 #include <string>
  
 int main()
 {
     const std::string s[] = {"string", "1", "test", "..."};
     std::string* p = std::get_temporary_buffer<std::string>(4).first;
  
     std::copy(std::begin(s), std::end(s),
               std::raw_storage_iterator<std::string*, std::string>(p));
  
     for (std::string* i = p; i != p+4; ++i) {
         std::cout << *i << '\\n';
         i->~basic_string<char>();
     }
     std::return_temporary_buffer(p);
 }

.SH Output:

 string
 1
 test
 ...

.SH See also

   return_temporary_buffer frees uninitialized storage
                           \fI(function template)\fP
