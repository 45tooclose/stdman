.TH std::generate_n 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class OutputIt, class Size, class Generator >          \fI(until C++11)\fP
   void generate_n( OutputIt first, Size count, Generator g );
   template< class OutputIt, class Size, class Generator >          \fI(since C++11)\fP
   OutputIt generate_n( OutputIt first, Size count, Generator g );

   Assigns values, generated by given function object g, to the first count elements in
   the range beginning at first, if count>0. Does nothing otherwise.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Complexity
     • 4 Possible implementation
     • 5 Example
     • 6 See also

.SH Parameters

   first - the beginning of the range of elements to generate
   count - number of the elements to generate
           generator function object that will be called.

           The signature of the function should be equivalent to the following:
   g     -
           Ret fun();

           The type Ret must be such that an object of type OutputIt can be
           dereferenced and assigned a value of type Ret. 
.SH Type requirements
   -
   OutputIt must meet the requirements of OutputIterator.

.SH Return value

   \fI(none)\fP                                                                 \fI(until C++11)\fP
   Iterator one past the last element assigned if count>0, first          \fI(since C++11)\fP
   otherwise.

.SH Complexity

   Exactly count invocations of g() and assignments, for count>0.

.SH Possible implementation

   template< class OutputIt, class Size, class Generator >
   OutputIt generate_n( OutputIt first, Size count, Generator g )
   {
       for( Size i = 0; i < count; i++ ) {
           *first++ = g();
       }
       return first;
   }

.SH Example

   The following code fills an array of integers with random numbers.

   
// Run this code

 #include <cstddef>
 #include <cstdlib>
 #include <iostream>
 #include <iterator>
 #include <algorithm>

 int main()
 {
     const std::size_t N = 5;
     int ar[N];
     std::generate_n(ar, N, std::rand); // Using the C function rand()

     std::cout << "ar: ";
     std::copy(ar, ar+N, std::ostream_iterator<int>(std::cout, " "));
     std::cout << "\\n";
 }

.SH Possible output:

 ar: 52894 15984720 41513563 41346135 51451456

.SH See also

   fill_n   assigns a value to a number of elements
            \fI(function template)\fP
   generate saves the result of a function in a range
            \fI(function template)\fP
