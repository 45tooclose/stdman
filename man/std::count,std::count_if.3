.TH std::count,std::count_if 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class T >

   typename iterator_traits<InputIt>::difference_type             \fB(1)\fP

       count( InputIt first, InputIt last, const T &value );
   template< class InputIt, class UnaryPredicate >

   typename iterator_traits<InputIt>::difference_type             \fB(2)\fP

       count_if( InputIt first, InputIt last, UnaryPredicate p );

   Returns the number of elements in the range [first, last) satisfying specific
   criteria. The first version counts the elements that are equal to value, the second
   version counts elements for which predicate p returns true.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Complexity
     • 4 Possible implementation
     • 5 Example

.SH Parameters

   first, last - the range of elements to examine
   value       - the value to search for
                 unary predicate which returns true for the required elements.

                 The signature of the predicate function should be equivalent to the
                 following:

   p           -  bool pred(const Type &a);

                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The type Type must be such that an object of type InputIt can be
                 dereferenced and then implicitly converted to Type. 
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.

.SH Return value

   number of elements satisfying the condition.

.SH Complexity

   exactly last - first comparisons / applications of the predicate

.SH Possible implementation

.SH First version
   template<class InputIt, class T>
   typename iterator_traits<InputIt>::difference_type
       count(InputIt first, InputIt last, const T& value)
   {
       typename iterator_traits<InputIt>::difference_type ret = 0;
       for (; first != last; ++first) {
           if (*first == value) {
               ret++;
           }
       }
       return ret;
   }
.SH Second version
   template<class InputIt, class UnaryPredicate>
   typename iterator_traits<InputIt>::difference_type
       count_if(InputIt first, InputIt last, UnaryPredicate p)
   {
       typename iterator_traits<InputIt>::difference_type ret = 0;
       for (; first != last; ++first) {
           if (p(*first)) {
               ret++;
           }
       }
       return ret;
   }

.SH Example

   The following code uses count to determine how many integers in a std::vector match
   a target value.

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>
  
 int main()
 {
     int data[] = { 1, 2, 3, 4, 4, 3, 7, 8, 9, 10 };
     std::vector<int> v(data, data+10);
  
     int target1 = 3;
     int target2 = 5;
     int num_items1 = std::count(v.begin(), v.end(), target1);
     int num_items2 = std::count(v.begin(), v.end(), target2);
  
     std::cout << "number: " << target1 << " count: " << num_items1 << '\\n';
     std::cout << "number: " << target2 << " count: " << num_items2 << '\\n';
 }

.SH Output:

 number: 3 count: 2
 number: 5 count: 0

   This example uses a lambda expression to count elements divisible by 3.

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <vector>
  
 int main()
 {
     int data[] = { 1, 2, 3, 4, 4, 3, 7, 8, 9, 10 };
     std::vector<int> v(data, data+10);
  
     int num_items1 = std::count_if(v.begin(), v.end(), [](int i) {return i % 3 == 0;});
  
     std::cout << "number divisible by three: " << num_items1 << '\\n';
 }

.SH Output:

 number divisible by three: 3
