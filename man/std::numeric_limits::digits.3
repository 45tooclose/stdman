.TH std::numeric_limits::digits 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   static const int digits;      \fI(until C++11)\fP
   static constexpr int digits;  \fI(since C++11)\fP

   The value of std::numeric_limits<T>::digits is the number of digits in base-radix
   that can be represented by the type T without change. For integer types, this is the
   number of bits not counting the sign bit. For floating-point types, this is the
   number of digits in the mantissa.

.SH Standard specializations

   T                     value of std::numeric_limits<T>::digits
   /* non-specialized */ 0
   bool                  1
   char                  CHAR_BIT - std::numeric_limits<char>::is_signed
   signed char           CHAR_BIT-1
   unsigned char         CHAR_BIT
   wchar_t               CHAR_BIT*sizeof(wchar_t) -
                         std::numeric_limits<wchar_t>::is_signed
   char16_t              CHAR_BIT*sizeof(char16_t)
   char32_t              CHAR_BIT*sizeof(char32_t)
   short                 CHAR_BIT*sizeof(short)-1
   unsigned short        CHAR_BIT*sizeof(short)
   int                   CHAR_BIT*sizeof(int)-1
   unsigned int          CHAR_BIT*sizeof(int)
   long                  CHAR_BIT*sizeof(long)-1
   unsigned long         CHAR_BIT*sizeof(long)
   long long             CHAR_BIT*sizeof(long long)-1
   unsigned long long    CHAR_BIT*sizeof(long long)
   float                 FLT_MANT_DIG
   double                DBL_MANT_DIG
   long double           LDBL_MANT_DIG

.SH See also

   radix        the radix or integer base used by the representation of the given type
   \fB[static]\fP     \fI(public static member constant)\fP
   min_exponent one more than the smallest negative power of the radix that is a valid
   \fB[static]\fP     normalized floating-point value
                \fI(public static member constant)\fP
   max_exponent one more than the largest integer power of the radix that is a valid
   \fB[static]\fP     finite floating-point value
                \fI(public static member constant)\fP
