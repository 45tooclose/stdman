.TH std::chrono::duration_cast 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   template <class ToDuration, class Rep, class Period>                \fI(since C++11)\fP
   constexpr ToDuration duration_cast(const duration<Rep,Period>& d);

   Converts a std::chrono::duration to a duration of different type ToDuration.

   No implicit conversions are used. Multiplications and divisions are avoided where
   possible, if it is known at compile time that one or more parameters are 1.
   Computations are done in the widest type available and converted to the result type
   only when finished.

.SH Parameters

   d - duration to convert

.SH Return value

   d converted to a duration of type ToDuration.

.SH Notes

   The function does not participate in the overload resolution unless ToDuration is an
   instance of std::chrono::duration.

   Casting between floating-point durations or between integer durations where the
   source period is exactly divisible by the target period (e.g. hours to minutes) can
   be performed implicitly, no duration_cast is needed.

.SH Example

   This example measures the execution time of a function

   
// Run this code

 #include <iostream>
 #include <chrono>
 #include <thread>
  
 void f()
 {
     std::this_thread::sleep_for(std::chrono::seconds(1));
 }
  
 int main()
 {
     auto t1 = std::chrono::high_resolution_clock::now();
     f();
     auto t2 = std::chrono::high_resolution_clock::now();
     std::cout << "f() took "
               << std::chrono::duration_cast<std::chrono::milliseconds>(t2 - t1).count()
               << " milliseconds\\n";
 }

.SH Output:

 f() took 1000 milliseconds
