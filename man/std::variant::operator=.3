.TH std::variant::operator= 3 "Apr  2 2017" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::variant::operator= \- std::variant::operator=

.SH Synopsis
   variant& operator=(const variant& rhs);                            \fB(1)\fP \fI(since C++17)\fP
   variant& operator=(variant&& rhs) noexcept(/* see below */);       \fB(2)\fP \fI(since C++17)\fP
   template <class T> variant& operator=(T&& t) noexcept(/* see below \fB(3)\fP \fI(since C++17)\fP
   */);

   Assigns a new value to an existing variant object

   1) Copy-assignment:

     * if both *this and rhs are valueless by exception, does nothing
     * otherwise, if rhs is valueless, but *this is not, destroys the value contained
       in *this and makes it valueless
     * otherwise, if rhs holds the same alternative as *this, assigns the value
       contained in rhs to the value contained in *this. If an exception is thrown,
       *this does not become valueless: the value depends on the exception safety
       guarantee of the alternative's copy assignment.
     * otherwise (if rhs and *this hold different alternatives)

              * copies the value contained in rhs to a temporary. If an exception is
                thrown by the copy constructor, *this remains unchanged
              * destroys any value contained in *this
              * sets *this to hold the same alternative as rhs
              * initializes the value contained in *this as if
                direct-non-list-initializing an object of type T_j with
                std::forward<T_j>(TMP), with TMP being the temporary and j being
                rhs.index(). If an exception is thrown by T_j's move constructor, *this
                becomes valueless_by_exception

   This overload only participates in overload resolution if
   std::is_copy_constructible_v<T_i> && std::is_move_constructible_v<T_i> &&
   std::is_copy_assignable_v<T_i> is true for all T_i in Types...
   2) Move-assignment:

     * if both *this and rhs are valueless by exception, does nothing
     * otherwise, if rhs is valueless, but *this is not, destroys the value contained
       in *this and makes it valueless
     * otherwise, if rhs holds the same alternative as *this, assigns
       std::get<j>(std::move(rhs)) to the value contained in *this, with j being
       index(). If an exception is thrown, *this does not become valueless: the value
       depends on the exception safety guarantee of the alternative's move assignment.
     * otherwise (if rhs and *this hold different alternatives)

              * destroys any value contained in *this
              * sets *this to hold the same alternative as rhs
              * initializes the value contained in *this as if
                direct-non-list-initializing an object of type T_j with
                std::get<j>(std::move(rhs)) with j being rhs.index(). If an exception
                is thrown by T_i's move constructor, *this becomes
                valueless_by_exception

   This overload only participates in overload resolution if
   std::is_move_constructible_v<T_i> && std::is_move_assignable_v<T_i> is true for all
   T_i in Types....
   3) Converting assignment.

     * Determines the alternative type T_j that would be selected by overload
       resolution for the expression F(std::forward<T>(t)) if there was an overload of
       imaginary function F(T_i) for every T_i from Types... in scope at the same time.
     * If *this already holds a T_j, assigns std::forward<T>(t) to the value contained
       in *this. If an exception is thrown, *this does not become valueless: the value
       depends on the exception safety guarantee of the assignment called.
     * Otherwise,

              * destroys the value contained in *this (if any)
              * sets this to hold the alternative T_j as selected above
              * direct-initializes the contained value as if by
                direct-non-list-initialization with std::forward<T>(t) as the
                initializer. If an exception is thrown during this initialization,
                *this becomes valueless_by_exception

   This overload only participates in overload resolution if
   std::is_same_v<std::decay_t<T>, variant> is false and std::is_assignable_v<T_j&, T>
   is true and std::is_constructible_v<T_j, T> is true and the expression
   F(std::forward<T>(t)) (with F being the above-mentioned set of imaginary functions)
   is well formed

 variant<string> v1;
 v1 = "abc"; // OK
 variant<string, string> v2;
 v2 = "abc"; // Error
 variant <string, bool> v3;
 v3 = "abc"; // OK but chooses bool

.SH Parameters

   rhs - another variant
   t   - a value convertible to one of the variant's alternatives

.SH Return value

   *this

.SH Exceptions

   1) May throw any exception thrown by assignment and copy/move initialization of any
   alternative
   2)
   noexcept specification:
   noexcept(((std::is_nothrow_move_constructible_v<Types> &&
   std::is_nothrow_move_assignable_v<Types>) && ...))
   3)
   noexcept specification:
   noexcept(std::is_nothrow_assignable_v<T_j&, T> &&
   std::is_nothrow_constructible_v<T_j, T>)

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   emplace constructs a value in the variant, in place
           \fI(public member function)\fP

   Categories:

     * conditionally noexcept
     * Todo no example
