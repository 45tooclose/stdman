.TH std::make_unique 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <memory>
   template< class T, class... Args >            \fB(1)\fP \fI(since C++14)\fP
   unique_ptr<T> make_unique( Args&&... args );      (only for non-array types)
   template< class T>                                \fI(since C++14)\fP
   unique_ptr<T> make_unique( std::size_t size   \fB(2)\fP (only for array types with unknown
   );                                                bound)
   template< class T, class... Args >                \fI(since C++14)\fP
   /* unspecified */ make_unique( Args&&... args \fB(3)\fP (only for array types with known
   ) = delete;                                       bound)

   Constructs an object of type T and wraps it in a std::unique_ptr.

   1) Constructs a non-array type T. The arguments args are passed to the constructor
   of T. The function does not participate in the overload resolution if T is an array
   type. The function is equivalent to:

 unique_ptr<T>(new T(std::forward<Args>(args)...))

   2) Constructs an array of unknown bound T. The function does not participate in the
   overload resolution unless T is an array of unknown bound. The function is
   equivalent to:

 unique_ptr<T>(new typename std::remove_extent<T>::type[size]())

   3) Construction of arrays of known bound is disallowed.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 See also

.SH Parameters

   args - list of arguments with which an instance of T will be constructed.
   size - the size of the array to construct

.SH Return value

   std::unique_ptr of an instance of type T.

.SH Exceptions

   Any exception thrown by the contructor of T. If an exception is thrown, this
   function has no effect.

.SH See also

   constructor   constructs a new unique_ptr
                 \fI(public member function)\fP
