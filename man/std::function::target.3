.TH std::function::target 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   template< class T >      \fB(1)\fP \fI(since C++11)\fP
   T* target();
   template< class T >      \fB(2)\fP \fI(since C++11)\fP
   const T* target() const;

   Returns a pointer to the stored callable function target.

.SH Parameters

   \fI(none)\fP

.SH Return value

   A pointer to the stored function if target_type() == typeid(T), otherwise a null
   pointer.

.SH Exceptions

   noexcept specification:  
   noexcept
     

.SH Example

   
// Run this code

 #include <functional>
 #include <iostream>
  
 void normal_fun()
 {
    std::cout << "hello\\n";
 }
  
 int main()
 {
   using fptr = void(*)();
  
   fptr fun = normal_fun; //pointer to function
  
   std::function<void()> f = fun;
  
   fun = *f.target<fptr>();
   //I know that f keeps a fptr object, then I invoke target<fptr> to make a copy
   //of the object
   fun();
  
   std::cout << std::boolalpha << (f.target<int>() == nullptr) << '\\n';
   //f doesn't keep an object of type int
 }

.SH Output:

 hello
 true

.SH See also

   target_type obtains the typeid of the stored target of a std::function
               \fI(public member function)\fP 
