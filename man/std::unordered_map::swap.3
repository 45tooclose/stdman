.TH std::unordered_map::swap 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unordered_map::swap \- std::unordered_map::swap

.SH Synopsis
   void swap( unordered_map& other );  \fI(since C++11)\fP

   Exchanges the contents of the container with those of other. Does not invoke any
   move, copy, or swap operations on individual elements.

   All iterators and references remain valid. The past-the-end iterator is invalidated.

   The Hash and KeyEqual objects must be Swappable, and they are exchanged using
   unqualified calls to non-member swap.

   If std::allocator_traits<allocator_type>::propagate_on_container_swap::value
   is true, then the allocators are exchanged using an unqualified call to       (since
   non-member swap. Otherwise, they are not swapped (and if get_allocator() !=   C++11)
   other.get_allocator(), the behavior is undefined).

.SH Parameters

   other - container to exchange the contents with

.SH Return value

   \fI(none)\fP

.SH Exceptions

   Any exception thrown by the swap Hash or KeyEqual objects.                   (until
                                                                                C++17)
   noexcept specification:  
   noexcept(std::allocator_traits<Allocator>::is_always_equal::value
                                                                                (since
   && noexcept(std::swap(std::declval<Hash&>(),std::declval<Hash&>()))          C++17)

   && noexcept(std::swap(std::declval<KeyEqual&>(),std::declval<KeyEqual&>())))

.SH Complexity

   Constant.

.SH See also

   std::swap(std::unordered_map) specializes the std::swap algorithm
   \fI(C++11)\fP                       \fI(function template)\fP 

.SH Category:

     * conditionally noexcept
