.TH std::is_empty 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_empty;

   If T is an empty type (that is, a non-union class type with no non-static data
   members other than bit-fields of size 0, no virtual functions, no virtual base
   classes, and no non-empty base classes), provides the member constant value equal
   true. For any other type, value is false.

.SH Contents

     • 1 Inherited from
       std::integral_constant

          • 1.1 Member constants
          • 1.2 Member functions
          • 1.3 Member types
          • 1.4 Notes
          • 1.5 Example
          • 1.6 See also

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an empty class type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   sizeof(T) always returns 1 if T is empty, but inheriting from empty base classes
   usually does not increase the size of a class due to empty base optimization.

   std::is_empty<T> and all other type traits are empty classes.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 struct A {};
  
 struct B {
     int m;
 };
  
 struct C {
     virtual ~C();
 };
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_empty<A>::value << '\\n';
     std::cout << std::is_empty<B>::value << '\\n';
     std::cout << std::is_empty<C>::value << '\\n';
 }

.SH Output:

 true
 false
 false

.SH See also

   is_class checks if a type is a class type (but not union type)
   \fI(C++11)\fP  \fI(class template)\fP
