.TH std::basic_string::find_first_of 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   size_type find_first_of( const basic_string& str, size_type pos = 0 ) const;    \fB(1)\fP
   size_type find_first_of( const CharT* s, size_type pos, size_type count )       \fB(2)\fP
   const;
   size_type find_first_of( const CharT* s, size_type pos = 0 ) const;             \fB(3)\fP
   size_type find_first_of( CharT ch, size_type pos = 0 ) const;                   \fB(4)\fP

   Finds the first character equal to one of characters in the given character
   sequence. Search begins at pos, i.e. the found character must not be in position
   preceding pos.

   1) Finds the first character equal to one of characters in str.
   2) Finds the first character equal to one of characters in the first count
   characters of the character string pointed to by s. s can include null characters.
   3) Finds the first character equal to one of characters in character string pointed
   to by s. The length of the string is determined by the first null character.
   4) Finds the first character equal to ch.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 Notes
     * 5 Example
     * 6 See also

.SH Parameters

   str   - string identifying characters to search for
   pos   - position at which to begin searching
   count - length of character string identifying characters to search for
   s     - pointer to a character string identifying characters to search for
   ch    - character to search for

.SH Return value

   Position of the found character or npos if no such character is found.

.SH Exceptions

   1-4) \fI(none)\fP             \fI(until C++11)\fP
   1,4)
   noexcept specification: \fI(since C++11)\fP
   noexcept                \fI(until C++14)\fP
   2,3) \fI(none)\fP
   1)
   noexcept specification: \fI(since C++14)\fP
   noexcept
   2-4) \fI(none)\fP

.SH Notes

   traits::eq() is used to perform the comparison.

.SH Example

   
// Run this code

 #include <iostream>
 #include <string>

 int main()
 {
     // the test string
     std::string str = std::string("Hello World!");

     // strings and chars to search for
     std::string search_str = std::string("o");
     const char* search_cstr = "Good Bye!";

     std::cout << str.find_first_of(search_str) << '\\n';
     std::cout << str.find_first_of(search_str, 5) << '\\n';
     std::cout << str.find_first_of(search_cstr) << '\\n';
     std::cout << str.find_first_of(search_cstr, 0, 4) << '\\n';
     // 'x' is not in "Hello World', thus it will return std::string::npos
     std::cout << str.find_first_of('x') << '\\n';
 }

.SH Possible output:

 4
 7
 1
 4
 18446744073709551615

.SH See also

   find              find characters in the string
                     \fI(public member function)\fP
   rfind             find the last occurrence of a substring
                     \fI(public member function)\fP
   find_first_not_of find first absence of characters
                     \fI(public member function)\fP
   find_last_of      find last occurrence of characters
                     \fI(public member function)\fP
   find_last_not_of  find last absence of characters
                     \fI(public member function)\fP
