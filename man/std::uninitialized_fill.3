.TH std::uninitialized_fill 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <memory>
   template< class ForwardIt, class T >
   void uninitialized_fill( ForwardIt first, ForwardIt last, const T& value )

   Copies the given value to an uninitialized memory area, defined by the range [first,
   last). The elements in the uninitialized area are constructed using copy
   constructor.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Complexity
     • 4 Possible implementation
     • 5 Example
     • 6 See also

.SH Parameters

   first, last  -  the range of the elements to initialize
   value        -  the value to construct the elements with
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Linear in the distance between first and last

.SH Possible implementation

   template<class ForwardIt, class T>
   void uninitialized_fill(ForwardIt first,
                           ForwardIt last,
                           const T& value)
   {
       typedef typename std::iterator_traits<ForwardIt>::value_type Value;
       for (; first != last; ++first) {
           ::new (static_cast<void*>(&*first)) Value(value);
       }
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <memory>
 #include <string>
 #include <tuple>
  
 int main()
 {
     std::string* p;
     std::size_t sz;
     std::tie(p, sz) = std::get_temporary_buffer<std::string>(4);
  
     std::uninitialized_fill(p, p+sz, "Example");
  
     for (std::string* i = p; i != p+sz; ++i) {
         std::cout << *i << '\\n';
         i->~basic_string<char>();
     }
     std::return_temporary_buffer(p);
 }

.SH Output:

.SH Example
.SH Example
.SH Example
.SH Example

.SH See also

   uninitialized_fill_n copies an object to an uninitialized area of memory
                        \fI(function template)\fP
