.TH std::is_function 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_function;

   Checks whether T is a function type (not std::function). Provides the member
   constant value which is equal to true, if T is a function type. Otherwise, value is
   equal to false.

.SH Contents

     * 1 Template parameters
     * 2 Inherited from
       std::integral_constant

          * 2.1 Member constants
          * 2.2 Member functions
          * 2.3 Member types
          * 2.4 Possible implementation
          * 2.5 Example
          * 2.6 See also

.SH Template parameters

   T - a type to check

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a function type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   // primary template
   template<class>
   struct is_function : std::false_type { };

   // specialization for regular functions
   template<class Ret, class... Args>
   struct is_function<Ret(Args...)> : std::true_type {};

   // specialization for variadic functions such as std::printf
   template<class Ret, class... Args>
   struct is_function<Ret(Args......)> : std::true_type {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 struct A {};

 int f()
 {
     return 1;
 }

 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_function<A>::value << '\\n';
     std::cout << std::is_function<int(int)>::value << '\\n';
     std::cout << std::is_function<decltype(f)>::value << '\\n';
     std::cout << std::is_function<int>::value << '\\n';
 }

.SH Output:

 false
 true
 true
 false

.SH See also

   is_object checks if a type is object type
   \fI(C++11)\fP   \fI(class template)\fP
   is_class  checks if a type is a class type (but not union type)
   \fI(C++11)\fP   \fI(class template)\fP
