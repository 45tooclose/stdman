.TH std::is_default_constructible,std::is_trivially_default_constructible, 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis

   Defined in header <type_traits>
   template< class T >                        \fB(1)\fP \fI(since C++11)\fP
   struct is_default_constructible;
   template< class T >                        \fB(2)\fP \fI(since C++11)\fP
   struct is_trivially_default_constructible;
   template< class T >                        \fB(3)\fP \fI(since C++11)\fP
   struct is_nothrow_default_constructible;

   1) Checks whether a type is DefaultConstructible, i.e. has an accessible explicit or
   implicit default constructor. If the requirement is met, a member constant value
   equal true is provided, otherwise value is false.

   2) Same as 1), but the constructor expression does not call any operation that is
   not trivial.

   3) Same as 1), but the constructor expression is noexcept.

.SH Member constants

   value    true if T is default-constructible , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template< class T>
   struct is_default_constructible : std::is_constructible<T> {};

   template< class T>
   struct is_trivially_default_constructible : std::is_trivially_constructible<T> {};

   template< class T>
   struct is_nothrow_default_constructible : std::is_nothrow_constructible<T> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 struct Ex1 {
     std::string str; // member has a non-trivial default ctor
 };
 struct Ex2 {
     int n;
     Ex2() = default; // trivial and non-throwing
 };

 int main() {
     std::cout << std::boolalpha << "Ex1 is default-constructible? "
               << std::is_default_constructible<Ex1>::value << '\\n'
               << "Ex1 is trivially default-constructible? "
               << std::is_trivially_default_constructible<Ex1>::value << '\\n'
               << "Ex2 is trivially default-constructible? "
               << std::is_trivially_default_constructible<Ex2>::value << '\\n'
               << "Ex2 is nothrow default-constructible? "
               << std::is_nothrow_default_constructible<Ex2>::value << '\\n';
 }

.SH Output:

 Ex1 is default-constructible? true
 Ex1 is trivially default-constructible? false
 Ex2 is trivially default-constructible? true
 Ex2 is nothrow default-constructible? true

.SH See also

is_constructible
is_trivially_constructible                              checks if a type has a constructor for
is_nothrow_constructible                                specific arguments
\fI(C++11)\fP                                                 \fI(class template)\fP
\fI(C++11)\fP
\fI(C++11)\fP
is_copy_constructible
is_trivially_copy_constructible
is_nothrow_copy_constructible                           checks if a type has a copy constructor
\fI(C++11)\fP                                                 \fI(class template)\fP
\fI(C++11)\fP
\fI(C++11)\fP
is_move_constructible
is_trivially_move_constructible
is_nothrow_move_constructible                           checks if a type has a move constructor
\fI(C++11)\fP                                                 \fI(class template)\fP
\fI(C++11)\fP
\fI(C++11)\fP
std::experimental::is_default_constructible_v           variable template alias of
(library fundamentals TS)                               std::is_default_constructible::value
                                                        (variable template)
std::experimental::is_trivially_default_constructible_v variable template alias of
(library fundamentals TS)                               std::is_trivially_default_constructible::value
                                                        (variable template)
std::experimental::is_nothrow_default_constructible_v   variable template alias of
(library fundamentals TS)                               std::is_nothrow_default_constructible::value
                                                        (variable template)
