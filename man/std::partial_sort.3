.TH std::partial_sort 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::partial_sort \- std::partial_sort

.SH Synopsis
   Defined in header <algorithm>
   template< class RandomIt >                                                      \fB(1)\fP
   void partial_sort( RandomIt first, RandomIt middle, RandomIt last );
   template< class RandomIt, class Compare >
   void partial_sort( RandomIt first, RandomIt middle, RandomIt last, Compare comp \fB(2)\fP
   );

   Rearranges elements such that the range [first, middle) contains the sorted middle -
   first smallest elements in the range [first, last).

   The order of equal elements is not guaranteed to be preserved. The order of the
   remaining elements in the range [middle, last) is unspecified. The first version
   uses operator< to compare the elements, the second version uses the given comparison
   function comp.

.SH Parameters

   first, last - the range of elements to sort
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less than (i.e. is ordered before) the second.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                  bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type RandomIt
                 can be dereferenced and then implicitly converted to both of them. 
.SH Type requirements
   -
   RandomIt must meet the requirements of ValueSwappable and RandomAccessIterator.
   -
   The type of dereferenced RandomIt must meet the requirements of MoveAssignable and
   MoveConstructible.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Approximately (last-first)log(middle-first)) applications of cmp

.SH Example

   
// Run this code

 #include <algorithm>
 #include <functional>
 #include <array>
 #include <iostream>
  
 int main()
 {
     std::array<int, 10> s{5, 7, 4, 2, 8, 6, 1, 9, 0, 3};
  
     std::partial_sort(s.begin(), s.begin() + 3, s.end());
     for (int a : s) {
         std::cout << a << " ";
     }
 }

.SH Possible output:

 0 1 2 7 8 6 5 9 4 3

.SH See also

                                             partially sorts the given range making
   nth_element                               sure that it is partitioned by the given
                                             element
                                             \fI(function template)\fP 
                                             copies and partially sorts a range of
   partial_sort_copy                         elements
                                             \fI(function template)\fP 
                                             sorts a range of elements while preserving
   stable_sort                               order between equal elements
                                             \fI(function template)\fP 
   sort                                      sorts a range into ascending order
                                             \fI(function template)\fP 
   std::experimental::parallel::partial_sort parallelized version of std::partial_sort
   (parallelism TS)                          \fI(function template)\fP 
