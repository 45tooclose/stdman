.TH std::basic_string::clear 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::clear \- std::basic_string::clear

.SH Synopsis
   void clear();

   Removes all characters from the string as if by executing erase(begin(), end()). The
   allocated memory will not be released, effectively leaving the capacity of the
   string unchanged.

   All pointers, references, and iterators are invalidated.

.SH Parameters

   \fI(none)\fP

.SH Return value

   \fI(none)\fP

.SH Notes

   Unlike for std::vector::clear, the C++ standard does not explicitly require that
   capacity is unchanged by this function, but existing implementations do not change
   capacity.

.SH Exceptions

   \fI(none)\fP                    \fI(until C++11)\fP
   noexcept specification:  
   noexcept                  \fI(since C++11)\fP
     

.SH Complexity

   Linear in the size of the string.

.SH Example

   
// Run this code

 #include <cassert>
 #include <string>
  
 int main()
 {
     std::string s{ "Exemplar" };
     std::string::size_type const capacity = s.capacity();
  
     s.clear();
     assert(capacity == s.capacity());
     assert(s.empty());
     assert(0 == s.size());
 }

.SH See also

   erase removes characters
         \fI(public member function)\fP 

.SH Category:

     * unconditionally noexcept
