.TH std::is_base_of 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::is_base_of \- std::is_base_of

.SH Synopsis
   Defined in header <type_traits>
   template< class Base, class Derived >  \fI(since C++11)\fP
   struct is_base_of;

   If Derived is derived from Base or if both are the same non-union class, provides
   the member constant value equal to true. Otherwise value is false.

   Requires that Derived is a complete type if it is not the same type as Base and if
   both Base and Derived are class types.

   

.SH Member constants

   value    true if Derived is derived from Base , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP
   operator()    returns value
   \fI(C++14)\fP       \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Although no class is its own base, std::is_base_of<T, T>::value is true because the
   intent of the trait is to model the "is-a" relationship, and T is a T. Despite that,
   std::is_base_of<int, int>::value is false because only classes participate in the
   relationship that this trait models.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 class A {};
  
 class B : A {};
  
 class C {};
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << "a2b: " << std::is_base_of<A, B>::value << '\\n';
     std::cout << "b2a: " << std::is_base_of<B, A>::value << '\\n';
     std::cout << "c2b: " << std::is_base_of<C, B>::value << '\\n';
     std::cout << "same type: " << std::is_base_of<C, C>::value << '\\n';
 }

.SH Output:

 a2b: true
 b2a: false
 c2b: false
 same type: true

.SH See also

   std::experimental::is_base_of_v variable template alias of std::is_base_of::value
   (library fundamentals TS)       (variable template) 
