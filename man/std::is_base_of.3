.TH std::is_base_of 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class Base, class Derived >  \fI(since C++11)\fP
   struct is_base_of;

   If Derived is derived from Base or if both are the same non-union class, provides
   the member constant value equal to true. Otherwise value is false.

   Requires that Derived is a complete type if it is not the same type as Base and if
   both Base and Derived are class types.

.SH Contents

     • 1 Inherited from
       std::integral_constant

          • 1.1 Member constants
          • 1.2 Member functions
          • 1.3 Member types
          • 1.4 Example

Inherited from std::integral_constant

.SH Member constants

   value    true if Derived is derived from Base , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 class A {};

 class B : A {};

 class C {};

 int main()
 {
     std::cout << std::boolalpha;
     std::cout << "a2b: " << std::is_base_of<A, B>::value << '\\n';
     std::cout << "b2a: " << std::is_base_of<B, A>::value << '\\n';
     std::cout << "c2b: " << std::is_base_of<C, B>::value << '\\n';
 }

.SH Output:

 a2b: true
 b2a: false
 c2b: false
