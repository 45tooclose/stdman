.TH std::rint,std::lrint,std::llrint 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cmath>
   float rint( float arg );              \fI(since C++11)\fP
   double rint( double arg );            \fI(since C++11)\fP
   long double rint( long double arg );  \fI(since C++11)\fP
   double rint( Integral arg );          \fI(since C++11)\fP
   long lrint( float arg );              \fI(since C++11)\fP
   long lrint( double arg );             \fI(since C++11)\fP
   long lrint( long double arg );        \fI(since C++11)\fP
   long lrint( Integral arg );           \fI(since C++11)\fP
   long long llrint( float arg );        \fI(since C++11)\fP
   long long llrint( double arg );       \fI(since C++11)\fP
   long long llrint( long double arg );  \fI(since C++11)\fP
   long long llrint( Integral arg );     \fI(since C++11)\fP

   Rounds the floating-point argument arg to an integer value in floating-point format,
   using the current rounding mode. If the result differs from arg (i.e., arg was not
   an integer value already), the floating-point exception FE_INEXACT is raised.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Notes
     * 4 Example
     * 5 See also

.SH Parameters

   arg - floating point value

.SH Return value

   The integer result of rounding arg

.SH Notes

   The only difference between std::nearbyint and std::rint is that std::rint may raise
   the FE_INEXACT floating-point exception, while std::nearbyint never raises it.

.SH Example

   
// Run this code

 #include <cmath>
 #include <cfenv>
 #include <iostream>
 int main()
 {
     #pragma STDC FENV_ACCESS ON
     std::fesetround(FE_DOWNWARD);
     std::cout << "rounding using FE_DOWNWARD:\\n" << std::fixed
               << " 12.0 ->  " << std::rint(12.0) << '\\n'
               << " 12.1 ->  " << std::rint(12.1) << '\\n'
               << "-12.1 -> " << std::rint(-12.1) << '\\n'
               << " 12.5 ->  " << std::rint(12.5) << '\\n'
               << " 12.9 ->  " << std::rint(12.9) << '\\n'
               << "-12.9 -> " << std::rint(-12.9) << '\\n'
               << " 13.0 ->  " << std::rint(13.0) << '\\n';
     std::fesetround(FE_TONEAREST);
     std::cout << "rounding using FE_TONEAREST: \\n"
               << " 12.0 ->  " << std::rint(12.0) << '\\n'
               << " 12.1 ->  " << std::rint(12.1) << '\\n'
               << "-12.1 -> " << std::rint(-12.1) << '\\n'
               << " 12.5 ->  " << std::rint(12.5) << '\\n'
               << " 12.9 ->  " << std::rint(12.9) << '\\n'
               << "-12.9 -> " << std::rint(-12.9) << '\\n'
               << " 13.0 ->  " << std::rint(13.0) << '\\n';

     std::cout << "When rounding 12.0 ";
     std::feclearexcept(FE_ALL_EXCEPT);
     std::rint(12.0);
     if(std::fetestexcept(FE_ALL_EXCEPT) & FE_INEXACT) {
         std::cout << "inexact result reported\\n";
     } else {
         std::cout << "inexact result not reported\\n";
     }

     std::cout << "When rounding 12.1 ";
     std::rint(12.1);
     if(std::fetestexcept(FE_ALL_EXCEPT) & FE_INEXACT) {
         std::cout << "inexact result reported\\n";
     } else {
         std::cout << "inexact result not reported\\n";
     }
 }

.SH Output:

 rounding using FE_DOWNWARD:
  12.0 ->  12.000000
  12.1 ->  12.000000
 -12.1 -> -13.000000
  12.5 ->  12.000000
  12.9 ->  12.000000
 -12.9 -> -13.000000
  13.0 ->  13.000000
 rounding using FE_TONEAREST:
  12.0 ->  12.000000
  12.1 ->  12.000000
 -12.1 -> -12.000000
  12.5 ->  12.000000
  12.9 ->  13.000000
 -12.9 -> -13.000000
  13.0 ->  13.000000
 When rounding 12.0 inexact result not reported
 When rounding 12.1 inexact result reported

.SH See also

   nearbyint  nearest integer using current rounding mode
   \fI(C++11)\fP    \fI(function)\fP
   trunc      nearest integer not greater in magnitude than the given value
   \fI(C++11)\fP    \fI(function)\fP
   fegetround
   fesetround gets or sets rounding direction
   \fI(C++11)\fP    \fI(function)\fP
   \fI(C++11)\fP
