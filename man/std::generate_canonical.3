.TH std::generate_canonical 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   template< class RealType, size_t bits, class Generator >  \fI(since C++11)\fP
   RealType generate_canonical( Generator& g );

   Generates a random floating point number in range [0; 1).

   g() is called as many times as needed to generate enough entropy, i.e. at least
   max(1, ⌈ min(b
   1, b
   2) / log
   2 R ⌉) times, where

     * b1 = std::numeric_limits<RealType>::digits
     * b2 = std::numeric_limits<RealType>::bits
     * R = g.max() - g.min() + 1.

.SH Parameters

   g - generator to use to acquire entropy

.SH Return value

   Floating point value in range [0; 1).

.SH Exceptions

   None except from those thrown by g

.SH Example

   produce random numbers with 10 bits of randomness: this may produce only 1024
   distinct values

   
// Run this code

 #include <random>
 #include <iostream>
  
 int main()
 {
     std::random_device rd;
     std::mt19937 gen(rd());
     for(int n=0; n<10; ++n) {
         std::cout << std::generate_canonical<double, 10>(gen) << ' ';
     }
 }

.SH Output:

 0.208143 0.824147 0.0278604 0.343183 0.0173263 0.864057 0.647037 0.539467 0.0583497 0.609219

.SH See also

   uniform_real_distribution produces real values evenly distributed across a range
   \fI(C++11)\fP                   \fI(class template)\fP 
