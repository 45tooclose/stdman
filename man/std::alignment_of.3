.TH std::alignment_of 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct alignment_of;

   Provides the member constant value equal to the alignment requirement of the type T,
   as if obtained by an alignof expression. If T is an array type, returns the
   alignment requirements of the element type.

.SH Contents

     • 1 Inherited from
       std::integral_constant

          • 1.1 Member constants
          • 1.2 Member functions
          • 1.3 Member types
          • 1.4 Possible implementation
          • 1.5 Notes
          • 1.6 Example
          • 1.7 See also

Inherited from std::integral_constant

.SH Member constants

   value    alignof(typename std::remove_all_extents<T>::type)
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator std::size_t converts the object to std::size_t, returns value
                        \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type std::size_t
   type       std::integral_constant<std::size_t, value>

.SH Possible implementation

   template< class T >
   struct alignment_of : std::integral_constant<
                             std::size_t,
                             alignof(typename std::remove_all_extents<T>::type)
                          > {};

.SH Notes

   This type trait predates the alignof keyword, which can be used to obtain the same
   value with less verbosity.

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 class A {};

 int main()
 {
     std::cout << std::alignment_of<A>::value << '\\n';
     std::cout << std::alignment_of<int>::value << '\\n';
     std::cout << std::alignment_of<double>::value << '\\n';
 }

.SH Output:

 1
 4
 8

.SH See also

   alignof operator queries alignment requirements of a type \fI(since C++11)\fP
   aligned_storage  defines the type suitable for use as uninitialized storage for
   \fI(C++11)\fP          types of given size
                    \fI(class template)\fP
   aligned_union    defines the type suitable for use as uninitialized storage for all
   \fI(C++11)\fP          given types
                    \fI(class template)\fP
   max_align_t      POD type with alignment requirement as great as any other scalar
   \fI(C++11)\fP          type
                    \fI(typedef)\fP
