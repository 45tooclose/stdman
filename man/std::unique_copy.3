.TH std::unique_copy 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class OutputIt >

   OutputIt unique_copy( InputIt first, InputIt last,               \fB(1)\fP

   OutputIt d_first );
   template< class InputIt, class OutputIt, class BinaryPredicate >

   OutputIt unique_copy( InputIt first, InputIt last,               \fB(2)\fP

   OutputIt d_first, BinaryPredicate p );

   Copies the elements from the range [first, last), to another range beginning at
   d_first in such a way that there are no consecutive equal elements. Only the first
   element of each group of equal elements is copied. The first version uses operator==
   to compare the elements, the second version uses the given binary predicate p.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Possible implementation
     • 4 Example
     • 5 Complexity
     • 6 See also

.SH Parameters

   first, last - the range of elements to process
   d_first     - the beginning of the destination range
                 binary predicate which returns true if the elements should be treated
                 as equal.

                 The signature of the predicate function should be equivalent to the
                 following:

                 bool pred(const Type1 &a, const Type2 &b);
   p           -
                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type
                 ForwardIt can be dereferenced and then implicitly converted to both of
                 them.

                 
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.
   -
   The type of dereferenced InputIt must meet the requirements of CopyAssignable.
   -
   The type of dereferenced InputIt must meet the requirements of CopyConstructible. if
   neither InputIt nor OutputIt satisfies ForwardIterator

.SH Return value

   Output iterator to the element past the last written element

.SH Possible implementation

.SH First version
   template<class ForwardIt, class OutputIt>
   ForwardIt unique_copy(ForwardIt first, ForwardIt last,
                         OutputIt d_first)
   {

       if (first == last)
           return d_first;

       *d_first = *first;
        while (++first != last) {
           if (!(*d_first == *first)) {
               *(++d_first) = *first;
           }
       }
       return ++d_first;
   }
.SH Second version
   template<class ForwardIt, class OutputIt, class BinaryPredicate>
   ForwardIt unique_copy(ForwardIt first, ForwardIt last,
                               OutputIt d_first, BinaryPredicate p)
   {

       if (first == last)
           return d_first;

       *d_first = *first;
       while (++first != last) {
           if (!p(*result, *first)) {
               *(++d_first) = *first;
           }
       }
       return ++d_first;
   }

.SH Example

   The following program trims all multiple consecutive spaces in a const string and
   prints the result

   
// Run this code

 #include <string>
 #include <iostream>
 #include <algorithm>
 #include <iterator>

 int main()
 {
     std::string s1 = "The      string    with many       spaces!";
     std::cout << "before: " << s1 << '\\n';

     std::string s2;
     std::unique_copy(s1.begin(), s1.end(), std::back_inserter(s2),
                      [](char c1, char c2){ return c1 == ' ' && c2 == ' '; });

     std::cout << "after:  " << s2 << '\\n';
 }

.SH Output:

 before: The      string    with many       spaces!
 after:  The string with many spaces!

.SH Complexity

   linear in the distance between first and last

.SH See also

                 finds two identical (or some other relationship) items adjacent to
   adjacent_find each other
                 \fI(function template)\fP
   unique        removes consecutive duplicate elements in a range
                 \fI(function template)\fP
