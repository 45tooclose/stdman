.TH std::min 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class T >                                    \fB(1)\fP
   const T& min( const T& a, const T& b );
   template< class T, class Compare >                     \fB(2)\fP
   const T& min( const T& a, const T& b, Compare comp );
   template< class T >                                    \fB(3)\fP \fI(since C++11)\fP
   T min( std::initializer_list<T> ilist );
   template< class T, class Compare >                     \fB(4)\fP \fI(since C++11)\fP
   T min( std::initializer_list<T> ilist, Compare comp );

   Returns the smaller of the given values.

   1-2) Returns the smaller of a and b.
   3-4) Returns the smallest of the values in initializer list ilist.

   The (1,3) versions use operator< to compare the values, the (2,4) versions use the
   given comparison function comp.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Complexity
     * 4 Possible implementation
     * 5 Example
     * 6 See also

.SH Parameters

   a, b  - the values to compare
   ilist - initializer list with the values to compare
           comparison function object (i.e. an object that satisfies the requirements
           of Compare) which returns true if if a is less than b.

           The signature of the comparison function should be equivalent to the
           following:
   cmp   -
           bool cmp(const Type1 &a, const Type2 &b);

           The signature does not need to have const &, but the function object must
           not modify the objects passed to it.
           The types Type1 and Type2 must be such that an object of type T can be
           implicitly converted to both of them. 
.SH Type requirements
   -
   T must meet the requirements of LessThanComparable. for the overloads \fB(1)\fP and \fB(3)\fP
   -
   T must meet the requirements of CopyConstructible. for the overloads \fB(3)\fP and \fB(4)\fP

.SH Return value

   1-2) The smaller of a and b. If the values are equivalent, returns a.

   3-4) The smallest value in ilist. If several values are equivalent to the smallest,
   returns the leftmost such value.

.SH Complexity

   1-2) Constant

   3-4) Linear in ilist.size()

.SH Possible implementation

.SH First version
   template<class T>
   const T& min(const T& a, const T& b)
   {
       return (b < a) ? b : a;
   }
.SH Second version
   template<class T, class Compare>
   const T& min(const T& a, const T& b, Compare comp)
   {
       return (comp(b, a)) ? b : a;
   }
                            Third version
   template<class T>
   T min( std::initializer_list<T> ilist)
   {
       return *std::min_element(ilist.begin(), ilist.end());
   }
                           Fourth version
   template<class T, class Compare>
   T min(std::initializer_list<T> ilist, Compare comp)
   {
       return *std::min_element(ilist.begin(), ilist.end(), comp);
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <string>

 int main()
 {
     std::cout << "smaller of 1 and 9999: " << std::min(1, 9999) << '\\n'
               << "smaller of 'a', and 'b': " << std::min('a', 'b') << '\\n'
               << "shortest of \\"foo\\", \\"bar\\", and \\"hello\\": " <<
                   std::min( { "foo", "bar", "hello" },
                             [](const std::string& s1, const std::string& s2) {
                                  return s1.size() < s2.size();
                              }) << '\\n';
 }

.SH Output:

 smaller of 1 and 9999: 1
 smaller of 'a', and 'b': a
 shortest of "foo", "bar", and "hello": foo

.SH See also

   max         returns the larger of two elements
               \fI(function template)\fP
   minmax      returns the larger and the smaller of two elements
   \fI(C++11)\fP     \fI(function template)\fP
   min_element returns the smallest element in a range
               \fI(function template)\fP
