.TH std::partition 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::partition \- std::partition

.SH Synopsis
   Defined in header <algorithm>
   template< class BidirIt, class UnaryPredicate >

   BidirectionalIterator partition( BidirIt first, BidirIt last,  \fI(until C++11)\fP

                                    UnaryPredicate p );
   template< class ForwardIt, class UnaryPredicate >

   ForwardIt partition( ForwardIt first, ForwardIt last,          \fI(since C++11)\fP

                        UnaryPredicate p );

   Reorders the elements in the range [first, last) in such a way that all elements for
   which the predicate p returns true precede the elements for which predicate p
   returns false. Relative order of the elements is not preserved.

.SH Parameters

   first, last           -          the range of elements to reorder
                                    unary predicate which returns true if the element
                                    should be ordered before other elements.

                                    The signature of the predicate function should be
                                    equivalent to the following:

   p                     -           bool pred(const Type &a);

                                    The signature does not need to have const &, but
                                    the function must not modify the objects passed to
                                    it.
                                    The type Type must be such that an object of type
                                    ForwardIt can be dereferenced and then implicitly
                                    converted to Type. 
.SH Type requirements
   -
   BidirIt must meet the requirements of BidirectionalIterator.
   -
   ForwardIt must meet the requirements of ValueSwappable and ForwardIterator. However,
   the operation is more efficient if ForwardIt also satisfies the requirements of
   BidirectionalIterator
   -
   UnaryPredicate must meet the requirements of Predicate.

.SH Return value

   Iterator to the first element of the second group.

.SH Complexity

   Exactly last-first applications of the predicate and at most last-first swaps. If
   ForwardIt meets the requirements of BidirectionalIterator at most (last-first)/2
   swaps are done.

.SH Possible implementation

   template<class BidirIt, class UnaryPredicate>
   BidirIt partition(BidirIt first, BidirIt last, UnaryPredicate p)
   {
       while \fB(1)\fP {
           while ((first != last) && p(*first)) {
               ++first;
           }
           if (first == last--) break;
           while ((first != last) && !p(*last)) {
               --last;
           }
           if (first == last) break;
           std::iter_swap(first++, last);
       }
       return first;
   }

.SH Example 1

   
// Run this code

 #include <algorithm>
 #include <functional>
 #include <iostream>
 #include <iterator>
 #include <vector>
  
 bool is_even(int i) { return i % 2 == 0; }
  
 int main()
 {
     std::vector<int> v;
     for (int i = 0; i < 10; ++i) v.push_back(i);
  
     std::cout << "Original vector:\\n    ";
     std::copy(v.begin(), v.end(), std::ostream_iterator<int>(std::cout, " "));
  
     // Partition the vector
     std::vector<int>::iterator p =
         std::partition(v.begin(), v.end(), std::ptr_fun(is_even));
  
     std::cout << "\\nPartitioned vector:\\n    ";
     std::copy(v.begin(), v.end(), std::ostream_iterator<int>(std::cout, " "));
     std::cout << "\\nBefore partition:\\n    ";
     std::copy(v.begin(), p,       std::ostream_iterator<int>(std::cout, " "));
     std::cout << "\\nAfter partition:\\n    ";
     std::copy(p,         v.end(), std::ostream_iterator<int>(std::cout, " "));
 }

.SH Possible output:

 Original vector:
     0 1 2 3 4 5 6 7 8 9
 Partitioned vector:
     0 8 2 6 4 5 3 7 1 9
 Before partition:
     0 8 2 6 4
 After partition:
     5 3 7 1 9

.SH Example 2

   
// Run this code

 #include <iterator>
 #include <algorithm>
 #include <forward_list>
 #include <iostream>
  
 template <class ForwardIt>
  ForwardIt choose_pivot(ForwardIt first, ForwardIt last)
  {
    return std::next(first, std::distance(first,last)/2);
  }
  
 template <class ForwardIt>
  void quicksort(ForwardIt first, ForwardIt last)
  {
     using T = typename std::iterator_traits<ForwardIt>::value_type;
  
     if(first == last) return;
  
     T pivot = *choose_pivot(first,last);
  
     ForwardIt middle1 = std::partition(first, last,
                          [pivot](const T& em){ return em < pivot; });
     ForwardIt middle2 = std::partition(middle1, last,
                          [pivot](const T& em){ return !(pivot < em); });
  
     quicksort(first, middle1);
     quicksort(middle2, last);
  }
  
  
 int main()
 {
    std::forward_list<int> fl = {1, 30, -4, 3, 5, -4, 1, 6, -8, 2, -5, 64, 1, 92};
  
    quicksort(std::begin(fl), std::end(fl));
  
    for(int fi : fl) std::cout << fi << ' ';
    std::cout << '\\n';
 }

.SH Output:

 -8 -5 -4 -4 1 1 1 2 3 5 6 30 64 92

.SH See also

   is_partitioned   determines if the range is partitioned by the given predicate
   \fI(C++11)\fP          \fI(function template)\fP 
                    divides elements into two groups while preserving their relative
   stable_partition order
                    \fI(function template)\fP 
