.TH std::add_pointer 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct add_pointer;

   Provides the member typedef type which is the type T*. If T is a reference type,
   then type is a pointer to the referred type.

.SH Member types

   Name Definition
   type pointer to T or to the type referenced by T

.SH Helper types

   template< class T >                                   \fI(since C++14)\fP
   using add_pointer_t = typename add_pointer<T>::type;

.SH Possible implementation

   template< class T >
   struct add_pointer {
       typedef typename std::remove_reference<T>::type* type;
   };

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 int main()
 {
     int i = 123;
     int& ri = i;
     typedef std::add_pointer<decltype(i)>::type IntPtr;
     typedef std::add_pointer<decltype(ri)>::type IntPtr2;
     IntPtr pi = &i;
     std::cout << "i = " << i << "\\n";
     std::cout << "*pi = " << *pi << "\\n";

     static_assert(std::is_pointer<IntPtr>::value, "IntPtr should be a pointer");
     static_assert(std::is_same<IntPtr, int*>::value, "IntPtr should be a pointer to int");
     static_assert(std::is_same<IntPtr2, IntPtr>::value, "IntPtr2 should be equal to IntPtr");

     typedef std::remove_pointer<IntPtr>::type IntAgain;
     IntAgain j = i;
     std::cout << "j = " << j << "\\n";

     static_assert(!std::is_pointer<IntAgain>::value, "IntAgain should not be a pointer");
     static_assert(std::is_same<IntAgain, int>::value, "IntPtr should be equal to int");
 }

.SH Output:

 i = 123
 *pi = 123
 j = 123

.SH See also

   is_pointer     checks if a type is a pointer type
   \fI(C++11)\fP        \fI(class template)\fP
   remove_pointer removes pointer from the given type
   \fI(C++11)\fP        \fI(class template)\fP
