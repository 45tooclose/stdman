.TH std::fill_n 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class OutputIt, class Size, class T >                 \fI(until C++11)\fP
   void fill_n( OutputIt first, Size count, const T& value );
   template< class OutputIt, class Size, class T >                 \fI(since C++11)\fP
   OutputIt fill_n( OutputIt first, Size count, const T& value );

   Assigns the given value value to the first count elements in the range beginning at
   first if count > 0. Does nothing otherwise.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Complexity
     * 4 Possible implementation
     * 5 Example
     * 6 See also

.SH Parameters

   first - the beginning of the range of elements to modify
   count - number of elements to modify
   value - the value to be assigned
.SH Type requirements
   -
   OutputIt must meet the requirements of OutputIterator.

.SH Return value

   \fI(none)\fP                                                                 \fI(until C++11)\fP
   Iterator one past the last element assigned if count > 0, first        \fI(since C++11)\fP
   otherwise.

.SH Complexity

   Exactly count assignments, for count > 0.

.SH Possible implementation

   template<class OutputIt, class Size, class T>
   OutputIt fill_n(OutputIt first, Size count, const T& value)
   {
       for (Size i = 0; i < count; i++) {
           *first++ = value;
       }
       return first;
   }

.SH Example

   The following code uses fill_n() to assign -1 to the first half of a vector of
   integers:

   
// Run this code

 #include <algorithm>
 #include <vector>
 #include <iostream>
 #include <iterator>

 int main()
 {
     std::vector<int> v1{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

     std::fill_n(v1.begin(), 5, -1);

     std::copy(begin(v1), end(v1), std::ostream_iterator<int>(std::cout, " "));
     std::cout << "\\n";
 }

.SH Output:

 -1 -1 -1 -1 -1 5 6 7 8 9

.SH See also

   fill assigns a range of elements a certain value
        \fI(function template)\fP
