.TH std::vector 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <vector>
   template<

       class T,
       class Allocator = std::allocator<T>

   > class vector;

   std::vector is a sequence container that encapsulates dynamic size arrays.

   The elements are stored contiguously, which means that elements can be accessed not
   only through iterators, but also using offsets on regular pointers to elements. This
   means that a pointer to an element of a vector may be passed to any function that
   expects a pointer to an element of an array.

   The storage of the vector is handled automatically, being expanded and contracted as
   needed. Vectors usually occupy more space than static arrays, because more memory is
   allocated to handle future growth. This way a vector does not need to reallocate
   each time an element is inserted, but only when the additional memory is exhausted.
   The total amount of allocated memory can be queried using capacity() function.
   Extra memory can be returned to the system via a call to shrink_to_fit().
   \fI(since C++11)\fP

   Reallocations are usually costly operations in terms of performance. reserve()
   function can be used to eliminate reallocations if the number of elements is known
   beforehand.

   The complexity (efficiency) of common operations on vectors is as follows:

     • Random access - constant O(1)
     • Insertion or removal of elements at the end - amortized constant O(1)
     • Insertion or removal of elements - linear in distance to the end of the vector
       O(n)

   std::vector meets the requirements of Container, AllocatorAwareContainer,
   SequenceContainer and ReversibleContainer.

.SH Contents

     • 1 Template parameters
     • 2 Specializations
     • 3 Member types
     • 4 Member functions

          • 4.1 Element access
          • 4.2 Iterators
          • 4.3 Capacity
          • 4.4 Modifiers

     • 5 Non-member functions

.SH Template parameters

               The type of the elements.

               T must meet the requirements of CopyAssignable and         \fI(until C++11)\fP
               CopyConstructible.
   T         - The requirements that are imposed on the elements depend
               on the actual operations performed on the container.
               Generally, it is required that element type meets the      \fI(since C++11)\fP
               requirements of MoveConstructible and MoveAssignable, but
               many member functions impose stricter requirements.
   Allocator - An allocator that is used to acquire memory to store the elements. The
               type must meet the requirements of Allocator.

.SH Specializations

   The standard library provides a specialization of std::vector for the type bool,
   which is optimized for space efficiency.

   vector<bool> space-efficient dynamic bitset
                \fI(class template specialization)\fP

.SH Member types

   Member type            Definition
   value_type             T
   allocator_type         Allocator
   size_type              Unsigned integral type (usually std::size_t)
   difference_type        Signed integer type (usually std::ptrdiff_t)
   reference              Allocator::reference \fI(until C++11)\fP
                          value_type& \fI(since C++11)\fP
   const_reference        Allocator::const_reference \fI(until C++11)\fP
                          const value_type& \fI(since C++11)\fP
   pointer                Allocator::pointer \fI(until C++11)\fP
                          std::allocator_traits<Allocator>::pointer \fI(since C++11)\fP
   const_pointer          Allocator::const_pointer \fI(until C++11)\fP
                          std::allocator_traits<Allocator>::const_pointer \fI(since C++11)\fP
   iterator               RandomAccessIterator
   const_iterator         Constant random access iterator
   reverse_iterator       std::reverse_iterator<iterator>
   const_reverse_iterator std::reverse_iterator<const_iterator>

.SH Member functions

   constructor   constructs the vector
                 \fI(public member function)\fP
   destructor    destructs the vector
                 \fI(public member function)\fP
   operator=     assigns values to the container
                 \fI(public member function)\fP
   assign        assigns values to the container
                 \fI(public member function)\fP
   get_allocator returns the associated allocator
                 \fI(public member function)\fP
.SH Element access
   at            access specified element with bounds checking
                 \fI(public member function)\fP
   operator[]    access specified element
                 \fI(public member function)\fP
   front         access the first element
                 \fI(public member function)\fP
   back          access the last element
                 \fI(public member function)\fP
   data          direct access to the underlying array
   \fI(C++11)\fP       \fI(public member function)\fP
.SH Iterators
   begin         returns an iterator to the beginning
   cbegin        \fI(public member function)\fP
   end           returns an iterator to the end
   cend          \fI(public member function)\fP
   rbegin        returns a reverse iterator to the beginning
   crbegin       \fI(public member function)\fP
   rend          returns a reverse iterator to the end
   crend         \fI(public member function)\fP
.SH Capacity
   empty         checks whether the container is empty
                 \fI(public member function)\fP
   size          returns the number of elements
                 \fI(public member function)\fP
   max_size      returns the maximum possible number of elements
                 \fI(public member function)\fP
   reserve       reserves storage
                 \fI(public member function)\fP
                 returns the number of elements that can be held in currently allocated
   capacity      storage
                 \fI(public member function)\fP
   shrink_to_fit reduces memory usage by freeing unused memory
   \fI(C++11)\fP       \fI(public member function)\fP
.SH Modifiers
   clear         clears the contents
                 \fI(public member function)\fP
   insert        inserts elements
                 \fI(public member function)\fP
   emplace       constructs element in-place
   \fI(C++11)\fP       \fI(public member function)\fP
   erase         erases elements
                 \fI(public member function)\fP
   push_back     adds elements to the end
                 \fI(public member function)\fP
   emplace_back  constructs elements in-place at the end
   \fI(C++11)\fP       \fI(public member function)\fP
   pop_back      removes the last element
                 \fI(public member function)\fP
   resize        changes the number of elements stored
                 \fI(public member function)\fP
   swap          swaps the contents
                 \fI(public member function)\fP

.SH Non-member functions

   operator==
   operator!=
   operator<              lexicographically compares the values in the vector
   operator<=             \fI(function template)\fP
   operator>
   operator>=
   std::swap(std::vector) specializes the std::swap algorithm
                          \fI(function template)\fP
