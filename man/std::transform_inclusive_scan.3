.TH std::transform_inclusive_scan 3 "Nov 16 2016" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::transform_inclusive_scan \- std::transform_inclusive_scan

.SH Synopsis
   Defined in header <numeric>
   template< class InputIt, class OutputIt,

   class UnaryOperation, class BinaryOperation >
   OutputIt transform_inclusive_scan( InputIt first, InputIt last, \fB(1)\fP \fI(since C++17)\fP
   OutputIt d_first, UnaryOperation unary_op,

   BinaryOperation binary_op );
   template< class ExecutionPolicy, class InputIt, class OutputIt,

   class UnaryOperation, class BinaryOperation >
   OutputIt transform_inclusive_scan( ExecutionPolicy&& policy,    \fB(2)\fP \fI(since C++17)\fP
   InputIt first, InputIt last,
   OutputIt d_first, UnaryOperation unary_op,

   BinaryOperation binary_op );
   template< class InputIt, class OutputIt,

   class UnaryOperation, class BinaryOperation, class T >
   OutputIt transform_inclusive_scan( InputIt first, InputIt last, \fB(3)\fP \fI(since C++17)\fP
   OutputIt d_first, UnaryOperation unary_op,

   BinaryOperation binary_op, T init );
   template< class ExecutionPolicy, class InputIt, class OutputIt,

   class UnaryOperation, class BinaryOperation, class T >
   OutputIt transform_inclusive_scan( ExecutionPolicy&& policy,    \fB(4)\fP \fI(since C++17)\fP
   InputIt first, InputIt last,
   OutputIt d_first, UnaryOperation unary_op,

   BinaryOperation binary_op, T init );

   Transforms each element in the range [first, last) with unary_op, then computes an
   inclusive prefix sum operation using binary_op over the resulting range, optionally
   with init as the initial value, and writes the results to the range beginning at
   d_first. "inclusive" means that the i-th input element is included in the i-th sum.

   Formally, assigns through each iterator i in [d_first, d_first + (last - first)) the
   value of

     * for overloads (1-2), the generalized noncommutative sum of unary_op(*j)... for
       every j in [first, first + (i - d_first + 1)) over binary_op,
     * for overloads (3-4), the generalized noncommutative sum of init, unary_op(*j)...
       for every j in [first, first + (i - d_first + 1)) over binary_op,

   where generalized noncommutative sum GNSUM(op, a
   1, ..., a
   N) is defined as follows:

     * if N=1, a
       1
     * if N > 1, op(GNSUM(op, a
       1, ..., a
       K), GNSUM(op, a
       M, ..., a
       N)) for any K where 1 < K+1 = M â‰¤ N

   In other words, the summation operations may be performed in arbitrary order, and
   the behavior is nondeterministic if binary_op is not associative.

   Overloads (2, 4) are executed according to policy, and do not participate in
   overload resolution unless std::is_execution_policy_v<std::decay_t<ExecutionPolicy>>
   is true.

   unary_op and binary_op shall not invalidate iterators or subranges, nor modify
   elements in the ranges [first, last) or [d_first, d_first + (last - first)).
   Otherwise, the behavior is undefined.

.SH Parameters

   first, last - the range of elements to sum
   d_first     - the beginning of the destination range; may be equal to first
   policy      - the execution policy to use. See execution policy for details.
   init        - the initial value
   unary_op    - unary FunctionObject that will be applied to each element of the input
                 range. The return type must be acceptable as input to binary_op.
   binary_op   - binary FunctionObject that will be applied in to the result of
                 unary_op, the results of other binary_op, and init if provided.
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.

.SH Return value

   Iterator to the element past the last element written.

.SH Complexity

   O(last - first) applications of each of binary_op and unary_op.

.SH Exceptions

   The overloads with a template parameter named ExecutionPolicy report errors as
   follows:

     * If execution of a function invoked as part of the algorithm throws an exception,
       std::terminate is called.
     * If the algorithm fails to allocate memory, std::bad_alloc is thrown.

.SH Notes

   unary_op is not applied to init.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   partial_sum              computes the partial sum of a range of elements
                            \fI(function template)\fP
   transform                applies a function to a range of elements
                            \fI(function template)\fP
   inclusive_scan           similar to std::partial_sum, includes the ith input element
   \fI(C++17)\fP                  in the ith sum
                            \fI(function template)\fP
   transform_exclusive_scan applies a functor, then calculates exclusive scan
   \fI(C++17)\fP                  \fI(function template)\fP

.SH Category:

     * Todo no example
