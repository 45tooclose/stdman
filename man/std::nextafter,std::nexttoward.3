.TH std::nextafter,std::nexttoward 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cmath>
   float       nextafter( float from, float to );              \fB(1)\fP \fI(since C++11)\fP
   double      nextafter( double from, double to );            \fB(2)\fP \fI(since C++11)\fP
   long double nextafter( long double from, long double to );  \fB(3)\fP \fI(since C++11)\fP
   Promoted    nextafter( Arithmetic from, Arithmetic to );    \fB(4)\fP \fI(since C++11)\fP
   float       nexttoward( float from, long double to );       \fB(5)\fP \fI(since C++11)\fP
   double      nexttoward( double from, long double to );      \fB(6)\fP \fI(since C++11)\fP
   long double nexttoward( long double from, long double to ); \fB(7)\fP \fI(since C++11)\fP
   double      nexttoward( Integral from, long double to );    \fB(8)\fP \fI(since C++11)\fP

   Returns the next representable value of from in the direction of to. If from equals
   to to, to is returned.

   4) If any argument has integral type, it is cast to double. If any other argument is
   long double, then the return type is long double, otherwise it is double

.SH Parameters

   from, to - floating point values

.SH Return value

   the next representable value of from in the direction of to.

.SH Example

   
// Run this code

 #include <cmath>
 #include <iostream>
 #include <iomanip>
  
 int main()
 {
     std::cout << "0.1 lies between the doubles " << std::setprecision(100) << '\\n'
               << 0.1 << '\\n' << " and\\n"
               << std::nextafter(0.1, 0) << '\\n';
 }

.SH Output:

 0.1 lies between the doubles
 0.1000000000000000055511151231257827021181583404541015625
  and
 0.09999999999999999167332731531132594682276248931884765625
