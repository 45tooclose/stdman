.TH std::abs(float),std::fabs 3 "Nov 16 2016" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::abs(float),std::fabs \- std::abs(float),std::fabs

.SH Synopsis
   Defined in header <cmath>
   Defined in header <cstdlib>              \fI(since C++17)\fP
   float abs( float arg );              \fB(1)\fP
   double abs( double arg );            \fB(2)\fP
   long double abs( long double arg );  \fB(3)\fP
   Defined in header <cmath>
   double abs( Integral arg );          \fB(4)\fP \fI(since C++11)\fP
   float fabs( float arg );             \fB(5)\fP
   double fabs( double arg );           \fB(6)\fP
   long double fabs( long double arg ); \fB(7)\fP
   double fabs( Integral arg );         \fB(8)\fP \fI(since C++11)\fP

   1-3,5-7) Computes the absolute value of a floating point value arg.
   4,8) A set of overloads or a function template for all combinations of arguments of
   arithmetic type not covered by (1-3,5-7). If any argument has integral type, it is
   cast to double. If any other argument is long double, then the return type is long
   double, otherwise it is double.

   For integral arguments, the integral overloads of std::abs may yield a
   better match than these overloads. If std::abs is called with an
   argument of type X such that std::is_unsigned<X>::value is true and X  \fI(since C++17)\fP
   cannot be converted to int by integral promotion, the program is
   ill-formed.

.SH Parameters

   arg - Value of a floating-point or Integral type

.SH Return value

   If successful, returns the absolute value of arg (|arg|). The value returned is
   exact and does not depend on any rounding modes.

.SH Error handling

   This function is not subject to any of the error conditions specified in
   math_errhandling

   If the implementation supports IEEE floating-point arithmetic (IEC 60559),

     * If the argument is ±0, +0 is returned
     * If the argument is ±∞, +∞ is returned
     * If the argument is NaN, NaN is returned

.SH Notes

   The overloads of std::abs for integer types \fB(4)\fP disagree in return types with the
   integer overloads of std::abs defined in <cstdlib>, and they also introduce the
   dangerous overloads of std::abs for unsigned integer types (Defect reports LWG 2192
   and LWG 2294)

.SH Example

   
// Run this code

 #include <iostream>
 #include <cmath>

 int main()
 {
     std::cout << "abs(+3.0) = " << std::abs(+3.0) << '\\n'
               << "abs(-3.0) = " << std::abs(-3.0) << '\\n';
     // special values
     std::cout << "abs(-0.0) = " << std::abs(-0.0) << '\\n'
               << "abs(-Inf) = " << std::abs(-INFINITY) << '\\n';
 }

.SH Possible output:

 abs(+3.0) = 3
 abs(-3.0) = 3
 abs(-0.0) = 0
 abs(-Inf) = inf

.SH See also

   abs(int)
   labs               computes absolute value of an integral value (|x|)
   llabs              \fI(function)\fP
   \fI(C++11)\fP
   copysign           copies the sign of a floating point value
   \fI(C++11)\fP            \fI(function)\fP
   signbit            checks if the given number is negative
   \fI(C++11)\fP            \fI(function)\fP
   abs(std::complex)  returns the magnitude of a complex number
                      \fI(function template)\fP
   abs(std::valarray) applies the function std::abs to each element of valarray
                      \fI(function template)\fP
   C documentation for
   fabs
