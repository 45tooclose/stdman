.TH std::map::insert 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   std::pair<iterator,bool> insert( const value_type&   \fB(1)\fP
   value );
   template< class P >                                  \fB(2)\fP \fI(since C++11)\fP
   std::pair<iterator,bool> insert( P&& value );
   iterator insert( iterator hint, const value_type&                      \fI(until C++11)\fP
   value );
   iterator insert( const_iterator hint, const                            \fI(since C++11)\fP
   value_type& value );
   template< class P >                                  \fB(3)\fP \fB(4)\fP           \fI(since C++11)\fP
   iterator insert( const_iterator hint, P&& value );
   template< class InputIt >                                \fB(5)\fP
   void insert( InputIt first, InputIt last );
   void insert( std::initializer_list<value_type> ilist     \fB(6)\fP           \fI(since C++11)\fP
   );

   Inserts element(s) into the container, if the container doesn't already contain an
   element with an equivalent key.

   1-2) Inserts value. The overload \fB(2)\fP is equivalent to
   emplace(std::forward<P>(value)) and only participates in overload resolution if
   std::is_constructible<value_type, P&&>::value == true.
   3-4) Inserts value in the position as close as possible, just prior\fI(since C++11)\fP, to
   hint. The overload \fB(4)\fP is equivalent to emplace_hint(hint, std::forward<P>(value))
   and only participates in overload resolution if std::is_constructible<value_type,
   P&&>::value == true.
   5) Inserts elements from range [first, last).
   6) Inserts elements from initializer list ilist.

   No iterators or references are invalidated.

.SH Parameters

   hint        - iterator, used as a suggestion as to where to insert the content
   value       - element value to insert
   first, last - range of elements to insert
   ilist       - initializer list to insert the values from
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.

.SH Return value

   1-2) Returns a pair consisting of an iterator to the inserted element (or to the
   element that prevented the insertion) and a bool denoting whether the insertion took
   place.
   3-4) Returns an iterator to the inserted element, or to the element that prevented
   the insertion.
   5-6) \fI(none)\fP

.SH Exceptions

   1-4) If an exception is thrown by any operation, the insertion has no effect.

    This section is incomplete
    Reason: cases 5-6

.SH Complexity

   1-2) Logarithmic in the size of the container, O(log(size())).

   3-4) Amortized constant if the insertion happens in the position just  \fI(until C++11)\fP
   after the hint, logarithmic in the size of the container otherwise.
   3-4) Amortized constant if the insertion happens in the position just  \fI(since C++11)\fP
   before the hint, logarithmic in the size of the container otherwise.

   5-6) O(N*log(size() + N)), where N is the number of elements to insert.

.SH See also

   emplace      constructs element in-place
   \fI(C++11)\fP      \fI(public member function)\fP 
   emplace_hint constructs elements in-place using a hint
   \fI(C++11)\fP      \fI(public member function)\fP 

.SH Category:

     * Todo with reason
