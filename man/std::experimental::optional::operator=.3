.TH std::experimental::optional::operator= 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   optional& operator=( std::nullopt_t );        \fB(1)\fP (library fundamentals TS)
   optional& operator=( const optional& other ); \fB(2)\fP (library fundamentals TS)
   optional& operator=( optional&& other );      \fB(3)\fP (library fundamentals TS)
   template< class U >                           \fB(4)\fP (library fundamentals TS)
   optional& operator=( U&& value );

   Assigns contents to the contained value.

   1) If *this is in engaged state before the call, the contained value is destroyed by
   calling its destructor. *this is in disengaged state after the call.
   2-3) Assigns the state of other.
   * If both *this and other are in disengaged states, the function has no effect.
   * If *this is in engaged state, but other is not, then the contained value is
   destroyed by calling its destructor. *this is in disengaged state after the call.
   * If other is in engaged state, then depending on whether *this is in engaged state,
   the contained value is either direct-constructed or assigned the contained value of
   other. The contained value is either copied \fB(2)\fP, or moved \fB(3)\fP.
   4) Depending on whether *this is in engaged state before the call, the contained
   value is either direct-constructed from value or assigned value. T must be
   constructible and assignable from U, i.e. the following must hold:
   std::is_constructible<T,U>::value == true && std::is_assignable<T,U>::value == true

.SH Parameters

   other           -           another optional object whose contained value to assign
   value           -           value to assign to the contained value
.SH Type requirements
   -
   T must meet the requirements of CopyAssignable and CopyConstructible in order to use
   overload \fB(2)\fP.
   -
   T must meet the requirements of MoveAssignable and MoveConstructible in order to use
   overload \fB(3)\fP.

.SH Return value

   *this

.SH Exceptions

   1)
   noexcept specification:  
   noexcept
     
   2-4) Throws any exception thrown by the constructor or assignment operator of T. If
   an exception is thrown, the initialization state of *this (and of other in case of
   \fB(2)\fP ) is unchanged, i.e. if the object was in engaged state, it is left in engaged
   state, and the other way round. The contents of value and the contained values of
   *this and other depend on the exception safety guarantees of the operation from
   which the exception originates (copy-constructor, move-assignment, etc.).
   3) Throws any exception thrown by the constructor or assignment operator T. Has the
   following noexcept declaration:
   noexcept specification:  \fI(since C++11)\fP
   noexcept(std::is_nothrow_move_assignable<T>::value &&
   std::is_nothrow_move_constructible<T>::value)

.SH See also

   emplace constructs the contained value in-place
           \fI(public member function)\fP 
