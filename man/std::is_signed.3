.TH std::is_signed 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_signed;

   If T is a signed arithmetic type, provides the member constant value equal true. For
   any other type, value is false.

.SH Member constants

   value    true if T is a signed arithmetic type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 class A {};
 enum B : int {};
 enum class C : int {};
  
 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_signed<A>::value << '\\n';
     std::cout << std::is_signed<float>::value << '\\n';
     std::cout << std::is_signed<signed int>::value << '\\n';
     std::cout << std::is_signed<unsigned int>::value << '\\n';
     std::cout << std::is_signed<B>::value << '\\n';
     std::cout << std::is_signed<C>::value << '\\n';
 }

.SH Output:

 false
 true
 true
 false
 false
 false

.SH See also

   is_unsigned       checks if a type is unsigned arithmetic type
   \fI(C++11)\fP           \fI(class template)\fP 
   is_signed         identifies signed types
   \fB[static]\fP          \fI(public static member constant of std::numeric_limits)\fP 
   is_floating_point checks if a type is floating-point type
   \fI(C++11)\fP           \fI(class template)\fP 
   is_integral       checks if a type is integral type
   \fI(C++11)\fP           \fI(class template)\fP 
   make_signed       makes the given integral type signed
   \fI(C++11)\fP           \fI(class template)\fP 
   make_unsigned     makes the given integral type unsigned
   \fI(C++11)\fP           \fI(class template)\fP 
