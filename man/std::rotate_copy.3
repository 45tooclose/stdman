.TH std::rotate_copy 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt, class OutputIt >

   OutputIt rotate_copy( ForwardIt first, ForwardIt n_first,

   ForwardIt last, OutputIt d_first );

   Copies the elements from the range [first, last), to another range beginning at
   d_first in such a way, that the element n_first becomes the first element of the new
   range and n_first - 1 becomes the last element.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Possible implementation
     * 4 Example
     * 5 Complexity
     * 6 See also

.SH Parameters

   first, last - the range of elements to copy
   n_first     - an iterator to an element in [first, last) that should appear at the
                 beginning of the new range
   d_first     - beginning of the destination range
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   OutputIt must meet the requirements of OutputIterator.

.SH Return value

   Output iterator to the element past the last element copied.

.SH Possible implementation

   template<class ForwardIt, class OutputIt>
   OutputIt rotate_copy(ForwardIt first, ForwardIt n_first,
                              ForwardIt last, OutputIt d_first)
   {
       d_first = std::copy(n_first, last, d_first);
       return std::copy(first, n_first, d_first);
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <vector>
 #include <iostream>

 int main()
 {
     std::vector<int> src = {1, 2, 3, 4, 5};
     auto pivot = std::find(src.begin(), src.end(), 3);
     std::vector<int> dest(src.size());

     std::rotate_copy(src.begin(), pivot, src.end(), dest.begin());

     for (const auto &i : dest) {
         std::cout << i << ' ';
     }
     std::cout << '\\n';
 }

.SH Output:

 3 4 5 1 2

.SH Complexity

   linear in the distance between first and last

.SH See also

   rotate rotates the order of elements in a range
          \fI(function template)\fP
