.TH std::basic_string::assign 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   basic_string& assign( size_type count, CharT ch );          \fB(1)\fP
   basic_string& assign( const basic_string& str );            \fB(2)\fP
   basic_string& assign( const basic_string& str,

   size_type pos,                                              \fB(3)\fP

   size_type count );
   basic_string& assign( basic_string&& str );                 \fB(4)\fP \fI(since C++11)\fP
   basic_string& assign( const CharT* s,                       \fB(5)\fP
   size_type count );
   basic_string& assign( const CharT* s );                     \fB(6)\fP
   template< class InputIt >                                   \fB(7)\fP
   basic_string& assign( InputIt first, InputIt last );
   basic_string& assign( std::initializer_list<CharT> ilist ); \fB(8)\fP \fI(since C++11)\fP

   Replaces the contents of the string.

   1) Replaces the contents with count copies of charactor ch

   2) Replaces the contents with a copy of str

   3) Replaces the contents with a substring [pos, pos+count) of str. If the requested
   substring lasts past the end of the string, or if count == npos, the resulting
   substring is [pos, size()). If pos >= str.size(), std::out_of_range is thrown.

   4) Replaces the contents with those of str using move semantics. str is in undefined
   state after the operation.

   5) Replaces the contents with the first count characters of character string pointed
   to by s. s can contain null characters.

   6) Replaces the contents with those of null-terminated character string pointed to
   by s. The length of the string is determined by the first null character.

   7) Replaces the contents with copies of the characters in the range [first, last)

   8) Replaces the contents with those of the initializer list ilist.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Complexity
     * 4 Exceptions
     * 5 Example
     * 6 See also

.SH Parameters

   count       - size of the resulting string
   ch          - value to initialize characters of the string with
   first, last - range to copy the characters from
   str         - string to be used as source to initialize the characters with
   s           - pointer to a character string to use
                 as source to initialize the string with
   init        - initializer list to initialize the characters of the string with
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.

.SH Return value

   *this

.SH Complexity

   1) linear in count

   2) linear in size of str

   3) linear in count

   4) constant. If alloc is given and alloc != other.get_allocator(), then linear.

   5) linear in count

   6) linear in size of s

   7) linear in distance between first and last

   8) linear in size of init

.SH Exceptions

   If an exception is thrown for any reason, this function has no effect (strong
   exception guarantee).
   \fI(since C++11)\fP

   If the operation would result in size() > max_size(), throws std::length_error.

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   constructor   constructs a basic_string
                 \fI(public member function)\fP
   operator=     assigns values to the string
                 \fI(public member function)\fP

.SH Category:

     * Todo no example
