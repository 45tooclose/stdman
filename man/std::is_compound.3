.TH std::is_compound 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_compound;

   If T is a compound type (that is, array, function, object pointer, function pointer,
   member object pointer, member function pointer, reference, class, union, or
   enumeration, including any cv-qualified variants), provides the member constant
   value equal true. For any other type, value is false.

.SH Contents

     • 1 Inherited from
       std::integral_constant

          • 1.1 Member constants
          • 1.2 Member functions
          • 1.3 Member types
          • 1.4 Notes
          • 1.5 Possible implementation
          • 1.6 Example
          • 1.7 See also

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a compound type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Notes

   Compound types are the types that are constructed from fundamental types. Any C++
   type is either fundamental or compound.

.SH Possible implementation

   template< class T >
   struct is_compound : std::integral_constant<bool, !std::is_fundamental<T>::value> {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 int main() {
     class cls {};
     std::cout << (std::is_compound<cls>::value
                      ? "T is compound"
                      : "T is not a compound") << '\\n';
     std::cout << (std::is_compound<int>::value
                      ? "T is compound"
                      : "T is not a compound") << '\\n';
 }

.SH Output:

 T is compound
 T is not a compound

.SH See also

   is_fundamental checks if a type is fundamental type
   \fI(C++11)\fP        \fI(class template)\fP
   is_scalar      checks if a type is scalar type
   \fI(C++11)\fP        \fI(class template)\fP
   is_object      checks if a type is object type
   \fI(C++11)\fP        \fI(class template)\fP
   is_array       checks if a type is an array type
   \fI(C++11)\fP        \fI(class template)\fP
