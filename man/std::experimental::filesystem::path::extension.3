.TH std::experimental::filesystem::path::extension 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::filesystem::path::extension \- std::experimental::filesystem::path::extension

.SH Synopsis
   path extension() const;  (filesystem TS)

   Returns the extension of the filename() identified by the path.

   The extension is the substring between the last . character and the end of the
   filename. The return value of the function returns the . character if an extension
   is present.

   If the pathname is either . or .., or the pathname does not contain the . character,
   then empty path is returned.

   Additional behavior may be defined by the implementations for file systems which
   append additional elements (such as alternate data streams or partitioned dataset
   names) to extensions.

.SH Parameters

   \fI(none)\fP

.SH Return value

   The extension of the current pathname or an empty path if there's no extension.

.SH Exceptions

   \fI(none)\fP

.SH Example

   
// Run this code

 #include <filesystem>
 #include <iostream>
  
 int main()
 {
     std::cout << std::fs::path("/foo/bar.txt").extension() << '\\n';
     std::cout << std::fs::path("/foo/bar.").extension() << '\\n';
     std::cout << std::fs::path("/foo/bar").extension() << '\\n';
     std::cout << std::fs::path("/foo/bar.txt/bar.cc").extension() << '\\n';
     std::cout << std::fs::path("/foo/bar.txt/bar.").extension() << '\\n';
     std::cout << std::fs::path("/foo/bar.txt/bar").extension() << '\\n';
     std::cout << std::fs::path("/foo/.").extension() << '\\n';
     std::cout << std::fs::path("/foo/..").extension() << '\\n';
     std::cout << std::fs::path("/foo/.hidden").extension() << '\\n';
 }

.SH Output:

 .txt
 .
  
 .cc
 .
  
  
  
 .hidden

.SH See also

   filename returns the filename path component
            \fI(public member function)\fP 
   stem     returns the stem path component
            \fI(public member function)\fP 
