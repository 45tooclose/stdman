.TH std::is_volatile 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_volatile;

   If T is a volatile-qualified type (that is, volatile, or const volatile), provides
   the member constant value equal true. For any other type, value is false.

.SH Contents

     • 1 Inherited from
       std::integral_constant

          • 1.1 Member constants
          • 1.2 Member functions
          • 1.3 Member types
          • 1.4 Possible implementation
          • 1.5 Example
          • 1.6 See also

Inherited from std::integral_constant

.SH Member constants

   value    true if T is a volatile-qualified type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T> struct is_volatile             : std::false_type {};
   template<class T> struct is_volatile<volatile T> : std::true_type {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>
  
 int main()
 {
     std::cout << boolalpha;
     std::cout << std::is_volatile<int>::value << '\\n';
     std::cout << std::is_volatile<volatile int>::value  << '\\n';
 }

.SH Output:

 false
 true

.SH See also

   is_const checks if a type is const-qualified
   \fI(C++11)\fP  \fI(class template)\fP
