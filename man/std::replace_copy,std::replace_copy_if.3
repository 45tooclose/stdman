.TH std::replace_copy,std::replace_copy_if 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class OutputIt, class T >

   OutputIt replace_copy( InputIt first, InputIt last, OutputIt d_first,    \fB(1)\fP

   const T& old_value, const T& new_value );
   template< class InputIt, class OutputIt, class UnaryPredicate, class T >

   OutputIt replace_copy_if( InputIt first, InputIt last, OutputIt d_first, \fB(2)\fP

   UnaryPredicate p, const T& new_value );

   Copies the all elements from the range [first, last) to another range beginning at
   d_first replacing all elements satisfying specific criteria with new_value. The
   first version replaces the elements that are equal to old_value, the second version
   replaces elements for which predicate p returns true. The source and destination
   ranges cannot overlap.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Complexity
     • 4 Possible implementation
     • 5 Example
     • 6 See also

.SH Parameters

   first, last - the range of elements to copy
   d_first     - the beginning of the destination range
   old_value   - the value of elements to replace
                 unary predicate which returns true if the element value should be
                 replaced.

                 The signature of the predicate function should be equivalent to the
                 following:
   p           -
                 bool pred(const Type &a);

                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The type Type must be such that an object of type InputIt can be
                 dereferenced and then implicitly converted to Type. 
   new_value   - the value to use as replacement
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   OutputIt must meet the requirements of OutputIterator.

.SH Return value

   Iterator to the element past the last element copied.

.SH Complexity

   Exactly last - first applications of the predicate.

.SH Possible implementation

.SH First version
   template<class InputIt, class OutputIt, class T>
   OutputIt replace_copy(InputIt first, InputIt last, OutputIt d_first,
                         const T& old_value, const T& new_value)
   {
       for (; first != last; ++first) {
           *d_first++ = (*first == old_value) ? new_value : *first;
       }
       return d_first;
   }
.SH Second version
   template<class InputIt, class OutputIt,
            class UnaryPredicate, class T>
   OutputIt replace_copy_if(InputIt first, InputIt last, OutputIt d_first,
                            UnaryPredicate p, const T& new_value)
   {
       for (; first != last; ++first) {
           *d_first++ = p( *first ) ? new_value : *first;
       }
       return d_first;
   }

.SH Example

   The following copy prints a vector, replacing all values over 5 with 99 on the fly.

   
// Run this code

 #include <algorithm>
 #include <vector>
 #include <iostream>
 #include <iterator>
 #include <functional>

 int main()
 {
     std::vector<int> v{5, 7, 4, 2, 8, 6, 1, 9, 0, 3};
     std::replace_copy_if(v.begin(), v.end(),
                          std::ostream_iterator<int>(std::cout, " "),
                          [](int n){return n > 5;}, 99);
     std::cout << '\\n';
 }

.SH Output:

 5 99 4 2 99 99 1 99 0 3

.SH See also

   remove    removes elements satisfying specific criteria
   remove_if \fI(function template)\fP
