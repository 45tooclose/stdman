.TH std::pow(std::complex) 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::pow(std::complex) \- std::pow(std::complex)

.SH Synopsis
   Defined in header <complex>
   template< class T >
   complex<T> pow( const complex<T>& x, const complex<T>& y);
   template< class T >
   complex<T> pow( const complex<T>& x, const T& y);
   template< class T >
   complex<T> pow( const T& x, const complex<T>& y);
   template< class T, class U >                                           \fI(since C++11)\fP
   complex</*Promoted*/> pow( const complex<T>& x, const complex<U>& y);
   template< class T, class U >                                           \fI(since C++11)\fP
   complex</*Promoted*/> pow( const complex<T>& x, const U& y);
   template< class T, class U >                                           \fI(since C++11)\fP
   complex</*Promoted*/> pow( const T& x, const complex<U>& y);

   Computes complex x raised to a complex power y. The operation is defined as exp(y Â·
   log(x) ). A branch cut exists along the negative real axis.

   The result of pow(0, 0) is implementation-defined.

   \fI(since C++11)\fPAdditional overloads are provided for all arithmetic types, such that

   1. If either argument is long double or std::complex<long double>, then both
   arguments are cast to std::complex<long double>
   2. Otherwise, if either argument is double, std::complex<double> or integer type,
   then both arguments are cast to std::complex<double>
   3. Otherwise, if either argument is float or std::complex<float>, then both
   arguments are cast to std::complex<float>

.SH Parameters

   x - base as a complex value
   y - exponent as a complex value

.SH Return value

   x raised to a power y.

.SH See also

   exp(std::complex)  complex base e exponential
                      \fI(function template)\fP 
   sqrt(std::complex) complex square root in the range of the right half-plane
                      \fI(function template)\fP 
