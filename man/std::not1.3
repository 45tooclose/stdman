.TH std::not1 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <functional>
   template< class Predicate >                                          \fI(until C++14)\fP
   std::unary_negate<Predicate> not1(const Predicate& pred);
   template< class Predicate >                                          \fI(since C++14)\fP
   constexpr std::unary_negate<Predicate> not1(const Predicate& pred);

   not1 is a helper function to create a function object that returns the complement of
   the unary predicate function passed. The function object created is of type
   std::unary_negate<Predicate>.

   The unary predicate type must define a member type, argument_type, that is
   convertible to the predicate's parameter type. The unary function objects obtained
   from std::ref, std::cref, std::negate, std::logical_not, std::mem_fn, std::function,
   std::hash, or from another call to std::not1 have this type defined, as are function
   objects derived from the deprecated std::unary_function.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 Example
     • 5 See also

.SH Parameters

   pred - unary predicate

.SH Return value

   std::not1 returns an object of type std::unary_negate<Predicate>, constructed with
   pred.

.SH Exceptions

   None.

.SH Example

   
// Run this code

 #include <algorithm>
 #include <functional>
 #include <iostream>
 #include <vector>
  
 struct LessThan7 : std::unary_function<int, bool>
 {
     bool operator()(int i) const { return i < 7; }
 };
  
 int main()
 {
     std::vector<int> v;
     for (int i = 0; i < 10; ++i) {
         v.push_back(i);
     }
  
     std::cout << std::count_if(v.begin(), v.end(), std::not1(LessThan7())) << "\\n";
  
     //same as above, but use a lambda function
     std::function<int(int)> less_than_9 = [](int x){ return x < 9; };
     std::cout << std::count_if(v.begin(), v.end(), std::not1(less_than_9)) << "\\n";
 }

.SH Output:

 3

.SH See also

                  wrapper function object returning the complement of the unary
   unary_negate   predicate it holds
                  \fI(class template)\fP
   function       wraps callable object of any type with specified function call
   \fI(C++11)\fP        signature
                  \fI(class template)\fP
   not2           constructs custom std::binary_negate object
                  \fI(function template)\fP
   ptr_fun        creates an adaptor-compatible function object wrapper from a pointer
   \fB(deprecated)\fP   to function
                  \fI(function template)\fP
   unary_function adaptor-compatible unary function base class
   \fB(deprecated)\fP   \fI(class template)\fP
