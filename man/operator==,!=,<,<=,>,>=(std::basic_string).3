.TH operator==,!=,<,<=,>,>=(std::basic_string) 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Compare two basic_string objects
   template< class CharT, class traits, class Alloc >

   bool operator==( const basic_string<CharT,Traits,Alloc>& lhs,                  \fB(1)\fP

                    const basic_string<CharT,Traits,Alloc>& rhs );
   template< class CharT, class traits, class Alloc >

   bool operator!=( const basic_string<CharT,Traits,Alloc>& lhs,                  \fB(2)\fP

                    const basic_string<CharT,Traits,Alloc>& rhs );
   template< class CharT, class traits, class Alloc >

   bool operator<( const basic_string<CharT,Traits,Alloc>& lhs,                   \fB(3)\fP

                   const basic_string<CharT,Traits,Alloc>& rhs );
   template< class CharT, class traits, class Alloc >

   bool operator<=( const basic_string<CharT,Traits,Alloc>& lhs,                  \fB(4)\fP

                    const basic_string<CharT,Traits,Alloc>& rhs );
   template< class CharT, class traits, class Alloc >

   bool operator>( const basic_string<CharT,Traits,Alloc>& lhs,                   \fB(5)\fP

                   const basic_string<CharT,Traits,Alloc>& rhs );
   template< class CharT, class traits, class Alloc >

   bool operator>=( const basic_string<CharT,Traits,Alloc>& lhs,                  \fB(6)\fP

                    const basic_string<CharT,Traits,Alloc>& rhs );
   Compare a basic_string object and null-terminated array of T
   template< class CharT, class traits, class Alloc >
   bool operator==( const CharT* lhs, const basic_string<CharT,Traits,Alloc>& rhs \fB(7)\fP
   );
   template< class CharT, class traits, class Alloc >
   bool operator==( const basic_string<CharT,Traits,Alloc>& lhs, const CharT* rhs \fB(7)\fP
   );
   template< class CharT, class traits, class Alloc >
   bool operator!=( const CharT* lhs, const basic_string<CharT,Traits,Alloc>& rhs \fB(8)\fP
   );
   template< class CharT, class traits, class Alloc >
   bool operator!=( const basic_string<CharT,Traits,Alloc>& lhs, const CharT* rhs \fB(8)\fP
   );
   template< class CharT, class traits, class Alloc >
   bool operator<( const CharT* lhs, const basic_string<CharT,Traits,Alloc>& rhs  \fB(9)\fP
   );
   template< class CharT, class traits, class Alloc >
   bool operator<( const basic_string<CharT,Traits,Alloc>& lhs,  const CharT* rhs \fB(9)\fP
   );
   template< class CharT, class traits, class Alloc >
   bool operator<=( const CharT* lhs, const basic_string<CharT,Traits,Alloc>& rhs \fB(10)\fP
   );
   template< class CharT, class traits, class Alloc >
   bool operator<=( const basic_string<CharT,Traits,Alloc>& lhs, const CharT* rhs \fB(10)\fP
   );
   template< class CharT, class traits, class Alloc >
   bool operator>( const CharT* lhs, const basic_string<CharT,Traits,Alloc>& rhs  \fB(11)\fP
   );
   template< class CharT, class traits, class Alloc >
   bool operator>( const basic_string<CharT,Traits,Alloc>& lhs, const CharT* lhs  \fB(11)\fP
   );
   template< class CharT, class traits, class Alloc >
   bool operator>=( const CharT* lhs, const basic_string<CharT,Traits,Alloc>& rhs \fB(12)\fP
   );
   template< class CharT, class traits, class Alloc >
   bool operator>=( const basic_string<CharT,Traits,Alloc>& lhs, const CharT* rhs \fB(12)\fP
   );

   Compares the contents of a string with another string or a null-terminated array of
   CharT.

   All comparisons are done via the compare() member function (which itself is defined
   in terms of Traits::compare()):

     • Two strings are equal if both the size of lhs and rhs are equal and each
       character in lhs has equivalent character in rhs at the same position.

     • The ordering comparisons are done lexicographically -- the comparison is
       performed by a function equivalent to std::lexicographical_compare.

   1-6) Compares two basic_string objects.
   7-12) Compares a basic_string object and a null-terminated array of CharT.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 Complexity

.SH Parameters

   lhs, rhs - strings whose contents to compare

.SH Return value

   true if the corresponding comparison holds, false otherwise.

.SH Exceptions

   1-6)

   \fI(none)\fP                    \fI(until C++14)\fP
   noexcept specification:  
   noexcept                  \fI(since C++14)\fP
     

   7-12) \fI(none)\fP

.SH Complexity

   Linear in the size of the strings.
