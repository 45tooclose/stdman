.TH std::map::begin,std::map::cbegin 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   iterator begin();
   const_iterator begin() const;
   const_iterator cbegin() const;  \fI(since C++11)\fP

   Returns an iterator to the first element of the container.

   If the container is empty, the returned iterator will be equal to end().

   range-begin-end.svg

.SH Parameters

   \fI(none)\fP

.SH Return value

   Iterator to the first element

.SH Exceptions

   \fI(none)\fP                  \fI(until C++11)\fP
   noexcept specification: \fI(since C++11)\fP
   noexcept

.SH Complexity

   Constant

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   end  returns an iterator to the end
   cend \fI(public member function)\fP

.SH Example

   
// Run this code

 #include <map>
 #include <string>
 #include <iostream>
 #include <iterator>

 int main() {
   std::map<std::string,std::string> a_map;
   a_map["Geely"]    = "Chinese";
   a_map["Peugeot"]  = "French";
   a_map["Mercedes"] = "German";
   a_map["Toyota"]   = "Japanese";
   a_map["Ford"]     = "American";
   a_map["Fiat"]     = "Italian";

   for (auto it = a_map.cbegin(); it != std::next(a_map.cbegin(), 3); ++it) {
     std::cout << it->first << " : " << it->second << '\\n';
   }
 }

.SH Output:

 Fiat : Italian
 Ford : American
 Geely : Chinese

   Categories:

     * unconditionally noexcept
     * Todo no example
