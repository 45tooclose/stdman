.TH std::search 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::search \- std::search

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt1, class ForwardIt2 >

   ForwardIt1 search( ForwardIt1 first, ForwardIt1 last,                          \fB(1)\fP

                      ForwardIt2 s_first, ForwardIt2 s_last );
   template< class ForwardIt1, class ForwardIt2, class BinaryPredicate >

   ForwardIt1 search( ForwardIt1 first, ForwardIt1 last,                          \fB(2)\fP

                      ForwardIt2 s_first, ForwardIt2 s_last, BinaryPredicate p );

   Searches for the first occurrence of the subsequence of elements [s_first, s_last)
   in the range [first, last - (s_last - s_first)). The first version uses operator==
   to compare the elements, the second version uses the given binary predicate p.

.SH Parameters

   first, last     - the range of elements to examine
   s_first, s_last - the range of elements to search for
                     binary predicate which returns true if the elements should be
                     treated as equal.

                     The signature of the predicate function should be equivalent to
                     the following:

                      bool pred(const Type1 &a, const Type2 &b);
   p               -
                     The signature does not need to have const &, but the function must
                     not modify the objects passed to it.
                     The types Type1 and Type2 must be such that objects of types
                     ForwardIt1 and ForwardIt2 can be dereferenced and then implicitly
                     converted to Type1 and Type2 respectively.

                     
.SH Type requirements
   -
   ForwardIt1, ForwardIt2 must meet the requirements of ForwardIterator.

.SH Return value

   Iterator to the beginning of first subsequence [s_first, s_last) in the range
   [first, last - (s_last - s_first)). If no such subsequence is found, last is
   returned.
   If [s_first, s_last) is empty, first is returned. \fI(since C++11)\fP

.SH Complexity

   At most S*N comparisons where S = std::distance(s_first, s_last) and N =
   std::distance(first, last).

.SH Possible implementation

.SH First version
   template<class ForwardIt1, class ForwardIt2>
   ForwardIt1 search(ForwardIt1 first, ForwardIt1 last,
                           ForwardIt2 s_first, ForwardIt2 s_last)
   {
       for (; ; ++first) {
           ForwardIt1 it = first;
           for (ForwardIt2 s_it = s_first; ; ++it, ++s_it) {
               if (s_it == s_last) {
                   return first;
               }
               if (it == last) {
                   return last;
               }
               if (!(*it == *s_it)) {
                   break;
               }
           }
       }
   }
.SH Second version
   template<class ForwardIt1, class ForwardIt2, class BinaryPredicate>
   ForwardIt1 search(ForwardIt1 first, ForwardIt1 last,
                           ForwardIt2 s_first, ForwardIt2 s_last,
                           BinaryPredicate p)
   {
       for (; ; ++first) {
           ForwardIt1 it = first;
           for (ForwardIt2 s_it = s_first; ; ++it, ++s_it) {
               if (s_it == s_last) {
                   return first;
               }
               if (it == last) {
                   return last;
               }
               if (!p(*it, *s_it)) {
                   break;
               }
           }
       }
   }

.SH Example

   
// Run this code

 #include <string>
 #include <algorithm>
 #include <iostream>
 #include <vector>
  
 template<typename Container>
 bool in_quote(const Container& cont, const std::string& s)
 {
     return std::search(cont.begin(), cont.end(), s.begin(), s.end()) != cont.end();
 }
  
 int main()
 {
     std::string str = "why waste time learning, when ignorance is instantaneous?";
     // str.find() can be used as well
     std::cout << std::boolalpha << in_quote(str, "learning") << '\\n'
                                 << in_quote(str, "lemming")  << '\\n';
  
     std::vector<char> vec(str.begin(), str.end());
     std::cout << std::boolalpha << in_quote(vec, "learning") << '\\n'
                                 << in_quote(vec, "lemming")  << '\\n';
 }

.SH Output:

 true
 false
 true
 false

.SH See also

                                       finds the last sequence of elements in a certain
   find_end                            range
                                       \fI(function template)\fP 
   includes                            returns true if one set is a subset of another
                                       \fI(function template)\fP 
   equal                               determines if two sets of elements are the same
                                       \fI(function template)\fP 
   find                                finds the first element satisfying specific
   find_if                             criteria
   find_if_not                         \fI(function template)\fP 
   \fI(C++11)\fP
                                       returns true if one range is lexicographically
   lexicographical_compare             less than another
                                       \fI(function template)\fP 
   mismatch                            finds the first position where two ranges differ
                                       \fI(function template)\fP 
                                       searches for a number consecutive copies of an
   search_n                            element in a range
                                       \fI(function template)\fP 
   std::experimental::search           applies a searcher to a sequence
   (library fundamentals TS)           \fI(function template)\fP
   std::experimental::parallel::search parallelized version of std::search
   (parallelism TS)                    \fI(function template)\fP 
