.TH std::common_type(std::chrono::duration) 3 "Nov 16 2016" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::common_type(std::chrono::duration) \- std::common_type(std::chrono::duration)

.SH Synopsis
   template <class Rep1, class Period1, class Rep2, class Period2>

   struct common_type<std::chrono::duration<Rep1, Period1>,
   std::chrono::duration<Rep2, Period2>> {                           \fI(since C++11)\fP
   typedef std::chrono::duration<
   typename std::common_type<Rep1, Rep2>::type, /*see note*/> type;

   };

   Exposes the type named type, which is the common type of two std::chrono::durations.

.SH Note

   The period of the resulting duration is the greatest common divisor of Period1 and
   Period2.

   std::common_type<> is specialized for std::chrono::duration.

.SH Example

   
// Run this code

 #include <iostream>
 #include <chrono>

 // std::chrono already finds the greatest common divisor,
 // likely using std::common_type<>. We make the type
 // deduction externally.

 template <typename T,typename S>
 auto durationDiff(const T& t, const S& s)  -> typename std::common_type<T,S>::type
 {
     typedef typename std::common_type<T,S>::type Common;
     return Common(t) - Common(s);
 }


 int main()
 {
     typedef std::chrono::milliseconds milliseconds;
     typedef std::chrono::microseconds microseconds;

     auto ms = milliseconds(30);
     auto us = microseconds(1100);

     std::cout << ms.count() << "ms - " << us.count() << "us = "
               << durationDiff(ms,us).count() <<  "\\n";
 }

.SH Output:

 30ms - 1100us = 28900

.SH See also

   common_type deduces the result type of a mixed-mode arithmetic expression
   \fI(C++11)\fP     \fI(class template)\fP
