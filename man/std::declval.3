.TH std::declval 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::declval \- std::declval

.SH Synopsis
   Defined in header <utility>
   template< class T >                                     \fI(since C++11)\fP
   typename std::add_rvalue_reference<T>::type declval();

   Converts any type T to a reference type, making it possible to use member functions
   in decltype expressions without the need to go through constructors.

   declval is commonly used in templates where acceptable template parameters may have
   no constructor in common, but have the same member function whose return type is
   needed. Note that because no definition exists for declval, it can only be used in
   unevaluated contexts; it is an error to evaluate an expression that contains this
   function.

.SH Parameters

   \fI(none)\fP

.SH Return value

   Cannot be called and thus never returns a value. The return type is T&& unless T is
   (possibly cv-qualified) void, in which case the return type is T.

.SH Exceptions

   noexcept specification:  
   noexcept
     

.SH Example

   
// Run this code

 #include <utility>
 #include <iostream>
  
 struct Default {
     int foo() const {return 1;}
 };
  
 struct NonDefault {
     NonDefault(const NonDefault&) {}
     int foo() const {return 1;}
 };
  
 int main()
 {
     decltype(Default().foo()) n1 = 1; // int n1
 //  decltype(NonDefault().foo()) n2 = n1; // will not compile
     decltype(std::declval<NonDefault>().foo()) n2 = n1; // int n2
     std::cout << "n2 = " << n2 << '\\n';
 }

.SH Output:

 n2 = 1

.SH See also

   decltype specifier defines a type equivalent to the type of an expression \fI(C++11)\fP
                      
   result_of          deduces the return type of a function call expression
   \fI(C++11)\fP            \fI(class template)\fP 

.SH Category:

     * unconditionally noexcept
