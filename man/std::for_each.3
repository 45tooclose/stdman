.TH std::for_each 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::for_each \- std::for_each

.SH Synopsis
   Defined in header <algorithm>
   template< class InputIt, class UnaryFunction >
   UnaryFunction for_each( InputIt first, InputIt last, UnaryFunction f );

   Applies the given function object f to the result of dereferencing every iterator in
   the range [first, last), in order.

   If InputIt is a mutable iterator, f may modify the elements of the range through the
   dereferenced iterator. If f returns a result, the result is ignored.

.SH Parameters

   first, last             -             the range to apply the function to
   f                       -             the unary function object to be applied
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   UnaryFunction must meet the requirements of MoveConstructible. Does not have to be
   CopyConstructible

.SH Return value

   f            \fI(until C++11)\fP
   std::move(f) \fI(since C++11)\fP

.SH Complexity

   Exactly last - first applications of f

.SH Possible implementation

   template<class InputIt, class UnaryFunction>
   UnaryFunction for_each(InputIt first, InputIt last, UnaryFunction f)
   {
       for (; first != last; ++first) {
           f(*first);
       }
       return f;
   }

.SH Example

   The following example uses a lambda function to increment all of the elements of a
   vector and then uses an overloaded operator() in a functor to compute their sum:

   
// Run this code

 #include <vector>
 #include <algorithm>
 #include <iostream>
  
 struct Sum {
     Sum() { sum = 0; }
     void operator()(int n) { sum += n; }
  
     int sum;
 };
  
 int main()
 {
     std::vector<int> nums{3, 4, 2, 9, 15, 267};
  
     std::cout << "before: ";
     for (auto n : nums) {
         std::cout << n << " ";
     }
     std::cout << '\\n';
  
     std::for_each(nums.begin(), nums.end(), [](int &n){ n++; });
  
     // Calls Sum::operator() for each number
     Sum s = std::for_each(nums.begin(), nums.end(), Sum());
  
     std::cout << "after:  ";
     for (auto n : nums) {
         std::cout << n << " ";
     }
     std::cout << '\\n';
     std::cout << "sum: " << s.sum << '\\n';
 }

.SH Output:

 before: 3 4 2 9 15 267
 after:  4 5 3 10 16 268
 sum: 306

.SH See also

   transform      applies a function to a range of elements
                  \fI(function template)\fP 
   range-for loop executes loop over range \fI(since C++11)\fP 
