.TH std::uninitialized_copy_n 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::uninitialized_copy_n \- std::uninitialized_copy_n

.SH Synopsis
   Defined in header <memory>
   template< class InputIt, class Size, class ForwardIt >
   ForwardIt uninitialized_copy_n( InputIt first, Size count, ForwardIt   \fI(since C++11)\fP
   d_first);

   Copies count elements from a range beginning at first to an uninitialized memory
   area beginning at d_first. The elements in the uninitialized area are constructed
   using copy constructor.

   If an exception is thrown during the initialization, the function has no effects.

    This section is incomplete
    Reason: update possible implementation to reflect this

.SH Parameters

   first   - the beginning of the range of the elements to copy
   d_first - the beginning of the destination range
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   Iterator to the element past the last element copied.

.SH Complexity

   Linear in count.

.SH Possible implementation

   template<class InputIt, class Size, class ForwardIt>
   ForwardIt uninitialized_copy_n(InputIt first, Size count, ForwardIt d_first)
   {
       typedef typename std::iterator_traits<ForwardIt>::value_type Value;
       for (; count > 0; ++first, ++d_first, --count) {
           ::new (static_cast<void*>(&*d_first)) Value(*first);
       }
       return d_first;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <memory>
 #include <string>
 #include <tuple>
  
 int main()
 {
     std::vector<std::string> v = {"This", "is", "an", "example"};
  
     std::string* p;
     std::size_t sz;
     std::tie(p, sz)  = std::get_temporary_buffer<std::string>(v.size());
     sz = std::min(sz, v.size());
  
     std::uninitialized_copy_n(v.begin(), sz, p);
  
     for (std::string* i = p; i != p+sz; ++i) {
         std::cout << *i << ' ';
         i->~basic_string<char>();
     }
     std::return_temporary_buffer(p);
 }

.SH Output:

 This is an example

.SH See also

   uninitialized_copy copies a range of objects to an uninitialized area of memory
                      \fI(function template)\fP 

.SH Category:

     * Todo with reason
