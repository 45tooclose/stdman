.TH std::uninitialized_copy_n 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <memory>
   template< class InputIt, class Size, class ForwardIt >
   ForwardIt uninitialized_copy_n( InputIt first, Size count, ForwardIt   \fI(since C++11)\fP
   d_first);

   Copies count elements from a range beginning at first to an uninitialized memory
   area beginning at d_first as if by

 for ( ; n > 0; ++d_first, ++first, --n)
    ::new (static_cast<void*>(std::addressof(*d_first)))
       typename iterator_traits<ForwardIterator>::value_type(*first);

   If an exception is thrown during the initialization, the function has no effects.

.SH Parameters

   first   - the beginning of the range of the elements to copy
   d_first - the beginning of the destination range
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   Iterator to the element past the last element copied.

.SH Complexity

   Linear in count.

.SH Possible implementation

   template<class InputIt, class Size, class ForwardIt>
   ForwardIt uninitialized_copy_n(InputIt first, Size count, ForwardIt d_first)
   {
       typedef typename std::iterator_traits<ForwardIt>::value_type Value;
       ForwardIt current = d_first;
       try {
           for (; count > 0; ++first, ++current, --count) {
               ::new (static_cast<void*>(std::addressof(*current))) Value(*first);
           }
       } catch (...) {
           for (; d_first != current; ++d_first) {
               d_first->~Value();
           }
           throw;
       }
       return current;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>
 #include <memory>
 #include <string>
 #include <tuple>
 #include <vector>

 int main()
 {
     std::vector<std::string> v = {"This", "is", "an", "example"};

     std::string* p;
     std::size_t sz;
     std::tie(p, sz)  = std::get_temporary_buffer<std::string>(v.size());
     sz = std::min(sz, v.size());

     std::uninitialized_copy_n(v.begin(), sz, p);

     for (std::string* i = p; i != p+sz; ++i) {
         std::cout << *i << ' ';
         i->~basic_string<char>();
     }
     std::return_temporary_buffer(p);
 }

.SH Output:

 This is an example

.SH See also

                                                     copies a range of objects to an
   uninitialized_copy                                uninitialized area of memory
                                                     \fI(function template)\fP
   std::experimental::parallel::uninitialized_copy_n parallelized version of
   (parallelism TS)                                  std::uninitialized_copy_n
                                                     \fI(function template)\fP
