.TH std::list::erase 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   iterator erase( iterator pos );                          \fI(until C++11)\fP
   iterator erase( const_iterator pos );                    \fI(since C++11)\fP
   iterator erase( iterator first, iterator last ); \fB(1)\fP                   \fI(until C++11)\fP
   iterator erase( const_iterator first,                \fB(2)\fP               \fI(since C++11)\fP
   const_iterator last );

   Removes specified elements from the container.

   1) Removes the element at pos.
   2) Removes the elements in the range [first; last).

   References and iterators to the erased elements are invalidated. Other references
   and iterators are not affected.

   The iterator pos must be valid and dereferenceable. Thus the end() iterator (which
   is valid, but is not dereferencable) cannot be used as a value for pos.

.SH Parameters

   pos         - iterator to the element to remove
   first, last - range of elements to remove

.SH Return value

   Iterator following the last removed element.

.SH Example

   
// Run this code

 #include <list>
 #include <iostream>
 #include <iterator>
  
 int main( )
 {
     std::list<int> c{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
     for (auto &i : c) {
         std::cout << i << " ";
     }
     std::cout << '\\n';
  
     c.erase(c.begin());
  
     for (auto &i : c) {
         std::cout << i << " ";
     }
     std::cout << '\\n';
  
     std::list<int>::iterator range_begin = c.begin();
     std::list<int>::iterator range_end = c.begin();
     std::advance(range_begin,2);
     std::advance(range_end,5);
  
     c.erase(range_begin, range_end);
  
     for (auto &i : c) {
         std::cout << i << " ";
     }
     std::cout << '\\n';
 }

.SH Output:

 0 1 2 3 4 5 6 7 8 9
 1 2 3 4 5 6 7 8 9
 1 2 6 7 8 9

.SH Complexity

   1) Constant.
   2) Linear in the distance between first and last.

.SH See also

   clear clears the contents
         \fI(public member function)\fP 
