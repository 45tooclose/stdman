.TH std::accumulate 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <numeric>
   template< class InputIt, class T >                        \fB(1)\fP
   T accumulate( InputIt first, InputIt last, T init );
   template< class InputIt, class T, class BinaryOperation >

   T accumulate( InputIt first, InputIt last, T init,        \fB(2)\fP

   BinaryOperation op );

   Computes the sum of the given value init and the elements in the range [first,
   last). The first version uses operator+ to sum up the elements, the second version
   uses the given binary function op.

   op must not have side effects.                                         \fI(until C++11)\fP
   op must not invalidate any iterators, including the end iterators, or  \fI(since C++11)\fP
   modify any elements of the range involved.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Possible implementation
     * 4 Example
     * 5 See also

.SH Parameters

   first, last - the range of elements to sum
   init        - initial value of the sum
                 binary operation function object that will be applied.

                 The signature of the function should be equivalent to the following:

                 Ret fun(const Type1 &a, const Type2 &b);
   op          -
                 The signature does not need to have const &.
                 The type Type1 must be such that an object of type T can be implicitly
                 converted to Type1. The type Type2 must be such that an object of type
                 InputIt can be dereferenced and then implicitly converted to Type2.
                 The type Ret must be such that an object of type T can be assigned a
                 value of type Ret. 
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.
   -
   T must meet the requirements of CopyAssignable and CopyConstructible.

.SH Return value

   The sum of the given value and elements in the given range.

.SH Possible implementation

.SH First version
   template<class InputIt, class T>
   T accumulate(InputIt first, InputIt last, T init)
   {
       for (; first != last; ++first) {
           init = init + *first;
       }
       return init;
   }
.SH Second version
   template<class InputIt, class T, class BinaryOperation>
   T accumulate(InputIt first, InputIt last, T init,
                BinaryOperation op)
   {
       for (; first != last; ++first) {
           init = op(init, *first);
       }
       return init;
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <vector>
 #include <numeric>
 #include <string>

 int multiply(int x, int y)
 {
     return x*y;
 }

 std::string magic_function(std::string res, int x)
 {
     return res += (x > 5) ? "b" : "s";
 }

 int main()
 {
     std::vector<int> v{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

     int sum = std::accumulate(v.begin(), v.end(), 0);
     int product = std::accumulate(v.begin(), v.end(), 1, multiply);
     std::string magic = std::accumulate(v.begin(), v.end(), std::string(),
                                         magic_function);

     std::cout << sum << '\\n'
               << product << '\\n'
               << magic << '\\n';
 }

.SH Output:

 55
 3628800
 sssssbbbbb

.SH See also

   adjacent_difference computes the differences between adjacent elements in a range
                       \fI(function template)\fP
   inner_product       computes the inner product of two ranges of elements
                       \fI(function template)\fP
   partial_sum         computes the partial sum of a range of elements
                       \fI(function template)\fP
