.TH std::reverse_copy 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class BidirIt, class OutputIt >
   OutputIt reverse_copy( BidirIt first, BidirIt last, OutputIt d_first );

   Copies the elements from the range [first, last) to another range beginning at
   d_first in such a way that the elements in the new range are in reverse order.

   Behaves as if by executing the assignment *(d_first + (last - first) - 1 - i) =
   *(first + i) once for each non-negative i < (last - first)

   If the source and destination ranges (that is, [first, last) and [d_first,
   d_first+(last-first)) respectively) overlap, the behavior is undefined.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Possible implementation
     * 4 Example
     * 5 Complexity
     * 6 See also

.SH Parameters

   first, last    -    the range of elements to copy
   d_first        -    the beginning of the destination range
.SH Type requirements
   -
   BidirIt must meet the requirements of BidirectionalIterator.
   -
   OutputIt must meet the requirements of OutputIterator.

.SH Return value

   Output iterator to the element past the last element copied.

.SH Possible implementation

   template<class BidirIt, class OutputIt>
   OutputIt reverse_copy(BidirIt first, BidirIt last, OutputIt d_first)
   {
       while (first != last) {
           *(d_first++) = *(--last);
       }
       return d_first;
   }

.SH Example

   
// Run this code

 #include <vector>
 #include <iostream>
 #include <algorithm>

 int main()
 {
     std::vector<int> v({1,2,3});
     for (const auto& value : v) {
         std::cout << value << " ";
     }
     std::cout << '\\n';

     std::vector<int> destiny(3);
     std::reverse_copy(std::begin(v), std::end(v), std::begin(destiny));
     for (const auto& value : destiny) {
         std::cout << value << " ";
     }
     std::cout << '\\n';
 }

.SH Output:

 1 2 3
 3 2 1

.SH Complexity

   Linear in the distance between first and last

.SH See also

   reverse reverses the order elements in a range
           \fI(function template)\fP
