.TH std::is_array 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct is_array;

   Checks whether T is an array type. Provides the member constant value which is equal
   to true, if T is an array type . Otherwise, value is equal to false.

.SH Contents

     • 1 Template parameters
     • 2 Inherited from
       std::integral_constant

          • 2.1 Member constants
          • 2.2 Member functions
          • 2.3 Member types
          • 2.4 Possible implementation
          • 2.5 Example
          • 2.6 See also

.SH Template parameters

   T - a type to check

Inherited from std::integral_constant

.SH Member constants

   value    true if T is an array type , false otherwise
   \fB[static]\fP \fI(public static member constant)\fP

.SH Member functions

   operator bool converts the object to bool, returns value
                 \fI(public member function)\fP

.SH Member types

   Type       Definition
   value_type bool
   type       std::integral_constant<bool, value>

.SH Possible implementation

   template<class T>
   struct is_array : std::false_type {};

   template<class T>
   struct is_array<T[]> : std::true_type {};

   template<class T, std::size_t N>
   struct is_array<T[N]> : std::true_type {};

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 class A {};

 int main()
 {
     std::cout << std::boolalpha;
     std::cout << std::is_array<A>::value << '\\n';
     std::cout << std::is_array<A[3]>::value << '\\n';
     std::cout << std::is_array<float>::value << '\\n';
     std::cout << std::is_array<int>::value << '\\n';
     std::cout << std::is_array<int[3]>::value << '\\n';
 }

.SH Output:

 false
 true
 false
 false
 true

.SH See also

   rank               obtains the number of dimensions of an array type
   \fI(C++11)\fP            \fI(class template)\fP
   extent             obtains the size of an array type along a specified dimension
   \fI(C++11)\fP            \fI(class template)\fP
   remove_extent      removes one extent from the given array type
   \fI(C++11)\fP            \fI(class template)\fP
   remove_all_extents removes all extents from the given array type
   \fI(C++11)\fP            \fI(class template)\fP
