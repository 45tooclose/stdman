.TH std::unique 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::unique \- std::unique

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt >                                             \fB(1)\fP
   ForwardIt unique( ForwardIt first, ForwardIt last );
   template< class ForwardIt, class BinaryPredicate >                      \fB(2)\fP
   ForwardIt unique( ForwardIt first, ForwardIt last, BinaryPredicate p );

   Removes all consecutive duplicate elements from the range [first, last) and returns
   a past-the-end iterator for the new logical end of the range. The first version uses
   operator== to compare the elements, the second version uses the given binary
   predicate p.

   Removing is done by shifting the elements in the range in such a way that elements
   to be erased are overwritten. Relative order of the elements that remain is
   preserved and the physical size of the container is unchanged. Iterators pointing to
   an element between the new logical end and the physical end of the range are still
   dereferenceable, but the elements themselves have unspecified values. A call to
   unique is typically followed by a call to a container's erase method, which erases
   the unspecified values and reduces the physical size of the container to match its
   new logical size.

.SH Parameters

   first, last - the range of elements to process
                 binary predicate which returns true if the elements should be treated
                 as equal.

                 The signature of the predicate function should be equivalent to the
                 following:

                  bool pred(const Type1 &a, const Type2 &b);
   p           -
                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type
                 ForwardIt can be dereferenced and then implicitly converted to both of
                 them.

                 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.
   -
   The type of dereferenced ForwardIt must meet the requirements of MoveAssignable.

.SH Return value

   Forward iterator to the new end of the range

.SH Complexity

   For nonempty ranges, exactly std::distance(first,last) -1 applications of the
   corresponding predicate.

.SH Possible implementation

.SH First version
   template<class ForwardIt>
   ForwardIt unique(ForwardIt first, ForwardIt last)
   {
       if (first == last)
           return last;
    
       ForwardIt result = first;
       while (++first != last) {
           if (!(*result == *first) && ++result != first) {
               *result = std::move(*first);
           }
       }
       return ++result;
   }
.SH Second version
   template<class ForwardIt, class BinaryPredicate>
   ForwardIt unique(ForwardIt first, ForwardIt last, BinaryPredicate p)
   {
       if (first == last)
           return last;
    
       ForwardIt result = first;
       while (++first != last) {
           if (!p(*result, *first) && ++result != first) {
               *result = std::move(*first);
           }
       }
       return ++result;
   }

.SH Examples

   The following code removes all consecutive equivalent elements from a vector of
   integers.

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <vector>
  
 int main()
 {
     std::vector<int> v{1, 2, 2, 2, 3, 3, 2, 2, 1};
     std::vector<int>::iterator last;
  
     last = std::unique(v.begin(), v.end()); // 1 2 3 2 1 3 2 2 1
                                             //           ^
     for (std::vector<int>::iterator it = v.begin(); it != last; ++it) {
         std::cout << *it << " ";
     }
     std::cout << "\\n";
 }

.SH Output:

 1 2 3 2 1

   The following code removes all duplicate elements from a vector of integers.

   
// Run this code

 #include <iostream>
 #include <algorithm>
 #include <vector>
  
 int main()
 {
     std::vector<int> v{1,2,3,1,2,3,3,4,5,4,5,6,7};
     std::sort(v.begin(), v.end());
     auto last = std::unique(v.begin(), v.end());
     v.erase(last, v.end());
     for (const auto& i : v)
       std::cout << i << " ";
     std::cout << "\\n";
 }

.SH Output:

 1 2 3 4 5 6 7

.SH See also

                                       finds the first two adjacent items that are
   adjacent_find                       equal (or satisfy a given predicate)
                                       \fI(function template)\fP 
                                       creates a copy of some range of elements that
   unique_copy                         contains no consecutive duplicates
                                       \fI(function template)\fP 
   remove                              removes elements satisfying specific criteria
   remove_if                           \fI(function template)\fP 
   unique                              removes consecutive duplicate elements
                                       \fI(public member function of std::list)\fP 
   std::experimental::parallel::unique parallelized version of std::unique
   (parallelism TS)                    \fI(function template)\fP 
