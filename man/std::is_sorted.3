.TH std::is_sorted 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt >                                      \fB(1)\fP \fI(since C++11)\fP
   bool is_sorted( ForwardIt first, ForwardIt last );
   template< class ForwardIt, class Compare >                       \fB(2)\fP \fI(since C++11)\fP
   bool is_sorted( ForwardIt first, ForwardIt last, Compare comp );

   Checks if the elements in range [first, last) are sorted in ascending order. The
   first version of the function uses operator< to compare the elements, the second
   uses the given comparison function comp.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Complexity
     * 4 Possible implementation
     * 5 Example
     * 6 See also

.SH Parameters

   first, last - the range of elements to examine
                 comparison function object (i.e. an object that satisfies the
                 requirements of Compare) which returns true if the first argument is
                 less (i.e. is ordered before) the second element.

                 The signature of the comparison function should be equivalent to the
                 following:
   comp        -
                 bool cmp(const Type1 &a, const Type2 &b);

                 The signature does not need to have const &, but the function object
                 must not modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type
                 ForwardIt can be dereferenced and then implicitly converted to both of
                 them. 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   true if the elements in the range are sorted in ascending order

.SH Complexity

   linear in the distance between first and last

.SH Possible implementation

.SH First version
   template<class ForwardIt>
   bool is_sorted(ForwardIt first, ForwardIt last)
   {
       return std::is_sorted_until(first, last) == last;
   }
.SH Second version
   template<class ForwardIt, class Compare>
   bool is_sorted(ForwardIt first, ForwardIt last, Compare comp)
   {
       return std::is_sorted_until(first, last, comp) == last;
   }

.SH Example

   
// Run this code

 #include <iostream>
 #include <algorithm>

 int main()
 {
     const int N = 5;
     int digits[N] = {3, 1, 4, 1, 5};

     for (auto i : digits) std::cout << i << ' ';
     std::cout << ": is_sorted: " << std::is_sorted(digits, digits+N) << '\\n';

     std::sort(digits, digits+N);

     for (auto i : digits) std::cout << i << ' ';
     std::cout << ": is_sorted: " << std::is_sorted(digits, digits+N) << '\\n';
 }

.SH Output:

 3 1 4 1 5 : is_sorted: 0
 1 1 3 4 5 : is_sorted: 1

.SH See also

   is_sorted_until finds the largest sorted subrange
   \fI(C++11)\fP         \fI(function template)\fP
