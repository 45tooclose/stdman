.TH std::regex_constants::syntax_option_type 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <regex>
   typedef /*unspecified*/ syntax_option_type;

   constexpr syntax_option_type icase = /*unspecified*/;
   constexpr syntax_option_type nosubs = /*unspecified*/;
   constexpr syntax_option_type optimize = /*unspecified*/;
   constexpr syntax_option_type collate = /*unspecified*/;
   constexpr syntax_option_type ECMAScript = /*unspecified*/;
   constexpr syntax_option_type basic = /*unspecified*/;
   constexpr syntax_option_type extended = /*unspecified*/;
   constexpr syntax_option_type awk = /*unspecified*/;
   constexpr syntax_option_type grep = /*unspecified*/;

   constexpr syntax_option_type egrep = /*unspecified*/;

   The syntax_option_type is a BitmaskType that contains options that govern how
   regular expressions behave.

   The possible values for this type (icase, optimize, etc.) are duplicated inside
   std::basic_regex.

.SH Contents

     • 1 Constants
     • 2 Notes
     • 3 Example
     • 4 See also

.SH Constants

   Value      Effect(s)
   icase      Character matching should be performed without regard to case.
   nosubs     When performing matches, no sub-expression matches should be stored in
              the supplied std::regex_match structure.
              Instructs the regular expression engine to make matching faster, with the
   optimize   potential cost of making construction slower. For example, this might
              mean converting a non-deterministic FSA to a deterministic FSA.
   collate    Character ranges of the form "[a-b]" will be locale sensitive.
   ECMAScript Use the Modified ECMAScript regular expression grammar
   basic      Use the basic POSIX regular expression grammar (grammar documentation).
   extended   Use the extended POSIX regular expression grammar (grammar
              documentation).
   awk        Use the regular expression grammar used by the awk utility in POSIX
              (grammar documentation)
              Use the regular expression grammar used by the grep utility in POSIX.
   grep       This is effectively the same as the basic option with the addition of
              newline '\\n' as an alternation separator.
              Use the regular expression grammar used by the grep utility, with the -E
   egrep      option, in POSIX. This is effectively the same as the extended option
              with the addition of newline '\\n' as an alternation separator in addtion
              to '|'.

.SH Notes

   Because POSIX uses "leftmost longest" matching rule (the longest matching
   subsequence is matched, and if there are several such subsequences, the first one is
   matched), it is not suitable, for example, for parsing markup languages: a POSIX
   regex such as "<tag[^>]*>.*</tag>" would match everything from the first "<tag" to
   the last "</tag>", including every "</tag>" and "<tag>" inbetween. On the other
   hand, ECMAScript supports non-greedy matches, and the ECMAScript regex
   "<tag[^>]*>.*?</tag>" would match only until the first closing tag.

   In C++11, these constants were specified with redundant keyword static, which was
   removed by C++14 via LWG issue 2053

.SH Example

   Illustrates the difference in the matching algorithm between ECMAScript and POSIX
   regular expressions

   
// Run this code

 #include <iostream>
 #include <string>
 #include <regex>

 int main()
 {
     std::string str = "zzxayyzz";
     std::regex re1(".*(a|xayy)"); // ECMA
     std::regex re2(".*(a|xayy)", std::regex::extended); // POSIX

     std::cout << "Searching for .*(a|xayy) in zzxayyzz:\\n";
     std::smatch m;
     std::regex_search(str, m, re1);
     std::cout << " ECMA (depth first search) match: " << m[0] << '\\n';
     std::regex_search(str, m, re2);
     std::cout << " POSIX (leftmost longest)  match: " << m[0] << '\\n';
 }

.SH Output:

 Searching for .*(a|xayy) in zzxayyzz:
  ECMA (depth first search) match: zzxa
  POSIX (leftmost longest)  match: zzxayy

.SH See also

   basic_regex regular expression object
   \fI(C++11)\fP     \fI(class template)\fP
