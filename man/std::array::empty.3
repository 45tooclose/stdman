.TH std::array::empty 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   constexpr bool empty();        \fI(since C++11)\fP
                                  \fI(until C++14)\fP
   constexpr bool empty() const;  \fI(since C++14)\fP

   Checks if the container has no elements, i.e. whether begin() == end().

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 Complexity
     * 5 Example
     * 6 See also

.SH Parameters

   \fI(none)\fP

.SH Return value

   true if the container is empty, false otherwise

.SH Exceptions

   noexcept specification:
   noexcept

.SH Complexity

   Constant.

.SH Example

   The following code uses empty to check if a std::array contains any elements:

   
// Run this code

 #include <array>
 #include <iostream>

 int main()
 {
     std::array<int, 4> numbers {3, 1, 4, 1};
     std::array<int, 0> no_numbers;

     std::cout << "numbers.empty(): " << numbers.empty() << '\\n';
     std::cout << "no_numbers.empty(): " << no_numbers.empty() << '\\n';
 }

.SH Output:

 numbers.empty(): 0
 no_numbers.empty(): 1

.SH See also

   size returns the number of elements
        \fI(public member function)\fP
