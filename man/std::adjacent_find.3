.TH std::adjacent_find 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt >                                                    \fB(1)\fP
   ForwardIt adjacent_find( ForwardIt first, ForwardIt last );
   template< class ForwardIt, BinaryPredicate p >                                 \fB(2)\fP
   ForwardIt adjacent_find( ForwardIt first, ForwardIt last, BinaryPredicate p );

   Searches the range [first, last) for two consecutive identical elements. The first
   version uses operator== to compare the elements, the second version uses the given
   binary predicate p.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Complexity
     * 4 Possible implementation
     * 5 Example
     * 6 See also

.SH Parameters

   first, last - the range of elements to examine
                 binary predicate which returns true if the elements should be treated
                 as equal.

                 The signature of the predicate function should be equivalent to the
                 following:

                 bool pred(const Type1 &a, const Type2 &b);
   p           -
                 The signature does not need to have const &, but the function must not
                 modify the objects passed to it.
                 The types Type1 and Type2 must be such that an object of type
                 ForwardIt can be dereferenced and then implicitly converted to both of
                 them.

                 
.SH Type requirements
   -
   ForwardIt must meet the requirements of ForwardIterator.

.SH Return value

   an iterator to the first of the identical elements. If no such elements are found,
   last is returned

.SH Complexity

   Exactly the smaller of (result - first) + 1 and (last - first) - 1 applications of
   the predicate where result is the return value.

.SH Possible implementation

.SH First version
   template<class ForwardIt>
   ForwardIt adjacent_find(ForwardIt first, ForwardIt last)
   {
       if (first == last) {
           return last;
       }
       ForwardIt next = first;
       ++next;
       for (; next != last; ++next, ++first) {
           if (*first == *next) {
               return first;
           }
       }
       return last;
   }
.SH Second version
   template<class ForwardIt, BinaryPredicate p>
   ForwardIt adjacent_find(ForwardIt first, ForwardIt last,
                           BinaryPredicate p)
   {
       if (first == last) {
           return last;
       }
       ForwardIt next = first;
       ++next;
       for (; next != last; ++next, ++first) {
           if (p(*first, *next)) {
               return first;
           }
       }
       return last;
   }

.SH Example

   
// Run this code

 #include <algorithm>
 #include <iostream>

 int main()
 {
     std::vector<int> v1{0, 1, 2, 3, 40, 40, 41, 41, 5};

     auto i1 = std::adjacent_find(v1.begin(), v1.end());

     if (i1 == v1.end()) {
         std::cout << "no matching adjacent elements\\n";
     } else {
         std::cout << "the first adjacent pair of equal elements at: "
                   << std::distance(v1.begin(), i1) << '\\n';
     }

     auto i2 = std::adjacent_find(v1.begin(), v1.end(), std::greater<int>());
     if (i2 == v1.end()) {
         std::cout << "The entire vector is sorted in ascending order\\n";
     } else {
         std::cout << "The last element in the non-decreasing subsequence is at: "
                   << std::distance(v1.begin(), i2) << '\\n';
     }
 }

.SH Output:

 The first adjacent pair of equal elements at: 4
 The last element in the non-decreasing subsequence is at: 7

.SH See also

   unique removes consecutive duplicate elements in a range
          \fI(function template)\fP
