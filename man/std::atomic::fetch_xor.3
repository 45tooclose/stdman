.TH std::atomic::fetch_xor 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic::fetch_xor \- std::atomic::fetch_xor

.SH Synopsis
   T fetch_xor( T arg,
                memory_order =                        \fI(since C++11)\fP
   std::memory_order_seq_cst );                       (member only of atomic<Integral>
   T fetch_xor( T arg,                                template specialization)
                memory_order =
   std::memory_order_seq_cst ) volatile;

   Atomically replaces the current value with the result of bitwise XOR of the value
   and arg. The operation is read-modify-write operation. Memory is affected according
   to the value of memory_order.

.SH Parameters

   arg          - the other argument of bitwise XOR
   memory_order - memory order constraints to enforce

.SH Return value

   The value immediately preceding the effects of this function in the modification
   order of *this.

.SH Exceptions

   noexcept specification:  
   noexcept
     

.SH See also

   atomic_fetch_xor          replaces the atomic object with the result of logical XOR
   atomic_fetch_xor_explicit with a non-atomic argument and obtains the previous value
   \fI(C++11)\fP                   of the atomic
   \fI(C++11)\fP                   \fI(function template)\fP 

.SH Category:

     * unconditionally noexcept
