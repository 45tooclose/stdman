.TH std::thread::join 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   void join();  \fI(since C++11)\fP

   Blocks the current thread until the thread identified by *this finishes its
   execution.

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Preconditions
     * 4 Postconditions
     * 5 Exceptions
     * 6 Error Conditions
     * 7 Example
     * 8 See also
     * 9 References

.SH Parameters

   \fI(none)\fP

.SH Return value

   \fI(none)\fP

.SH Preconditions

   joinable is true

.SH Postconditions

   joinable is false

.SH Exceptions

   std::system_error if an error occurs.

.SH Error Conditions

     * resource_deadlock_would_occur if this->get_id() == std::this_thread::get_id()
       \fI(deadlock detected)\fP
     * no_such_process if the thread is not valid
     * invalid_argument if joinable is false

.SH Example

   
// Run this code

 #include <iostream>
 #include <thread>
 #include <chrono>

 void foo()
 {
     // simulate expensive operation
     std::this_thread::sleep_for(std::chrono::seconds(1));
 }

 void bar()
 {
     // simulate expensive operation
     std::this_thread::sleep_for(std::chrono::seconds(1));
 }

 int main()
 {
     std::cout << "starting first helper...\\n";
     std::thread helper1(foo);

     std::cout << "starting second helper...\\n";
     std::thread helper2(bar);

     std::cout << "waiting for helpers to finish..." << std::endl;
     helper1.join();
     helper2.join();

     std::cout << "done!\\n";
 }

.SH Output:

 starting first helper...
 starting second helper...
 waiting for helpers to finish...
 done!

.SH See also

   detach   permits the thread to execute independently from the thread handle
            \fI(public member function)\fP
            checks whether the thread is joinable, i.e. potentially running in parallel
   joinable context
            \fI(public member function)\fP

.SH References

     * C++11 standard (ISO/IEC 14882:2011):

     * 30.3.1.5 thread members [thread.thread.member]
