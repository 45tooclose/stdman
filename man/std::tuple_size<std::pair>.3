.TH std::tuple_size<std::pair> 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <utility>
   template< class T1, class T2 >         \fI(since C++11)\fP
   struct tuple_size<std::pair<T1, T2>>;

   The partial specialization of std::tuple_size for pairs provides a compile-time way
   to obtain the number of elements in a pair, which is always 2, using tuple-like
   syntax.

     Members
   value    integral constant with value 2
   \fB[static]\fP \fI(public static member constant)\fP

.SH Example

   
// Run this code

 #include <iostream>
 #include <utility>
 #include <tuple>
  
 template<class T>
 void test(T t)
 {
     int a[std::tuple_size<T>::value]; // can be used at compile time
     std::cout << std::tuple_size<T>::value << '\\n'; // or at run time
 }
  
 int main()
 {
     test(std::make_tuple(1, 2, 3.14));
     test(std::make_pair(1, 3.14));
 }

.SH Output:

 3
 2

.SH See also

   tuple_size                    obtains the size of tuple at compile time
                                 \fI(class template specialization)\fP
   std::tuple_size<std::array>   obtains the size of an array
                                 \fI(class template specialization)\fP
   std::tuple_element<std::pair> obtains the type of the elements of pair
   \fI(C++11)\fP                       \fI(class template specialization)\fP
