.TH std::atomic_signal_fence 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::atomic_signal_fence \- std::atomic_signal_fence

.SH Synopsis
   Defined in header <atomic>
   extern "C" void atomic_signal_fence( std::memory_order order );  \fI(since C++11)\fP

   Establishes memory synchronization ordering of non-atomic and relaxed atomic
   accesses, as instructed by order, between a thread and a signal handler executed on
   the same thread. This is equivalent to std::atomic_thread_fence, except no CPU
   instructions for memory ordering are issued. Only reordering of the instructions by
   the compiler is suppressed as order instructs. For example, writes cannot be moved
   past a fence with release semantics and reads cannot be moved ahead of a fence with
   acquire semantics.

.SH Parameters

   order - the memory ordering executed by this fence

.SH Return value

   \fI(none)\fP

.SH Exceptions

   noexcept specification:  
   noexcept
     

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   memory_order        defines memory ordering constraints for the given atomic
   \fI(C++11)\fP             operation
                       \fI(typedef)\fP 
   atomic_thread_fence generic memory order-dependent fence synchronization primitive
   \fI(C++11)\fP             \fI(function)\fP 
   C documentation for
   atomic_signal_fence

   Categories:

     * unconditionally noexcept
     * Todo no example
