.TH std::vector::push_back 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::vector::push_back \- std::vector::push_back

.SH Synopsis
   void push_back( const T& value ); \fB(1)\fP
   void push_back( T&& value );      \fB(2)\fP \fI(since C++11)\fP

   Appends the given element value to the end of the container.

   1) The new element is initialized as a copy of value.
   2) value is moved into the new element.

   If the new size() is greater than capacity() then all iterators and references
   (including the past-the-end iterator) are invalidated. Otherwise only the
   past-the-end iterator is invalidated.

.SH Parameters

   value             -            the value of the element to append
.SH Type requirements
   -
   T must meet the requirements of CopyInsertable in order to use overload \fB(1)\fP.
   -
   T must meet the requirements of MoveInsertable in order to use overload \fB(2)\fP.

.SH Return value

   \fI(none)\fP

.SH Complexity

   Amortized constant.

.SH Exceptions

   If an exception is thrown, this function has no effect \fI(strong exception guarantee)\fP.

   If T's move constructor is not noexcept and the copy constructor is
   not accessible, vector will use the throwing move constructor. If it   \fI(since C++11)\fP
   throws, the guarantee is waived and the effects are unspecified.

.SH Example

   The following code uses push_back to add several integers to a std::vector<int>:

   
// Run this code

 #include <vector>
 #include <iostream>
  
 int main()
 {
     std::vector<int> numbers;
  
     numbers.push_back(42);
     numbers.push_back(314159);
  
     for (int i : numbers) { // c++11 range-based for loop
         std::cout << i << '\\n';
     }
  
     return 0;
 }

.SH Output:

 42
 314159

.SH See also

   emplace_back constructs elements in-place at the end
   \fI(C++11)\fP      \fI(public member function)\fP 
   pop_back     removes the last element
                \fI(public member function)\fP 
