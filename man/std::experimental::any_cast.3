.TH std::experimental::any_cast 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   template<class ValueType>                      \fB(1)\fP (library fundamentals TS)
   ValueType any_cast(const any& operand);
   template<class ValueType>                      \fB(2)\fP (library fundamentals TS)
   ValueType any_cast(any& operand);
   template<class ValueType>                      \fB(3)\fP (library fundamentals TS)
   ValueType any_cast(any&& operand);
   template<class ValueType>                      \fB(4)\fP (library fundamentals TS)
   const ValueType* any_cast(const any* operand);
   template<class ValueType>                      \fB(5)\fP (library fundamentals TS)
   ValueType* any_cast(any* operand);

   Performs type-safe access to the contained object.

.SH Parameters

   operand - target any object

.SH Return value

   1-3) The value, or a reference to the value contained by operand. If the requested
   ValueType is a reference, it is const-qualified for \fB(1)\fP.
   4-5) If operand is not a null pointer, and the typeid of the requested ValueType
   matches that of the contents of operand, a pointer to the value contained by
   operand, otherwise a null pointer. The returned pointer is const qualified for \fB(4)\fP.

.SH Exceptions

   1-3) Throws bad_any_cast if the typeid of the requested ValueType does not match
   that of the contents of operand.
   4-5)
   noexcept specification:
   noexcept
.SH Category:

     * unconditionally noexcept
