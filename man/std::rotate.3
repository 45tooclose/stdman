.TH std::rotate 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::rotate \- std::rotate

.SH Synopsis
   Defined in header <algorithm>
   template< class ForwardIt >                                            \fI(until C++11)\fP
   void rotate( ForwardIt first, ForwardIt n_first, ForwardIt last );
   template< class ForwardIt >
   ForwardIt rotate( ForwardIt first, ForwardIt n_first, ForwardIt last   \fI(since C++11)\fP
   );

   Performs a left rotation on a range of elements.

   Specifically, std::rotate swaps the elements in the range [first, last) in such a
   way that the element n_first becomes the first element of the new range and n_first
   - 1 becomes the last element.

   A precondition of this function is that [first, n_first) and [n_first, last) are
   valid ranges.

.SH Parameters

   first           -       the beginning of the original range
   n_first         -       the element that should appear at the beginning of the
                           rotated range
   last            -       the end of the original range
.SH Type requirements
   -
   ForwardIt must meet the requirements of ValueSwappable and ForwardIterator.
   -
   The type of dereferenced ForwardIt must meet the requirements of MoveAssignable and
   MoveConstructible.

.SH Return value

   \fI(none)\fP                                         \fI(until C++11)\fP
   The iterator equal to first + (last - n_first) \fI(since C++11)\fP

.SH Complexity

   Linear in the distance between first and last

.SH Possible implementation

   template <class ForwardIt>
   ForwardIt rotate(ForwardIt first, ForwardIt n_first, ForwardIt last)
   {
       ForwardIt next = n_first;
       while (first != next) {
           std::iter_swap(first++, next++);
           if (next == last) {
               next = n_first;
           } else if (first == n_first) {
               n_first = next;
           }
       }
       return next;
   }

.SH Example

   std::rotate is a common building block in many algorithms. This example demonstrates
   insertion sort:

   
// Run this code

 #include <vector>
 #include <iostream>
 #include <algorithm>
  
 int main()
 {
     std::vector<int> v{2, 4, 2, 0, 5, 10, 7, 3, 7, 1};
  
     std::cout << "before sort:      ";
     for (int n: v)
         std::cout << n << ' ';
     std::cout << '\\n';
  
     // insertion sort
     for (auto i = v.begin(); i != v.end(); ++i) {
         std::rotate(std::upper_bound(v.begin(), i, *i), i, i+1);
     }
  
     std::cout << "after sort:       ";
     for (int n: v)
         std::cout << n << ' ';
     std::cout << '\\n';
  
     // simple rotation to the left
     std::rotate(v.begin(), v.begin() + 1, v.end());
  
     std::cout << "simple rotate left  : ";
     for (int n: v)
         std::cout << n << ' ';
     std::cout << '\\n';
  
     // simple rotation to the right
     std::rotate(v.rbegin(), v.rbegin() + 1, v.rend());
  
     std::cout << "simple rotate right : ";
     for (int n: v)
         std::cout << n << ' ';
     std::cout << '\\n';
  
 }

.SH Output:

 before sort:      2 4 2 0 5 10 7 3 7 1
 after sort:       0 1 2 2 3 4 5 7 7 10
 simple rotate left : 1 2 2 3 4 5 7 7 10 0
 simple rotate right: 0 1 2 2 3 4 5 7 7 10

.SH See also

   rotate_copy                         copies and rotate a range of elements
                                       \fI(function template)\fP 
   std::experimental::parallel::rotate parallelized version of std::rotate
   (parallelism TS)                    \fI(function template)\fP 
