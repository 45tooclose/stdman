.TH std::regex_error 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <regex>
   class regex_error : public std::runtime_error {

   public:
   explicit regex_error(std::regex_constants::error_type ecode);  \fI(since C++11)\fP
   std::regex_constants::error_type code() const;

   };

   Defines the type of exception object thrown to report errors in the regular
   expressions library.

   std-regex error-inheritance.svg
   About this image

                                   Inheritance diagram

.SH Contents

     * 1 Member functions
     * 2 Inherited from
       std::exception

          * 2.1 Member functions
          * 2.2 Example

.SH Member functions

   constructor   constructs a regex_error object
                 \fI(public member function)\fP
   code          gets the std::regex_constants::error_type for a regex_error
                 \fI(public member function)\fP

Inherited from std::exception

.SH Member functions

   destructor   destructs the exception object
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP
   what         returns an explanatory string
   \fB[virtual]\fP    \fI(virtual public member function of std::exception)\fP

.SH Example

   
// Run this code

 #include <regex>
 #include <iostream>

 int main()
 {
     try {
         std::regex re("[a-b][a");
     }

     catch (const std::regex_error& e) {
         std::cout << "regex_error caught: " << e.what() << '\\n';
         if (e.code() == std::regex_constants::error_brack) {
             std::cout << "The code was error_brack\\n";
         }
     }
 }

.SH Output:

 regex_error caught: The expression contained mismatched [ and ].
 The code was error_brack
