.TH std::map::empty 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   bool empty() const;

   Checks if the container has no elements, i.e. whether begin() == end().

.SH Contents

     * 1 Parameters
     * 2 Return value
     * 3 Exceptions
     * 4 Complexity
     * 5 Example
     * 6 See also

.SH Parameters

   \fI(none)\fP

.SH Return value

   true if the container is empty, false otherwise

.SH Exceptions

   \fI(none)\fP                  \fI(until C++11)\fP
   noexcept specification: \fI(since C++11)\fP
   noexcept

.SH Complexity

   Constant.

.SH Example

   The following code uses empty to check if a std::map<int, int> contains any
   elements:

   
// Run this code

 #include <map>
 #include <iostream>
 #include <utility>

 int main()
 {
     std::map<int> numbers;
     std::cout << "Initially, numbers.empty(): " << numbers.empty() << '\\n';

     numbers.emplace(42, 13);
     numbers.insert(std::make_pair(13317, 123));
     std::cout << "After adding elements, numbers.empty(): " << numbers.empty() << '\\n';
 }

.SH Output:

 Initially, numbers.empty(): 1
 After adding elements, numbers.empty(): 0

.SH See also

   size returns the number of elements
        \fI(public member function)\fP
