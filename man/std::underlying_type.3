.TH std::underlying_type 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <type_traits>
   template< class T >              \fI(since C++11)\fP
   struct underlying_type;

   Defines a member typedef type of type that is the underlying type for the
   enumeration T.

.SH Contents

     * 1 Member types
     * 2 Helper types
     * 3 Notes
     * 4 Example

.SH Member types

   Name Definition
   type the underlying type for T

.SH Helper types

   template< class T >                                           \fI(since C++14)\fP
   using underlying_type_t = typename underlying_type<T>::type;

.SH Notes

   Each enumeration type has an underlying type, which can be

   1. Specified explicitly (both scoped and unscoped enumerations)

   2. Omitted, in which case it is int for scoped enumerations or an
   implementation-defined integral type capable of representing all values of the enum
   (for unscoped enumerations)

.SH Example

   
// Run this code

 #include <iostream>
 #include <type_traits>

 enum e1 {};
 enum class e2: int {};

 int main() {
     bool e1_type = std::is_same<
         unsigned
        ,typename std::underlying_type<e1>::type
     >::value;

     bool e2_type = std::is_same<
         int
        ,typename std::underlying_type<e2>::type
     >::value;

     std::cout
     << "underlying type for 'e1' is " << (e1_type?"unsigned":"non-unsigned") << '\\n'
     << "underlying type for 'e2' is " << (e2_type?"int":"non-int") << '\\n';
 }

.SH Output:

 underlying type for 'e1' is unsigned
 underlying type for 'e2' is int
