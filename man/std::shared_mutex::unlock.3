.TH std::shared_mutex::unlock 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   void unlock();  \fI(since C++14)\fP

   Unlocks the mutex.

   The mutex must be locked by the current thread of execution, otherwise, the behavior
   is undefined.

   This operation synchronizes-with (as defined in std::memory_order) any subsequent
   lock operation that obtains ownership of the same mutex.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 Notes
     • 5 Example
     • 6 See also

.SH Parameters

   \fI(none)\fP

.SH Return value

   \fI(none)\fP

.SH Exceptions

   \fI(none)\fP

.SH Notes

   unlock() is usually not called directly: std::unique_lock and std::lock_guard are
   used to manage exclusive locking.

.SH Example

   This example shows lock, try_lock and unlock in action:

   
// Run this code

 #include <iostream>
 #include <mutex>
  
 int main()
 {
     std::mutex test;
     if (test.try_lock()) {
         std::cout << "first try_lock successful\\n";
     } else {
         std::cout << "first try_lock NOT successful\\n";
         return 0;
     }
  
     test.unlock();
     test.lock();
  
     if (test.try_lock()) {
         std::cout << "second try_lock successful\\n";
     } else {
         std::cout << "second try_lock NOT successful\\n";
     }
  
     test.lock();  // trying to lock an already-locked std::mutex will
                   // block program execution, so we'll hang here
 }

.SH Possible output:

 first try_lock successful
 second try_lock NOT successful
 (program hangs)

.SH See also

   lock     locks the mutex, blocks if the mutex is not available
            \fI(public member function)\fP
   try_lock tries to lock the mutex, returns if the mutex is not available
            \fI(public member function)\fP
