.TH std::experimental::filesystem::create_symlink,create_directory_symlink 3 "Jun 28 2014" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   Defined in header <experimental/filesystem>
   void create_symlink( const path& to, const path& new_symlink );  \fB(1)\fP (filesystem TS)
   void create_symlink( const path& to, const path& new_symlink,    \fB(2)\fP (filesystem TS)
                        error_code& ec );
   void create_directory_symlink( const path& to, const path&       \fB(3)\fP (filesystem TS)
   new_symlink );
   void create_directory_symlink( const path& to, const path&
   new_symlink,                                                     \fB(4)\fP (filesystem TS)
                                  error_code& ec );

   Creates a symbolic link from new_symlink to to. The (1-2) overloads should be used
   to create symbolic links to files whereas the (3-4) overloads should be used to
   create symbolic links to directories.

   The \fB(2)\fP and \fB(4)\fP versions set ec to an appropriate error code if an error occurs.
   Otherwise, ec is cleared with a call to ec.clear().

   Symbolic link support depends on the operating system the program runs on and on the
   target file system. Some operating systems do not support symbolic links or support
   symbolic links only for regular files. Some file systems do not support symbolic
   links at all.

.SH Parameters

   to          - path of the file to link to
   new_symlink - path of the new symbolic link
   ec          - error code to store the error state to

.SH Return value

   \fI(none)\fP

.SH Exceptions

   1, 3) filesystem_error if an error occurs. The exception object is constructed with
   to and new_symlink as arguments. The error code is set to an appropriate error code
   for the error that caused the failure.
   2, 4)
   noexcept specification:  
   noexcept
     

.SH See also

    This section is incomplete

.SH Category:

     * Todo without reason
