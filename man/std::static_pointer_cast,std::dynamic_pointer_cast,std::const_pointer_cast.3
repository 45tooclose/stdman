.TH std::static_pointer_cast,std::dynamic_pointer_cast,std::const_pointer_cast 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   template< class T, class U >                                  \fB(1)\fP \fI(since C++11)\fP
   shared_ptr<T> static_pointer_cast( const shared_ptr<U>& r );
   template< class T, class U >                                  \fB(2)\fP \fI(since C++11)\fP
   shared_ptr<T> dynamic_pointer_cast( const shared_ptr<U>& r );
   template< class T, class U >                                  \fB(3)\fP \fI(since C++11)\fP
   shared_ptr<T> const_pointer_cast( const shared_ptr<U>& r );

   Creates a new instance of std::shared_ptr whose managed object type is obtained from
   the r's managed object type using a cast expression. Both smart pointers will share
   the ownership of the managed object.

   The resulting std::shared_ptr's managed object will be obtained by calling (in
   respective order):

   1) static_cast<T*>(r.get()).
   2) dynamic_cast<T*>(r.get()) (If the result of the dynamic_cast is 0, the returned
   shared_ptr will be empty).
   3) const_cast<T*>(r.get()).

   In any case, if the parameter r is an empty std::shared_ptr the result will be a new
   empty std::shared_ptr.

.SH Parameters

   r - The pointer to convert

.SH Exceptions

   noexcept specification:
   noexcept
