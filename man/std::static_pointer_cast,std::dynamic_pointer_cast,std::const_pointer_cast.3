.TH std::static_pointer_cast,std::dynamic_pointer_cast,std::const_pointer_cast 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   template< class T, class U >
   std::shared_ptr<T> static_pointer_cast( const std::shared_ptr<U>&  \fB(1)\fP \fI(since C++11)\fP
   r );
   template< class T, class U >
   std::shared_ptr<T> dynamic_pointer_cast( const std::shared_ptr<U>& \fB(2)\fP \fI(since C++11)\fP
   r );
   template< class T, class U >
   std::shared_ptr<T> const_pointer_cast( const std::shared_ptr<U>& r \fB(3)\fP \fI(since C++11)\fP
   );

   Creates a new instance of std::shared_ptr whose managed object type is obtained from
   the r's managed object type using a cast expression. Both smart pointers will share
   the ownership of the managed object.

   The resulting std::shared_ptr's managed object will be obtained by calling (in
   respective order):

   1) static_cast<T*>(r.get()).
   2) dynamic_cast<T*>(r.get()) (If the result of the dynamic_cast is a null pointer
   value, the returned shared_ptr will be empty).
   3) const_cast<T*>(r.get()).

   In any case, if the parameter r is an empty std::shared_ptr the result will be a new
   empty std::shared_ptr.

.SH Parameters

   r - The pointer to convert

.SH Exceptions

   noexcept specification:
   noexcept

.SH Notes

   The expressions std::shared_ptr<T>(static_cast<T*>(r.get())),
   std::shared_ptr<T>(dynamic_cast<T*>(r.get())) and
   std::shared_ptr<T>(const_cast<T*>(r.get())) might seem to have the same effect, but
   they all will eventually result in undefined behavior, attempting to delete the same
   object twice!

.SH Possible implementation

.SH First version
   template< class T, class U >
   std::shared_ptr<T> static_pointer_cast( const std::shared_ptr<U>& r ) noexcept
   {
       auto p = static_cast<typename std::shared_ptr<T>::element_type*>(r.get());
       return std::shared_ptr<T>(r, p);
   }
.SH Second version
   template< class T, class U >
   std::shared_ptr<T> dynamic_pointer_cast( const std::shared_ptr<U>& r ) noexcept
   {
       if (auto p = dynamic_cast<typename std::shared_ptr<T>::element_type*>(r.get())) {
           return std::shared_ptr<T>(r, p);
       } else {
           return std::shared_ptr<T>();
       }
   }
                                       Third version
   template< class T, class U >
   std::shared_ptr<T> const_pointer_cast( const std::shared_ptr<U>& r ) noexcept
   {
       auto p = const_cast<typename std::shared_ptr<T>::element_type*>(r.get());
       return std::shared_ptr<T>(r, p);
   }

.SH Example

    This section is incomplete
    Reason: no example

.SH See also

   constructor   constructs new shared_ptr
                 \fI(public member function)\fP

   Categories:

     * unconditionally noexcept
     * Todo no example
