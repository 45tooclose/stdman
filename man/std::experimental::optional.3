.TH std::experimental::optional 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::experimental::optional \- std::experimental::optional

.SH Synopsis
   Defined in header <optional>
   template< class T >           (library fundamentals TS)
   class optional;

   The class template std::experimental::optional manages an optional contained value,
   i.e. a value that semantically may not be present.

   A common use case for optional is the return value of a function that may fail. As
   opposed to other approaches, such as std::pair<T,bool>, optional handles expensive
   to construct objects well and is more readable, as the intent is expressed
   explicitly.

   The value is guaranteed to be allocated within the optional object itself, i.e. no
   dynamic memory allocation ever takes place. Thus, an optional object models an
   object, not a pointer, even though the operator*() and operator->() are defined.

   The value inside an optional object may be in either an initialized or uninitialized
   state. An optional object with a value in initialized state is called engaged,
   whereas if the value is in uninitialized state, the object is called disengaged.

   The optional object is engaged on the following conditions:

     * The object is initialized with a value of type T

     * The object is assigned an engaged optional.

   The object is disengaged on the following conditions:

     * The object is default-initialized.

     * The object is initialized with a value of std::experimental::nullopt_t or a
       disengaged optional object.

     * The object is assigned a value of std::experimental::nullopt_t or a disengaged
       optional.

.SH Template parameters

   T - the type of the value to manage initialization state for. The type must meet the
       requirements of Destructible

.SH Member types

   Member type Definition
   value_type  T

.SH Member functions

   constructor   constructs the optional object
                 \fI(public member function)\fP 
   destructor    if engaged, destroys the contained value
                 \fI(public member function)\fP 
   operator=     assigns contents
                 \fI(public member function)\fP 
.SH Observers
   operator->    accesses the contained value
   operator*     \fI(public member function)\fP 
   operator bool checks whether the object is in engaged state
                 \fI(public member function)\fP 
   value         returns the contained value
                 \fI(public member function)\fP 
   value_or      returns the contained value if engaged, another value otherwise
                 \fI(public member function)\fP 
.SH Modifiers
   swap          exchanges the contents
                 \fI(public member function)\fP 
   emplace       constructs the contained value in-place
                 \fI(public member function)\fP 

.SH Non-member functions

   operator==                             compares optional objects
   operator<                              \fI(function template)\fP 
   make_optional                          creates an optional object
                                          \fI(function template)\fP 
   std::swap(std::experimental::optional) specializes the std::swap algorithm
                                          \fI(function)\fP 

.SH Helper classes

   std::hash<std::experimental::optional> specializes the std::hash algorithm
                                          \fI(class template specialization)\fP 
