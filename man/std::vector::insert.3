.TH std::vector::insert 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   iterator insert( iterator pos, const T& value );             (until
                                                                C++11)
   iterator insert( const_iterator pos, const T& value          (since
   );                                                           C++11)
   iterator insert( const_iterator pos, T&& value );        \fB(2)\fP (since
                                                                C++11)
   void insert( iterator pos, size_type count, const T&                 (until
   value );                                                             C++11)
   iterator insert( const_iterator pos, size_type       \fB(1)\fP             (since
   count, const T& value );                                             C++11)
   template< class InputIt >                                                    (until
   void insert( iterator pos, InputIt first, InputIt        \fB(3)\fP                 C++11)
   last);
   template< class InputIt >                                    \fB(4)\fP             (since
   iterator insert( const_iterator pos, InputIt first,                          C++11)
   InputIt last );
   iterator insert( const_iterator pos,                                 \fB(5)\fP     (since
   std::initializer_list<T> ilist );                                            C++11)

   Inserts elements at specified location in the container.

   1-2) inserts value before the location pointed to by pos
   3) inserts count copies of the value before the location pointed to by pos
   4) inserts elements from range [first, last) before the location pointed to by pos.
   The behavior is undefined if first and last are iterators into *this.
   5) inserts elements from initializer list ilist.

   Causes reallocation if the new size() is greater than the old capacity(). If the new
   size() is greater than capacity(), all iterators and references are invalidated.
   Otherwise, only the iterators and references before the insertion point remain
   valid. The past-the-end iterator is also invalidated.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Complexity
     • 4 Example
     • 5 See also

.SH Parameters

   pos         - iterator to the location before which the content will be inserted.
                 pos may be the end() iterator
   value       - element value to insert
   first, last - the range of elements to insert, can't be iterators into container for
                 which insert is called
   ilist       - initializer list to insert the values from
.SH Type requirements
   -
   InputIt must meet the requirements of InputIterator.

.SH Return value

   1-2) Iterator pointing to the inserted value
   3) Iterator pointing to the first element inserted, or pos if count==0.
   4) Iterator pointing to the first element inserted, or pos if first==last.
   5) Iterator pointing to the first element inserted, or pos if ilist is empty.

.SH Complexity

   1-2) Constant plus linear in the distance between pos and end of the container.
   3) Linear in count plus linear in the distance between pos and end of the container.
   4) Linear in std::distance(first, last) plus linear in the distance between pos and
   end of the container.
   5) Linear in ilist.size() plus linear in the distance between pos and end of the
   container.

.SH Example

   
// Run this code

 #include <iostream>
 #include <vector>
  
 void print_vec(const std::vector<int>& vec)
 {
     for (auto x: vec) {
          std::cout << ' ' << x;
     }
     std::cout << '\\n';
 }
  
 int main ()
 {
     std::vector<int> vec(3,100);
     print_vec(vec);
  
     auto it = vec.begin();
     it = vec.insert(it, 200);
     print_vec(vec);
  
     vec.insert(it,2,300);
     print_vec(vec);
  
     // "it" no longer valid, get a new one:
     it = vec.begin();
  
     std::vector<int> vec2(2,400);
     vec.insert(it+2, vec2.begin(), vec2.end());
     print_vec(vec);
  
     int arr[] = { 501,502,503 };
     vec.insert(vec.begin(), arr, arr+3);
     print_vec(vec);
 }

.SH Output:

 100 100 100
 200 100 100 100
 300 300 200 100 100 100
 300 300 400 400 200 100 100 100
 501 502 503 300 300 400 400 200 100 100 100

.SH See also

   emplace   constructs element in-place
   \fI(C++11)\fP   \fI(public member function)\fP
   push_back adds elements to the end
             \fI(public member function)\fP
