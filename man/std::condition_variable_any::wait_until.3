.TH std::condition_variable_any::wait_until 3 "Nov 25 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::condition_variable_any::wait_until \- std::condition_variable_any::wait_until

.SH Synopsis
   template< class Lock, class Clock, class Duration >

   std::cv_status wait_until( Lock& lock,                             \fB(1)\fP \fI(since C++11)\fP

                              const std::chrono::time_point<Clock,
   Duration>& timeout_time );
   template< class Lock, class Clock, class Duration, class Predicate
   >

   bool wait_until( Lock& lock,                                       \fB(2)\fP \fI(since C++11)\fP
                    const std::chrono::time_point<Clock, Duration>&
   timeout_time,

                    Predicate pred );

   wait_until causes the current thread to block until the condition variable is
   notified, a specific time is reached, or a spurious wakeup occurs, optionally
   looping until some predicate is satisfied.

   1) Atomically releases lock, blocks the current executing thread, and adds it to the
   list of threads waiting on *this. The thread will be unblocked when notify_all() or
   notify_one() is executed, or when the absolute time point timeout_time is reached.
   It may also be unblocked spuriously. When unblocked, regardless of the reason, lock
   is reacquired and wait_until exits. If this function exits via exception, lock is
   also reacquired.
   2) Equivalent to

 while (!pred()) {
     if (wait_until(lock, abs_time) == std::cv_status::timeout) {
         return pred();
     }
 }
 return true;

   This overload may be used to ignore spurious wakeups.

   The clock tied to timeout_time is used, which means that adjustments of the clock
   are taken into account. Thus, the maximum duration of the block might, but might
   not, be less or more than timeout_time - Clock::now() at the time of the call,
   depending on the direction of the adjustment. The function also may block for longer
   than until after timeout_time has been reached due to scheduling or resource
   contention delays.

   Calling this function if lock.mutex() is not locked by the current thread is
   undefined behavior.

   Calling this function if lock.mutex() is not the same mutex as the one used by all
   other threads that are currently waiting on the same condition variable is undefined
   behavior.

.SH Parameters

   lock         - an object of type Lock that meets the requirements of BasicLockable,
                  which must be locked by the current thread
   timeout_time - an object of type std::chrono::time_point representing the time when
                  to stop waiting
                  predicate which returns false if the waiting should be continued.

   pred         - The signature of the predicate function should be equivalent to the
                  following:

                   bool pred();

.SH Return value

   1) std::cv_status::timeout if the absolute timeout specified by abs_time was
   reached, std::cv_status::no_timeout overwise.
   2) false if the predicate pred still evaluates to false after the abs_time timeout
   expired, otherwise true.

.SH Exceptions

   May throw std::system_error, may also propagate exceptions thrown by lock.lock() or
   lock.unlock().

.SH Example

   
// Run this code

 #include <iostream>
 #include <atomic>
 #include <condition_variable>
 #include <thread>
 #include <chrono>
  
 std::condition_variable_any cv;
 std::mutex cv_m;
 std::atomic<int> i = ATOMIC_VAR_INIT(0);
  
 void waits(int idx)
 {
     std::unique_lock<std::mutex> lk(cv_m);
     auto now = std::chrono::system_clock::now();
     if(cv.wait_until(lk, now + std::chrono::milliseconds(idx*100), [](){return i == 1;}))
         std::cerr << "Thread " << idx << " finished waiting. i == " << i << '\\n';
     else
         std::cerr << "Thread " << idx << " timed out. i == " << i << '\\n';
 }
  
 void signals()
 {
     std::this_thread::sleep_for(std::chrono::milliseconds(120));
     std::cerr << "Notifying...\\n";
     cv.notify_all();
     std::this_thread::sleep_for(std::chrono::milliseconds(100));
     i = 1;
     std::cerr << "Notifying again...\\n";
     cv.notify_all();
 }
  
 int main()
 {
     std::thread t1(waits, 1), t2(waits, 2), t3(waits, 3), t4(signals);
     t1.join();
     t2.join();
     t3.join();
     t4.join();
 }

.SH Possible output:

 Thread 1 timed out. i == 0
 Notifying...
 Thread 2 timed out. i == 0
 Notifying again...
 Thread 3 finished waiting. i == 1

.SH See also

   wait     blocks the current thread until the condition variable is woken up
            \fI(public member function)\fP 
            blocks the current thread until the condition variable is woken up or after
   wait_for the specified timeout duration
            \fI(public member function)\fP 
