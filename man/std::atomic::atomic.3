.TH std::atomic::atomic 3 "Sep  4 2015" "2.0 | http://cppreference.com" "C++ Standard Libary"
.SH Synopsis
   bool is_lock_free() const;           \fI(since C++11)\fP
   bool is_lock_free() const volatile;

   Checks whether the atomic operations on all objects of this type are lock-free.

.SH Parameters

   \fI(none)\fP

.SH Return value

   true if the atomic operations on the objects of this type are lock-free, false
   otherwise.

.SH Exceptions

   noexcept specification:
   noexcept

.SH See also

   atomic_is_lock_free checks if the atomic type's operations are lock-free
   \fI(C++11)\fP             \fI(function template)\fP

.SH Category:

     * unconditionally noexcept
