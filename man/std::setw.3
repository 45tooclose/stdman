.TH std::setw 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <iomanip>
   /*unspecified*/ setw( int n );

   When used in an expression out << setw(n) or in >> setw(n), sets the width parameter
   of the stream out or in to exactly n.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Notes
     • 4 Example
     • 5 See also

.SH Parameters

   n - new value for width

.SH Return value

   Returns an object of unspecified type such that if str is the name of an output
   stream of type std::basic_ostream<CharT, Traits> or std::basic_istream<CharT,
   Traits>, then the expression str << setw(n) or str >> setw(n) behaves as if the
   following code was executed:

   str.width(n);

.SH Notes

   The width property of the stream will be reset to zero (meaning "unspecified") if
   any of the following functions are called:

     • Input

     • operator>>(basic_istream&, basic_string&)
     • operator>>(basic_ostream&, char*)

     • Output

     • Overloads 1-7 of basic_ostream::operator<<() (at Stage 3 of num_put::put())
     • operator<<(basic_ostream&, char) and operator<<(basic_ostream&, char*)
     • operator<<(basic_osteam&, basic_string&)
     • std::put_money (inside money_put::put())

.SH Example

   
// Run this code

 #include <sstream>
 #include <iostream>
 #include <iomanip>

 int main()
 {
     std::cout << "no setw:" << 42 << '\\n'
               << "setw(6):" << std::setw(6) << 42 << '\\n'
               << "setw(6), several elements: " << 89 << std::setw(6) << 12 << 34 << '\\n';
     std::istringstream is("hello, world");
     char arr[10];
     is >> std::setw(6) >> arr;
     std::cout << "Input from \\"" << is.str() << "\\" with setw(6) gave \\""
               << arr << "\\"\\n";
 }

.SH Output:

 no setw:42
 setw\fB(6)\fP:    42
 setw\fB(6)\fP, several elements: 89    1234
 Input from "hello, world" with setw\fB(6)\fP gave "hello"

.SH See also

   width   manages field width
           \fI(public member function of std::ios_base)\fP
   setfill changes the fill character
           \fI(function template)\fP
