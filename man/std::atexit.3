.TH std::atexit 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <cstdlib>
   extern "C" int atexit( void (*func)() );
   extern "C++" int atexit( void (*func)() );

   Registers the function pointed to by func to be called on normal program termination
   (via std::exit() or returning from the cpp/language/main function)

   The functions will be called during the destruction of the static
   objects, in reverse order: if A was registered before B, then the call
   to B is made before the call to A. Same applies to the ordering        \fI(until C++11)\fP
   between static object constructors and the calls to atexit: see
   std::exit
   The functions may be called concurrently with the destruction of the
   objects with static storage duration and with each other, maintaining
   the guarantee that if registration of A was sequenced-before the       \fI(since C++11)\fP
   registration of B, then the call to B is sequenced-before the call to
   A, same applies to the sequencing between static object constructors
   and calls to atexit: see std::exit

   The same function may be registered more than once.

   If a function exits via an exception, std::terminate is called.

   atexit is thread-safe: calling the function from several threads does not induce a
   data race.

   The implementation is guaranteed to support the registration of at least 32
   functions. The exact limit is implementation-defined.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 Example
     • 5 See also

.SH Parameters

   func - pointer to a function to be called on normal program termination

.SH Return value

   0 if the registration succeeds, nonzero value otherwise.

.SH Exceptions

   \fI(none)\fP                  \fI(until C++11)\fP
   noexcept specification: \fI(since C++11)\fP
   noexcept

.SH Example

   
// Run this code

 #include <iostream>
 #include <cstdlib>

 void atexit_handler_1()
 {
     std::cout << "at exit #1\\n";
 }

 void atexit_handler_2()
 {
     std::cout << "at exit #2\\n";
 }

 int main()
 {
     const int result_1 = std::atexit(atexit_handler_1);
     const int result_2 = std::atexit(atexit_handler_2);

     if ((result_1 != 0) or (result_2 != 0)) {
         std::cerr << "Registration failed\\n";
         return EXIT_FAILURE;
     }

     std::cout << "returning from main\\n";
     return EXIT_SUCCESS;
 }

.SH Output:

 returning from main
 at exit #2
 at exit #1

.SH See also

   at_quick_exit registers a function to be called on quick_exit invocation
   \fI(C++11)\fP       \fI(function)\fP
   C documentation for
   atexit
