.TH std::lock_guard::lock_guard 3 "Nov 16 2016" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::lock_guard::lock_guard \- std::lock_guard::lock_guard

.SH Synopsis
   explicit lock_guard( mutex_type& m );                    \fI(until C++17)\fP
   explicit lock_guard( MutexTypes&... m );                 \fI(since C++17)\fP
   lock_guard( mutex_type& m, std::adopt_lock_t t                         \fI(until C++17)\fP
   );                                               \fB(1)\fP
   lock_guard( MutexTypes&... m, std::adopt_lock_t      \fB(2)\fP               \fI(since C++17)\fP
   t );
   lock_guard( const lock_guard& ) = delete;                \fB(3)\fP           \fI(since C++11)\fP

   Acquires ownership of the given mutex m.

   1) Effectively calls m.lock(). The behavior is undefined if m is not a
   recursive mutex and the current thread already owns m.                 \fI(until C++17)\fP
   2) Acquires ownership of the mutex m without attempting to lock it.
   The behavior is undefined if the current thread does not own m.
   1) If sizeof...(MutexTypes) == 0, does nothing. Otherwise, If
   sizeof...(MutexTypes) == 1, effectively calls m.lock(). Otherwise,
   effectively calls std::lock(m...). The behavior is undefined if one of
   MutexTypes is not a recursive mutex and the current thread already     \fI(since C++17)\fP
   owns the corresponding argument in m....
   2) Acquires ownership of the mutexes m... without attempting to lock
   any of them. The behavior is undefined if the current thread does not
   own one (or more) of the mutexes in m....

   3) Copy constructor is deleted.

   The behavior is undefined if m is destroyed before the lock_guard object is.

.SH Parameters

   m - mutex to acquire ownership of
   t - tag parameter used to select non-locking version of the constructor

.SH Exceptions

   1) Throws any exceptions thrown by m.lock()

   2) Throws nothing
