.TH std::basic_string::basic_string 3 "Nov 25 2015" "2.1 | http://cppreference.com" "C++ Standard Libary"
.SH NAME
std::basic_string::basic_string \- std::basic_string::basic_string

.SH Synopsis
   explicit basic_string( const Allocator& alloc = Allocator() );         \fI(until C++14)\fP
   basic_string() : basic_string( Allocator() ) {}                        \fI(since C++14)\fP
   explicit basic_string( const Allocator& alloc );
   basic_string( size_type count,

                 CharT ch,                                            \fB(2)\fP

                 const Allocator& alloc = Allocator() );
   basic_string( const basic_string& other,

                 size_type pos,                                       \fB(3)\fP
                 size_type count = std::basic_string::npos,

                 const Allocator& alloc = Allocator() );
   basic_string( const CharT* s,

                 size_type count,                                 \fB(1)\fP \fB(4)\fP

                 const Allocator& alloc = Allocator() );
   basic_string( const CharT* s,                                      \fB(5)\fP
                 const Allocator& alloc = Allocator() );
   template< class InputIt >

   basic_string( InputIt first, InputIt last,                         \fB(6)\fP

                 const Allocator& alloc = Allocator() );
   basic_string( const basic_string& other );                         \fB(7)\fP
   basic_string( const basic_string& other, const Allocator&          \fB(7)\fP \fI(since C++11)\fP
   alloc );
   basic_string( basic_string&& other );                              \fB(8)\fP \fI(since C++11)\fP
   basic_string( basic_string&& other, const Allocator& alloc );      \fB(8)\fP \fI(since C++11)\fP
   basic_string( std::initializer_list<CharT> init,                   \fB(9)\fP \fI(since C++11)\fP
                 const Allocator& alloc = Allocator() );

   Constructs new string from a variety of data sources and optionally using user
   supplied allocator alloc.

   1) Default constructor. Constructs empty string (zero size and unspecified capacity)
   2) Constructs the string with count copies of character ch. The behavior is
   undefined if count >= npos
   3) Constructs the string with a substring [pos, pos+count) of other. If the
   requested substring lasts past the end of the string, or if count == npos, the
   resulting substring is [pos, size()).
   4) Constructs the string with the first count characters of character string pointed
   to by s. s can contain null characters. The behavior is undefined if s does not
   point at an array of at least count elements of CharT.
   5) Constructs the string with the contents initialized with a copy of the
   null-terminated character string pointed to by s. The length of the string is
   determined by the first null character. The behavior is undefined if s does not
   point at an array of at least Traits::length(s)+1 elements of CharT.
   6) Constructs the string with the contents of the range [first, last).

   This overload has the same effect as overload \fB(2)\fP if InputIt is an     \fI(until C++11)\fP
   integral type.
   This overload only participates in overload resolution if InputIt      \fI(since C++11)\fP
   satisfies InputIterator.

   7) Copy constructor. Constructs the string with the copy of the contents of other.
   8) Move constructor. Constructs the string with the contents of other using move
   semantics. other is left in valid, but unspecified state.
   9) Constructs the string with the contents of the initializer list init.

.SH Parameters

   alloc       - allocator to use for all memory allocations of this string
   count       - size of the resulting string
   ch          - value to initialize the string with
   first, last - range to copy the characters from
   s           - pointer to a character string to use
                 as source to initialize the string with
   other       - another string to use as source to initialize the string with
   init        - initializer list to initialize the string with

.SH Complexity

   1) constant
   2-4) linear in count
   5) linear in length of s
   6) linear in distance between first and last
   7) linear in size of other
   8) constant. If alloc is given and alloc != other.get_allocator(), then linear
   9) linear in size of init

.SH Exceptions

   1)
   noexcept specification:         \fI(since C++17)\fP
   noexcept(noexcept(Allocator()))

   3) std::out_of_range if pos > other.size()

   8) Throws nothing if alloc == str.get_allocator() \fI(until C++14)\fP
   8)
   noexcept specification:                           \fI(since C++14)\fP
   noexcept
     

.SH Example

   
// Run this code

 #include <iostream>
 #include <cassert>
 #include <iterator>
 #include <string>
  
 int main()
 {
   {
     // string::string()
     std::string s;
     assert(s.empty() && (s.length() == 0) && (s.size() == 0));
   }
  
   {
     // string::string(size_type count, charT ch)
     std::string s(4, '=');
     std::cout << s << '\\n'; // "===="
   }
  
   {
     std::string const other("Exemplary");
     // string::string(string const& other, size_type pos, size_type count)
     std::string s(other, 0, other.length()-1);
     std::cout << s << '\\n'; // "Exemplar"
   }
  
   {
     // string::string(charT const* s, size_type count)
     std::string s("C-style string", 7);
     std::cout << s << '\\n'; // "C-style"
   }
  
   {
     // string::string(charT const* s)
     std::string s("C-style\\0string");
     std::cout << s << '\\n'; // "C-style"
   }
  
   {
     char mutable_c_str[] = "another C-style string";
     // string::string(InputIt first, InputIt last)
     std::string s(std::begin(mutable_c_str)+8, std::end(mutable_c_str)-1);
     std::cout << s << '\\n'; // "C-style string"
   }
  
   {
     std::string const other("Exemplar");
     std::string s(other);
     std::cout << s << '\\n'; // "Exemplar"
   }
  
   {
     // string::string(string&& str)
     std::string s(std::string("C++ by ") + std::string("example"));
     std::cout << s << '\\n'; // "C++ by example"
   }
  
   {
     // string(std::initializer_list<charT> ilist)
     std::string s({ 'C', '-', 's', 't', 'y', 'l', 'e' });
     std::cout << s << '\\n'; // "C-style"
   }
 }

.SH Output:

 ====
 Exemplar
.SH C-style
.SH C-style
 C-style string
 Exemplar
 C++ by example
.SH C-style

.SH See also

   assign    assign characters to a string
             \fI(public member function)\fP 
   operator= assigns values to the string
             \fI(public member function)\fP 

   Categories:

     * conditionally noexcept
     * unconditionally noexcept
