.TH std::map 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   Defined in header <map>
   template<

   class Key,
   class T,
   class Compare = std::less<Key>,
   class Allocator = std::allocator<std::pair<const Key, T> >

   > class map;

   std::map is a sorted associative container that contains key-value pairs with unique
   keys. Keys are sorted by using the comparison function Compare. Search, removal, and
   insertion operations have logarithmic complexity. Maps are usually implemented as
   red-black trees.

   std::map meets the requirements of Container, AllocatorAwareContainer,
   AssociativeContainer and ReversibleContainer.

.SH Contents

     * 1 Member types
     * 2 Member classes
     * 3 Member functions

          * 3.1 Element access
          * 3.2 Iterators
          * 3.3 Capacity
          * 3.4 Modifiers
          * 3.5 Lookup
          * 3.6 Observers

     * 4 Non-member functions

.SH Member types

   Member type            Definition
   key_type               Key
   mapped_type            T
   value_type             std::pair<const Key, T>
   size_type              Unsigned integral type (usually std::size_t)
   difference_type        Signed integer type (usually std::ptrdiff_t)
   key_compare            Compare
   allocator_type         Allocator
   reference              Allocator::reference \fI(until C++11)\fP
                          value_type& \fI(since C++11)\fP
   const_reference        Allocator::const_reference \fI(until C++11)\fP
                          const value_type& \fI(since C++11)\fP
   pointer                Allocator::pointer \fI(until C++11)\fP
                          std::allocator_traits<Allocator>::pointer \fI(since C++11)\fP
   const_pointer          Allocator::const_pointer \fI(until C++11)\fP
                          std::allocator_traits<Allocator>::const_pointer \fI(since C++11)\fP
   iterator               BidirectionalIterator
   const_iterator         Constant bidirectional iterator
   reverse_iterator       std::reverse_iterator<iterator>
   const_reverse_iterator std::reverse_iterator<const_iterator>

.SH Member classes

   value_compare compares objects of type value_type
                 \fI(class)\fP

.SH Member functions

   constructor   constructs the map
                 \fI(public member function)\fP
   destructor    destructs the map
                 \fI(public member function)\fP
   operator=     assigns values to the container
                 \fI(public member function)\fP
   get_allocator returns the associated allocator
                 \fI(public member function)\fP
.SH Element access
   at            access specified element with bounds checking
   \fI(C++11)\fP       \fI(public member function)\fP
   operator[]    access specified element
                 \fI(public member function)\fP
.SH Iterators
   begin         returns an iterator to the beginning
   cbegin        \fI(public member function)\fP
   end           returns an iterator to the end
   cend          \fI(public member function)\fP
   rbegin        returns a reverse iterator to the beginning
   crbegin       \fI(public member function)\fP
   rend          returns a reverse iterator to the end
   crend         \fI(public member function)\fP
.SH Capacity
   empty         checks whether the container is empty
                 \fI(public member function)\fP
   size          returns the number of elements
                 \fI(public member function)\fP
   max_size      returns the maximum possible number of elements
                 \fI(public member function)\fP
.SH Modifiers
   clear         clears the contents
                 \fI(public member function)\fP
   insert        inserts elements
                 \fI(public member function)\fP
   emplace       constructs element in-place
   \fI(C++11)\fP       \fI(public member function)\fP
   emplace_hint  constructs elements in-place using a hint
   \fI(C++11)\fP       \fI(public member function)\fP
   erase         erases elements
                 \fI(public member function)\fP
   swap          swaps the contents
                 \fI(public member function)\fP
.SH Lookup
   count         returns the number of elements matching specific key
                 \fI(public member function)\fP
   find          finds element with specific key
                 \fI(public member function)\fP
   equal_range   returns range of elements matching a specific key
                 \fI(public member function)\fP
   lower_bound   returns an iterator to the first element not less than the given value
                 \fI(public member function)\fP
   upper_bound   returns an iterator to the first element greater than a certain value
                 \fI(public member function)\fP
.SH Observers
   key_comp      returns the function that compares keys
                 \fI(public member function)\fP
   value_comp    returns the function that compares keys in objects of type value_type
                 \fI(public member function)\fP

.SH Non-member functions

   operator==
   operator!=
   operator<           lexicographically compares the values in the map
   operator<=          \fI(function template)\fP
   operator>
   operator>=
   std::swap(std::map) specializes the std::swap algorithm
                       \fI(function template)\fP
