.TH std::atomic::operator= 3 "Apr 19 2014" "1.0.0" "C++ Standard Libary"
.SH Synopsis
   T operator=( T desired );
   T operator=( T desired ) volatile;                               \fB(1)\fP \fI(since C++11)\fP
   atomic& operator=( const atomic& ) = delete;   \fB(1)\fP \fI(since C++11)\fP
   atomic& operator=( const atomic& ) volatile =                    \fB(2)\fP \fI(since C++11)\fP
   delete;

   1) Atomically assigns a value t to the atomic variable. Equivalent to
   store(desired).
   2) Atomic variables are not CopyAssignable.

.SH Contents

     • 1 Parameters
     • 2 Return value
     • 3 Exceptions
     • 4 Notes
     • 5 See also

.SH Parameters

   desired - value to assign

.SH Return value

   desired.

.SH Exceptions

   noexcept specification:
   noexcept

.SH Notes

   Unlike most assignment operators, the assignment operators for atomic types do not
   return a reference to their left-hand arguments. They return a copy of the stored
   value instead.

.SH See also

   constructor   constructs an atomic object
                 \fI(public member function)\fP
